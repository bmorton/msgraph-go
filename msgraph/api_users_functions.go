/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// UsersFunctionsApiService UsersFunctionsApi service
type UsersFunctionsApiService service

type ApiUsersDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
}


func (r ApiUsersDeltaRequest) Execute() ([]*AnyOfmicrosoftGraphUser, *_nethttp.Response, error) {
	return r.ApiService.UsersDeltaExecute(r)
}

/*
UsersDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsersDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersDelta(ctx _context.Context) ApiUsersDeltaRequest {
	return ApiUsersDeltaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphUser
func (a *UsersFunctionsApiService) UsersDeltaExecute(r ApiUsersDeltaRequest) ([]*AnyOfmicrosoftGraphUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/microsoft.graph.delta()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserActivitiesRecentRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
}


func (r ApiUsersUserActivitiesRecentRequest) Execute() ([]*AnyOfmicrosoftGraphUserActivity, *_nethttp.Response, error) {
	return r.ApiService.UsersUserActivitiesRecentExecute(r)
}

/*
UsersUserActivitiesRecent Invoke function recent

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUserActivitiesRecentRequest
*/
func (a *UsersFunctionsApiService) UsersUserActivitiesRecent(ctx _context.Context, userId string) ApiUsersUserActivitiesRecentRequest {
	return ApiUsersUserActivitiesRecentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphUserActivity
func (a *UsersFunctionsApiService) UsersUserActivitiesRecentExecute(r ApiUsersUserActivitiesRecentRequest) ([]*AnyOfmicrosoftGraphUserActivity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphUserActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserActivitiesRecent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/activities/microsoft.graph.recent()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	user string
}


func (r ApiUsersUserCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
UsersUserCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param user Usage: User={User}
 @return ApiUsersUserCalendarAllowedCalendarSharingRolesRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarAllowedCalendarSharingRoles(ctx _context.Context, userId string, user string) ApiUsersUserCalendarAllowedCalendarSharingRolesRequest {
	return ApiUsersUserCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *UsersFunctionsApiService) UsersUserCalendarAllowedCalendarSharingRolesExecute(r ApiUsersUserCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarCalendarViewDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
}


func (r ApiUsersUserCalendarCalendarViewDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarCalendarViewDeltaExecute(r)
}

/*
UsersUserCalendarCalendarViewDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUserCalendarCalendarViewDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarCalendarViewDelta(ctx _context.Context, userId string) ApiUsersUserCalendarCalendarViewDeltaRequest {
	return ApiUsersUserCalendarCalendarViewDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarCalendarViewDeltaExecute(r ApiUsersUserCalendarCalendarViewDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarCalendarViewDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendar/calendarView/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	eventId string
	user string
}


func (r ApiUsersUserCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
UsersUserCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiUsersUserCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, userId string, eventId string, user string) ApiUsersUserCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiUsersUserCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *UsersFunctionsApiService) UsersUserCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r ApiUsersUserCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendar/calendarView/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarCalendarViewEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	eventId string
}


func (r ApiUsersUserCalendarCalendarViewEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarCalendarViewEventInstancesDeltaExecute(r)
}

/*
UsersUserCalendarCalendarViewEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param eventId key: id of event
 @return ApiUsersUserCalendarCalendarViewEventInstancesDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarCalendarViewEventInstancesDelta(ctx _context.Context, userId string, eventId string) ApiUsersUserCalendarCalendarViewEventInstancesDeltaRequest {
	return ApiUsersUserCalendarCalendarViewEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarCalendarViewEventInstancesDeltaExecute(r ApiUsersUserCalendarCalendarViewEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarCalendarViewEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendar/calendarView/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarEventsDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
}


func (r ApiUsersUserCalendarEventsDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarEventsDeltaExecute(r)
}

/*
UsersUserCalendarEventsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUserCalendarEventsDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarEventsDelta(ctx _context.Context, userId string) ApiUsersUserCalendarEventsDeltaRequest {
	return ApiUsersUserCalendarEventsDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarEventsDeltaExecute(r ApiUsersUserCalendarEventsDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarEventsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendar/events/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	eventId string
	user string
}


func (r ApiUsersUserCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarEventsEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
UsersUserCalendarEventsEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiUsersUserCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarEventsEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, userId string, eventId string, user string) ApiUsersUserCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiUsersUserCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *UsersFunctionsApiService) UsersUserCalendarEventsEventCalendarAllowedCalendarSharingRolesExecute(r ApiUsersUserCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarEventsEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendar/events/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarEventsEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	eventId string
}


func (r ApiUsersUserCalendarEventsEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarEventsEventInstancesDeltaExecute(r)
}

/*
UsersUserCalendarEventsEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param eventId key: id of event
 @return ApiUsersUserCalendarEventsEventInstancesDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarEventsEventInstancesDelta(ctx _context.Context, userId string, eventId string) ApiUsersUserCalendarEventsEventInstancesDeltaRequest {
	return ApiUsersUserCalendarEventsEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarEventsEventInstancesDeltaExecute(r ApiUsersUserCalendarEventsEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarEventsEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendar/events/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	calendarGroupId string
	calendarId string
	user string
}


func (r ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
UsersUserCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param calendarGroupId key: id of calendarGroup
 @param calendarId key: id of calendar
 @param user Usage: User={User}
 @return ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRoles(ctx _context.Context, userId string, calendarGroupId string, calendarId string, user string) ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesRequest {
	return ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		calendarGroupId: calendarGroupId,
		calendarId: calendarId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *UsersFunctionsApiService) UsersUserCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesExecute(r ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendarGroups/{calendarGroup-id}/calendars/{calendar-id}/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendarGroup-id"+"}", _neturl.PathEscape(parameterToString(r.calendarGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	calendarGroupId string
	calendarId string
}


func (r ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaExecute(r)
}

/*
UsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param calendarGroupId key: id of calendarGroup
 @param calendarId key: id of calendar
 @return ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDelta(ctx _context.Context, userId string, calendarGroupId string, calendarId string) ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaRequest {
	return ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		calendarGroupId: calendarGroupId,
		calendarId: calendarId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaExecute(r ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendarGroups/{calendarGroup-id}/calendars/{calendar-id}/calendarView/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendarGroup-id"+"}", _neturl.PathEscape(parameterToString(r.calendarGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	calendarGroupId string
	calendarId string
	eventId string
	user string
}


func (r ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
UsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param calendarGroupId key: id of calendarGroup
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, userId string, calendarGroupId string, calendarId string, eventId string, user string) ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		calendarGroupId: calendarGroupId,
		calendarId: calendarId,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *UsersFunctionsApiService) UsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendarGroups/{calendarGroup-id}/calendars/{calendar-id}/calendarView/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendarGroup-id"+"}", _neturl.PathEscape(parameterToString(r.calendarGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	calendarGroupId string
	calendarId string
	eventId string
}


func (r ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaExecute(r)
}

/*
UsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param calendarGroupId key: id of calendarGroup
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @return ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDelta(ctx _context.Context, userId string, calendarGroupId string, calendarId string, eventId string) ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaRequest {
	return ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		calendarGroupId: calendarGroupId,
		calendarId: calendarId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaExecute(r ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendarGroups/{calendarGroup-id}/calendars/{calendar-id}/calendarView/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendarGroup-id"+"}", _neturl.PathEscape(parameterToString(r.calendarGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	calendarGroupId string
	calendarId string
}


func (r ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaExecute(r)
}

/*
UsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param calendarGroupId key: id of calendarGroup
 @param calendarId key: id of calendar
 @return ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsDelta(ctx _context.Context, userId string, calendarGroupId string, calendarId string) ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaRequest {
	return ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		calendarGroupId: calendarGroupId,
		calendarId: calendarId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaExecute(r ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendarGroups/{calendarGroup-id}/calendars/{calendar-id}/events/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendarGroup-id"+"}", _neturl.PathEscape(parameterToString(r.calendarGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	calendarGroupId string
	calendarId string
	eventId string
	user string
}


func (r ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
UsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param calendarGroupId key: id of calendarGroup
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, userId string, calendarGroupId string, calendarId string, eventId string, user string) ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		calendarGroupId: calendarGroupId,
		calendarId: calendarId,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *UsersFunctionsApiService) UsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesExecute(r ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendarGroups/{calendarGroup-id}/calendars/{calendar-id}/events/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendarGroup-id"+"}", _neturl.PathEscape(parameterToString(r.calendarGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	calendarGroupId string
	calendarId string
	eventId string
}


func (r ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaExecute(r)
}

/*
UsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param calendarGroupId key: id of calendarGroup
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @return ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDelta(ctx _context.Context, userId string, calendarGroupId string, calendarId string, eventId string) ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaRequest {
	return ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		calendarGroupId: calendarGroupId,
		calendarId: calendarId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaExecute(r ApiUsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendarGroups/{calendarGroup-id}/calendars/{calendar-id}/events/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendarGroup-id"+"}", _neturl.PathEscape(parameterToString(r.calendarGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarViewDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
}


func (r ApiUsersUserCalendarViewDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarViewDeltaExecute(r)
}

/*
UsersUserCalendarViewDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUserCalendarViewDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarViewDelta(ctx _context.Context, userId string) ApiUsersUserCalendarViewDeltaRequest {
	return ApiUsersUserCalendarViewDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarViewDeltaExecute(r ApiUsersUserCalendarViewDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarViewDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendarView/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarViewEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	eventId string
	user string
}


func (r ApiUsersUserCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
UsersUserCalendarViewEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiUsersUserCalendarViewEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarViewEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, userId string, eventId string, user string) ApiUsersUserCalendarViewEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiUsersUserCalendarViewEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *UsersFunctionsApiService) UsersUserCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r ApiUsersUserCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarViewEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendarView/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarViewEventCalendarCalendarViewDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	eventId string
}


func (r ApiUsersUserCalendarViewEventCalendarCalendarViewDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarViewEventCalendarCalendarViewDeltaExecute(r)
}

/*
UsersUserCalendarViewEventCalendarCalendarViewDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param eventId key: id of event
 @return ApiUsersUserCalendarViewEventCalendarCalendarViewDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarViewEventCalendarCalendarViewDelta(ctx _context.Context, userId string, eventId string) ApiUsersUserCalendarViewEventCalendarCalendarViewDeltaRequest {
	return ApiUsersUserCalendarViewEventCalendarCalendarViewDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarViewEventCalendarCalendarViewDeltaExecute(r ApiUsersUserCalendarViewEventCalendarCalendarViewDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarViewEventCalendarCalendarViewDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendarView/{event-id}/calendar/calendarView/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarViewEventCalendarEventsDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	eventId string
}


func (r ApiUsersUserCalendarViewEventCalendarEventsDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarViewEventCalendarEventsDeltaExecute(r)
}

/*
UsersUserCalendarViewEventCalendarEventsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param eventId key: id of event
 @return ApiUsersUserCalendarViewEventCalendarEventsDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarViewEventCalendarEventsDelta(ctx _context.Context, userId string, eventId string) ApiUsersUserCalendarViewEventCalendarEventsDeltaRequest {
	return ApiUsersUserCalendarViewEventCalendarEventsDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarViewEventCalendarEventsDeltaExecute(r ApiUsersUserCalendarViewEventCalendarEventsDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarViewEventCalendarEventsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendarView/{event-id}/calendar/events/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarViewEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	eventId string
}


func (r ApiUsersUserCalendarViewEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarViewEventInstancesDeltaExecute(r)
}

/*
UsersUserCalendarViewEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param eventId key: id of event
 @return ApiUsersUserCalendarViewEventInstancesDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarViewEventInstancesDelta(ctx _context.Context, userId string, eventId string) ApiUsersUserCalendarViewEventInstancesDeltaRequest {
	return ApiUsersUserCalendarViewEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarViewEventInstancesDeltaExecute(r ApiUsersUserCalendarViewEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarViewEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendarView/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarsCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	calendarId string
	user string
}


func (r ApiUsersUserCalendarsCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarsCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
UsersUserCalendarsCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param calendarId key: id of calendar
 @param user Usage: User={User}
 @return ApiUsersUserCalendarsCalendarAllowedCalendarSharingRolesRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarsCalendarAllowedCalendarSharingRoles(ctx _context.Context, userId string, calendarId string, user string) ApiUsersUserCalendarsCalendarAllowedCalendarSharingRolesRequest {
	return ApiUsersUserCalendarsCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		calendarId: calendarId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *UsersFunctionsApiService) UsersUserCalendarsCalendarAllowedCalendarSharingRolesExecute(r ApiUsersUserCalendarsCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarsCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendars/{calendar-id}/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarsCalendarCalendarViewDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	calendarId string
}


func (r ApiUsersUserCalendarsCalendarCalendarViewDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarsCalendarCalendarViewDeltaExecute(r)
}

/*
UsersUserCalendarsCalendarCalendarViewDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param calendarId key: id of calendar
 @return ApiUsersUserCalendarsCalendarCalendarViewDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarsCalendarCalendarViewDelta(ctx _context.Context, userId string, calendarId string) ApiUsersUserCalendarsCalendarCalendarViewDeltaRequest {
	return ApiUsersUserCalendarsCalendarCalendarViewDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		calendarId: calendarId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarsCalendarCalendarViewDeltaExecute(r ApiUsersUserCalendarsCalendarCalendarViewDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarsCalendarCalendarViewDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendars/{calendar-id}/calendarView/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	calendarId string
	eventId string
	user string
}


func (r ApiUsersUserCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
UsersUserCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiUsersUserCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, userId string, calendarId string, eventId string, user string) ApiUsersUserCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiUsersUserCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		calendarId: calendarId,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *UsersFunctionsApiService) UsersUserCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r ApiUsersUserCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendars/{calendar-id}/calendarView/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarsCalendarCalendarViewEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	calendarId string
	eventId string
}


func (r ApiUsersUserCalendarsCalendarCalendarViewEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarsCalendarCalendarViewEventInstancesDeltaExecute(r)
}

/*
UsersUserCalendarsCalendarCalendarViewEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @return ApiUsersUserCalendarsCalendarCalendarViewEventInstancesDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarsCalendarCalendarViewEventInstancesDelta(ctx _context.Context, userId string, calendarId string, eventId string) ApiUsersUserCalendarsCalendarCalendarViewEventInstancesDeltaRequest {
	return ApiUsersUserCalendarsCalendarCalendarViewEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		calendarId: calendarId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarsCalendarCalendarViewEventInstancesDeltaExecute(r ApiUsersUserCalendarsCalendarCalendarViewEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarsCalendarCalendarViewEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendars/{calendar-id}/calendarView/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarsCalendarEventsDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	calendarId string
}


func (r ApiUsersUserCalendarsCalendarEventsDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarsCalendarEventsDeltaExecute(r)
}

/*
UsersUserCalendarsCalendarEventsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param calendarId key: id of calendar
 @return ApiUsersUserCalendarsCalendarEventsDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarsCalendarEventsDelta(ctx _context.Context, userId string, calendarId string) ApiUsersUserCalendarsCalendarEventsDeltaRequest {
	return ApiUsersUserCalendarsCalendarEventsDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		calendarId: calendarId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarsCalendarEventsDeltaExecute(r ApiUsersUserCalendarsCalendarEventsDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarsCalendarEventsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendars/{calendar-id}/events/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	calendarId string
	eventId string
	user string
}


func (r ApiUsersUserCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
UsersUserCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiUsersUserCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, userId string, calendarId string, eventId string, user string) ApiUsersUserCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiUsersUserCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		calendarId: calendarId,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *UsersFunctionsApiService) UsersUserCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesExecute(r ApiUsersUserCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendars/{calendar-id}/events/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserCalendarsCalendarEventsEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	calendarId string
	eventId string
}


func (r ApiUsersUserCalendarsCalendarEventsEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserCalendarsCalendarEventsEventInstancesDeltaExecute(r)
}

/*
UsersUserCalendarsCalendarEventsEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @return ApiUsersUserCalendarsCalendarEventsEventInstancesDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserCalendarsCalendarEventsEventInstancesDelta(ctx _context.Context, userId string, calendarId string, eventId string) ApiUsersUserCalendarsCalendarEventsEventInstancesDeltaRequest {
	return ApiUsersUserCalendarsCalendarEventsEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		calendarId: calendarId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserCalendarsCalendarEventsEventInstancesDeltaExecute(r ApiUsersUserCalendarsCalendarEventsEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserCalendarsCalendarEventsEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/calendars/{calendar-id}/events/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserContactFoldersContactFolderChildFoldersDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	contactFolderId string
}


func (r ApiUsersUserContactFoldersContactFolderChildFoldersDeltaRequest) Execute() ([]MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	return r.ApiService.UsersUserContactFoldersContactFolderChildFoldersDeltaExecute(r)
}

/*
UsersUserContactFoldersContactFolderChildFoldersDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param contactFolderId key: id of contactFolder
 @return ApiUsersUserContactFoldersContactFolderChildFoldersDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserContactFoldersContactFolderChildFoldersDelta(ctx _context.Context, userId string, contactFolderId string) ApiUsersUserContactFoldersContactFolderChildFoldersDeltaRequest {
	return ApiUsersUserContactFoldersContactFolderChildFoldersDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		contactFolderId: contactFolderId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphContactFolder
func (a *UsersFunctionsApiService) UsersUserContactFoldersContactFolderChildFoldersDeltaExecute(r ApiUsersUserContactFoldersContactFolderChildFoldersDeltaRequest) ([]MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphContactFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserContactFoldersContactFolderChildFoldersDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/contactFolders/{contactFolder-id}/childFolders/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserContactFoldersContactFolderContactsDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	contactFolderId string
}


func (r ApiUsersUserContactFoldersContactFolderContactsDeltaRequest) Execute() ([]MicrosoftGraphContact, *_nethttp.Response, error) {
	return r.ApiService.UsersUserContactFoldersContactFolderContactsDeltaExecute(r)
}

/*
UsersUserContactFoldersContactFolderContactsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param contactFolderId key: id of contactFolder
 @return ApiUsersUserContactFoldersContactFolderContactsDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserContactFoldersContactFolderContactsDelta(ctx _context.Context, userId string, contactFolderId string) ApiUsersUserContactFoldersContactFolderContactsDeltaRequest {
	return ApiUsersUserContactFoldersContactFolderContactsDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		contactFolderId: contactFolderId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphContact
func (a *UsersFunctionsApiService) UsersUserContactFoldersContactFolderContactsDeltaExecute(r ApiUsersUserContactFoldersContactFolderContactsDeltaRequest) ([]MicrosoftGraphContact, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserContactFoldersContactFolderContactsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/contactFolders/{contactFolder-id}/contacts/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserContactFoldersDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
}


func (r ApiUsersUserContactFoldersDeltaRequest) Execute() ([]MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	return r.ApiService.UsersUserContactFoldersDeltaExecute(r)
}

/*
UsersUserContactFoldersDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUserContactFoldersDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserContactFoldersDelta(ctx _context.Context, userId string) ApiUsersUserContactFoldersDeltaRequest {
	return ApiUsersUserContactFoldersDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphContactFolder
func (a *UsersFunctionsApiService) UsersUserContactFoldersDeltaExecute(r ApiUsersUserContactFoldersDeltaRequest) ([]MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphContactFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserContactFoldersDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/contactFolders/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserContactsDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
}


func (r ApiUsersUserContactsDeltaRequest) Execute() ([]MicrosoftGraphContact, *_nethttp.Response, error) {
	return r.ApiService.UsersUserContactsDeltaExecute(r)
}

/*
UsersUserContactsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUserContactsDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserContactsDelta(ctx _context.Context, userId string) ApiUsersUserContactsDeltaRequest {
	return ApiUsersUserContactsDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphContact
func (a *UsersFunctionsApiService) UsersUserContactsDeltaExecute(r ApiUsersUserContactsDeltaRequest) ([]MicrosoftGraphContact, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserContactsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/contacts/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserEventsDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
}


func (r ApiUsersUserEventsDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserEventsDeltaExecute(r)
}

/*
UsersUserEventsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUserEventsDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserEventsDelta(ctx _context.Context, userId string) ApiUsersUserEventsDeltaRequest {
	return ApiUsersUserEventsDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserEventsDeltaExecute(r ApiUsersUserEventsDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserEventsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/events/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserEventsEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	eventId string
	user string
}


func (r ApiUsersUserEventsEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.UsersUserEventsEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
UsersUserEventsEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiUsersUserEventsEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *UsersFunctionsApiService) UsersUserEventsEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, userId string, eventId string, user string) ApiUsersUserEventsEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiUsersUserEventsEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *UsersFunctionsApiService) UsersUserEventsEventCalendarAllowedCalendarSharingRolesExecute(r ApiUsersUserEventsEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserEventsEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/events/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserEventsEventCalendarCalendarViewDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	eventId string
}


func (r ApiUsersUserEventsEventCalendarCalendarViewDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserEventsEventCalendarCalendarViewDeltaExecute(r)
}

/*
UsersUserEventsEventCalendarCalendarViewDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param eventId key: id of event
 @return ApiUsersUserEventsEventCalendarCalendarViewDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserEventsEventCalendarCalendarViewDelta(ctx _context.Context, userId string, eventId string) ApiUsersUserEventsEventCalendarCalendarViewDeltaRequest {
	return ApiUsersUserEventsEventCalendarCalendarViewDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserEventsEventCalendarCalendarViewDeltaExecute(r ApiUsersUserEventsEventCalendarCalendarViewDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserEventsEventCalendarCalendarViewDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/events/{event-id}/calendar/calendarView/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserEventsEventCalendarEventsDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	eventId string
}


func (r ApiUsersUserEventsEventCalendarEventsDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserEventsEventCalendarEventsDeltaExecute(r)
}

/*
UsersUserEventsEventCalendarEventsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param eventId key: id of event
 @return ApiUsersUserEventsEventCalendarEventsDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserEventsEventCalendarEventsDelta(ctx _context.Context, userId string, eventId string) ApiUsersUserEventsEventCalendarEventsDeltaRequest {
	return ApiUsersUserEventsEventCalendarEventsDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserEventsEventCalendarEventsDeltaExecute(r ApiUsersUserEventsEventCalendarEventsDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserEventsEventCalendarEventsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/events/{event-id}/calendar/events/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserEventsEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	eventId string
}


func (r ApiUsersUserEventsEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.UsersUserEventsEventInstancesDeltaExecute(r)
}

/*
UsersUserEventsEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param eventId key: id of event
 @return ApiUsersUserEventsEventInstancesDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserEventsEventInstancesDelta(ctx _context.Context, userId string, eventId string) ApiUsersUserEventsEventInstancesDeltaRequest {
	return ApiUsersUserEventsEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *UsersFunctionsApiService) UsersUserEventsEventInstancesDeltaExecute(r ApiUsersUserEventsEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserEventsEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/events/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserGetManagedAppDiagnosticStatusesRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
}


func (r ApiUsersUserGetManagedAppDiagnosticStatusesRequest) Execute() ([]*AnyOfmicrosoftGraphManagedAppDiagnosticStatus, *_nethttp.Response, error) {
	return r.ApiService.UsersUserGetManagedAppDiagnosticStatusesExecute(r)
}

/*
UsersUserGetManagedAppDiagnosticStatuses Invoke function getManagedAppDiagnosticStatuses

Gets diagnostics validation status for a given user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUserGetManagedAppDiagnosticStatusesRequest
*/
func (a *UsersFunctionsApiService) UsersUserGetManagedAppDiagnosticStatuses(ctx _context.Context, userId string) ApiUsersUserGetManagedAppDiagnosticStatusesRequest {
	return ApiUsersUserGetManagedAppDiagnosticStatusesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphManagedAppDiagnosticStatus
func (a *UsersFunctionsApiService) UsersUserGetManagedAppDiagnosticStatusesExecute(r ApiUsersUserGetManagedAppDiagnosticStatusesRequest) ([]*AnyOfmicrosoftGraphManagedAppDiagnosticStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphManagedAppDiagnosticStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserGetManagedAppDiagnosticStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/microsoft.graph.getManagedAppDiagnosticStatuses()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserGetManagedAppPoliciesRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
}


func (r ApiUsersUserGetManagedAppPoliciesRequest) Execute() ([]*AnyOfmicrosoftGraphManagedAppPolicy, *_nethttp.Response, error) {
	return r.ApiService.UsersUserGetManagedAppPoliciesExecute(r)
}

/*
UsersUserGetManagedAppPolicies Invoke function getManagedAppPolicies

Gets app restrictions for a given user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUserGetManagedAppPoliciesRequest
*/
func (a *UsersFunctionsApiService) UsersUserGetManagedAppPolicies(ctx _context.Context, userId string) ApiUsersUserGetManagedAppPoliciesRequest {
	return ApiUsersUserGetManagedAppPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphManagedAppPolicy
func (a *UsersFunctionsApiService) UsersUserGetManagedAppPoliciesExecute(r ApiUsersUserGetManagedAppPoliciesRequest) ([]*AnyOfmicrosoftGraphManagedAppPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphManagedAppPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserGetManagedAppPolicies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/microsoft.graph.getManagedAppPolicies()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	anotherRange string
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRect Invoke function boundingRect

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRect(ctx _context.Context, userId string, sharedInsightId string, anotherRange string) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRect")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.boundingRect(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	row int32
	column int32
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCell(ctx _context.Context, userId string, sharedInsightId string, row int32, column int32) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	column int32
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumn Invoke function column

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param column Usage: column={column}
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumn(ctx _context.Context, userId string, sharedInsightId string, column int32) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.column(column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18 Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Request {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.columnsAfter()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	count int32
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2a Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2a(ctx _context.Context, userId string, sharedInsightId string, count int32) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.columnsAfter(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	count int32
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bca Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bca(ctx _context.Context, userId string, sharedInsightId string, count int32) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bca")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.columnsBefore(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4 Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Request {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.columnsBefore()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumn Invoke function entireColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumn(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.entireColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRow Invoke function entireRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRow(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.entireRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	anotherRange string
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersection Invoke function intersection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersection(ctx _context.Context, userId string, sharedInsightId string, anotherRange string) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.intersection(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCell Invoke function lastCell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCell(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.lastCell()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumn Invoke function lastColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumn(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.lastColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRow Invoke function lastRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRow(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.lastRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	rowOffset int32
	columnOffset int32
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRange Invoke function offsetRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param rowOffset Usage: rowOffset={rowOffset}
 @param columnOffset Usage: columnOffset={columnOffset}
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRange(ctx _context.Context, userId string, sharedInsightId string, rowOffset int32, columnOffset int32) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		rowOffset: rowOffset,
		columnOffset: columnOffset,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.offsetRange(rowOffset={rowOffset},columnOffset={columnOffset})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rowOffset"+"}", _neturl.PathEscape(parameterToString(r.rowOffset, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"columnOffset"+"}", _neturl.PathEscape(parameterToString(r.columnOffset, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.rowOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("rowOffset must be greater than -2147483648")
	}
	if r.rowOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("rowOffset must be less than 2147483647")
	}
	if r.columnOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("columnOffset must be greater than -2147483648")
	}
	if r.columnOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("columnOffset must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	deltaRows int32
	deltaColumns int32
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRange Invoke function resizedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param deltaRows Usage: deltaRows={deltaRows}
 @param deltaColumns Usage: deltaColumns={deltaColumns}
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRange(ctx _context.Context, userId string, sharedInsightId string, deltaRows int32, deltaColumns int32) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		deltaRows: deltaRows,
		deltaColumns: deltaColumns,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.resizedRange(deltaRows={deltaRows},deltaColumns={deltaColumns})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaRows"+"}", _neturl.PathEscape(parameterToString(r.deltaRows, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaColumns"+"}", _neturl.PathEscape(parameterToString(r.deltaColumns, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.deltaRows < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaRows must be greater than -2147483648")
	}
	if r.deltaRows > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaRows must be less than 2147483647")
	}
	if r.deltaColumns < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaColumns must be greater than -2147483648")
	}
	if r.deltaColumns > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaColumns must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	row int32
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRow Invoke function row

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param row Usage: row={row}
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRow(ctx _context.Context, userId string, sharedInsightId string, row int32) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		row: row,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.row(row={row})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	count int32
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251e Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251e(ctx _context.Context, userId string, sharedInsightId string, count int32) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251e")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.rowsAbove(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1 Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Request {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.rowsAbove()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3c Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3c(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.rowsBelow()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	count int32
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11 Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11(ctx _context.Context, userId string, sharedInsightId string, count int32) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Request {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.rowsBelow(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	valuesOnly bool
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206d(ctx _context.Context, userId string, sharedInsightId string, valuesOnly bool) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2c(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRange(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRangeView/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewRequest) Execute() (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleView Invoke function visibleView

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleView(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewRequest {
	return ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRangeView
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewExecute(r ApiUsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewRequest) (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRangeView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleView")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.visibleView()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	anotherRange string
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRect Invoke function boundingRect

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRect(ctx _context.Context, userId string, sharedInsightId string, anotherRange string) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRect")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.boundingRect(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	row int32
	column int32
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCell(ctx _context.Context, userId string, sharedInsightId string, row int32, column int32) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	column int32
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumn Invoke function column

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param column Usage: column={column}
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumn(ctx _context.Context, userId string, sharedInsightId string, column int32) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.column(column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18 Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsAfter()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	count int32
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a(ctx _context.Context, userId string, sharedInsightId string, count int32) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsAfter(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	count int32
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca(ctx _context.Context, userId string, sharedInsightId string, count int32) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsBefore(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4 Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsBefore()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumn Invoke function entireColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumn(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.entireColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRow Invoke function entireRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRow(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.entireRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	anotherRange string
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersection Invoke function intersection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersection(ctx _context.Context, userId string, sharedInsightId string, anotherRange string) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.intersection(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCell Invoke function lastCell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCell(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastCell()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumn Invoke function lastColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumn(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRow Invoke function lastRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRow(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	rowOffset int32
	columnOffset int32
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRange Invoke function offsetRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param rowOffset Usage: rowOffset={rowOffset}
 @param columnOffset Usage: columnOffset={columnOffset}
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRange(ctx _context.Context, userId string, sharedInsightId string, rowOffset int32, columnOffset int32) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		rowOffset: rowOffset,
		columnOffset: columnOffset,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.offsetRange(rowOffset={rowOffset},columnOffset={columnOffset})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rowOffset"+"}", _neturl.PathEscape(parameterToString(r.rowOffset, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"columnOffset"+"}", _neturl.PathEscape(parameterToString(r.columnOffset, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.rowOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("rowOffset must be greater than -2147483648")
	}
	if r.rowOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("rowOffset must be less than 2147483647")
	}
	if r.columnOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("columnOffset must be greater than -2147483648")
	}
	if r.columnOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("columnOffset must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	deltaRows int32
	deltaColumns int32
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRange Invoke function resizedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param deltaRows Usage: deltaRows={deltaRows}
 @param deltaColumns Usage: deltaColumns={deltaColumns}
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRange(ctx _context.Context, userId string, sharedInsightId string, deltaRows int32, deltaColumns int32) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		deltaRows: deltaRows,
		deltaColumns: deltaColumns,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.resizedRange(deltaRows={deltaRows},deltaColumns={deltaColumns})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaRows"+"}", _neturl.PathEscape(parameterToString(r.deltaRows, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaColumns"+"}", _neturl.PathEscape(parameterToString(r.deltaColumns, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.deltaRows < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaRows must be greater than -2147483648")
	}
	if r.deltaRows > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaRows must be less than 2147483647")
	}
	if r.deltaColumns < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaColumns must be greater than -2147483648")
	}
	if r.deltaColumns > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaColumns must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	row int32
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRow Invoke function row

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param row Usage: row={row}
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRow(ctx _context.Context, userId string, sharedInsightId string, row int32) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		row: row,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.row(row={row})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	count int32
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251e Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251e(ctx _context.Context, userId string, sharedInsightId string, count int32) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251e")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsAbove(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1 Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsAbove()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsBelow()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	count int32
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11 Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11(ctx _context.Context, userId string, sharedInsightId string, count int32) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsBelow(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
	valuesOnly bool
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206d(ctx _context.Context, userId string, sharedInsightId string, valuesOnly bool) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRange(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRangeView/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sharedInsightId string
}


func (r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest) Execute() (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewExecute(r)
}

/*
UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleView Invoke function visibleView

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sharedInsightId key: id of sharedInsight
 @return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleView(ctx _context.Context, userId string, sharedInsightId string) ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest {
	return ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRangeView
func (a *UsersFunctionsApiService) UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewExecute(r ApiUsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest) (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRangeView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleView")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.visibleView()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
	anotherRange string
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRect Invoke function boundingRect

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRect(ctx _context.Context, userId string, trendingId string, anotherRange string) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRect")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.boundingRect(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
	row int32
	column int32
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCell(ctx _context.Context, userId string, trendingId string, row int32, column int32) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
	column int32
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumn Invoke function column

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @param column Usage: column={column}
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumn(ctx _context.Context, userId string, trendingId string, column int32) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.column(column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18 Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18(ctx _context.Context, userId string, trendingId string) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsAfter()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
	count int32
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @param count Usage: count={count}
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a(ctx _context.Context, userId string, trendingId string, count int32) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsAfter(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
	count int32
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @param count Usage: count={count}
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca(ctx _context.Context, userId string, trendingId string, count int32) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsBefore(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4 Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4(ctx _context.Context, userId string, trendingId string) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsBefore()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumn Invoke function entireColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumn(ctx _context.Context, userId string, trendingId string) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.entireColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRow Invoke function entireRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRow(ctx _context.Context, userId string, trendingId string) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.entireRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
	anotherRange string
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersection Invoke function intersection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersection(ctx _context.Context, userId string, trendingId string, anotherRange string) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.intersection(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCell Invoke function lastCell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCell(ctx _context.Context, userId string, trendingId string) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastCell()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumn Invoke function lastColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumn(ctx _context.Context, userId string, trendingId string) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRow Invoke function lastRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRow(ctx _context.Context, userId string, trendingId string) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
	rowOffset int32
	columnOffset int32
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRange Invoke function offsetRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @param rowOffset Usage: rowOffset={rowOffset}
 @param columnOffset Usage: columnOffset={columnOffset}
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRange(ctx _context.Context, userId string, trendingId string, rowOffset int32, columnOffset int32) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
		rowOffset: rowOffset,
		columnOffset: columnOffset,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.offsetRange(rowOffset={rowOffset},columnOffset={columnOffset})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rowOffset"+"}", _neturl.PathEscape(parameterToString(r.rowOffset, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"columnOffset"+"}", _neturl.PathEscape(parameterToString(r.columnOffset, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.rowOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("rowOffset must be greater than -2147483648")
	}
	if r.rowOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("rowOffset must be less than 2147483647")
	}
	if r.columnOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("columnOffset must be greater than -2147483648")
	}
	if r.columnOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("columnOffset must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
	deltaRows int32
	deltaColumns int32
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRange Invoke function resizedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @param deltaRows Usage: deltaRows={deltaRows}
 @param deltaColumns Usage: deltaColumns={deltaColumns}
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRange(ctx _context.Context, userId string, trendingId string, deltaRows int32, deltaColumns int32) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
		deltaRows: deltaRows,
		deltaColumns: deltaColumns,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.resizedRange(deltaRows={deltaRows},deltaColumns={deltaColumns})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaRows"+"}", _neturl.PathEscape(parameterToString(r.deltaRows, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaColumns"+"}", _neturl.PathEscape(parameterToString(r.deltaColumns, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.deltaRows < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaRows must be greater than -2147483648")
	}
	if r.deltaRows > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaRows must be less than 2147483647")
	}
	if r.deltaColumns < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaColumns must be greater than -2147483648")
	}
	if r.deltaColumns > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaColumns must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
	row int32
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRow Invoke function row

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @param row Usage: row={row}
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRow(ctx _context.Context, userId string, trendingId string, row int32) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
		row: row,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.row(row={row})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
	count int32
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251e Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @param count Usage: count={count}
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251e(ctx _context.Context, userId string, trendingId string, count int32) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251e")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsAbove(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1 Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1(ctx _context.Context, userId string, trendingId string) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsAbove()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c(ctx _context.Context, userId string, trendingId string) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsBelow()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
	count int32
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11 Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @param count Usage: count={count}
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11(ctx _context.Context, userId string, trendingId string, count int32) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsBelow(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
	valuesOnly bool
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206d(ctx _context.Context, userId string, trendingId string, valuesOnly bool) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c(ctx _context.Context, userId string, trendingId string) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRange(ctx _context.Context, userId string, trendingId string) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRangeView/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	trendingId string
}


func (r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewRequest) Execute() (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewExecute(r)
}

/*
UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleView Invoke function visibleView

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param trendingId key: id of trending
 @return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleView(ctx _context.Context, userId string, trendingId string) ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewRequest {
	return ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRangeView
func (a *UsersFunctionsApiService) UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewExecute(r ApiUsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewRequest) (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRangeView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleView")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.visibleView()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
	anotherRange string
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRect Invoke function boundingRect

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRect(ctx _context.Context, userId string, usedInsightId string, anotherRange string) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRect")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.boundingRect(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
	row int32
	column int32
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCell(ctx _context.Context, userId string, usedInsightId string, row int32, column int32) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
	column int32
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumn Invoke function column

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @param column Usage: column={column}
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumn(ctx _context.Context, userId string, usedInsightId string, column int32) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.column(column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18 Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18(ctx _context.Context, userId string, usedInsightId string) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsAfter()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
	count int32
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @param count Usage: count={count}
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a(ctx _context.Context, userId string, usedInsightId string, count int32) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsAfter(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
	count int32
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @param count Usage: count={count}
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca(ctx _context.Context, userId string, usedInsightId string, count int32) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsBefore(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4 Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4(ctx _context.Context, userId string, usedInsightId string) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsBefore()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumn Invoke function entireColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumn(ctx _context.Context, userId string, usedInsightId string) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.entireColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRow Invoke function entireRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRow(ctx _context.Context, userId string, usedInsightId string) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.entireRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
	anotherRange string
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersection Invoke function intersection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersection(ctx _context.Context, userId string, usedInsightId string, anotherRange string) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.intersection(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCell Invoke function lastCell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCell(ctx _context.Context, userId string, usedInsightId string) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastCell()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumn Invoke function lastColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumn(ctx _context.Context, userId string, usedInsightId string) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRow Invoke function lastRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRow(ctx _context.Context, userId string, usedInsightId string) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
	rowOffset int32
	columnOffset int32
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRange Invoke function offsetRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @param rowOffset Usage: rowOffset={rowOffset}
 @param columnOffset Usage: columnOffset={columnOffset}
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRange(ctx _context.Context, userId string, usedInsightId string, rowOffset int32, columnOffset int32) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
		rowOffset: rowOffset,
		columnOffset: columnOffset,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.offsetRange(rowOffset={rowOffset},columnOffset={columnOffset})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rowOffset"+"}", _neturl.PathEscape(parameterToString(r.rowOffset, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"columnOffset"+"}", _neturl.PathEscape(parameterToString(r.columnOffset, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.rowOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("rowOffset must be greater than -2147483648")
	}
	if r.rowOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("rowOffset must be less than 2147483647")
	}
	if r.columnOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("columnOffset must be greater than -2147483648")
	}
	if r.columnOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("columnOffset must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
	deltaRows int32
	deltaColumns int32
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRange Invoke function resizedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @param deltaRows Usage: deltaRows={deltaRows}
 @param deltaColumns Usage: deltaColumns={deltaColumns}
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRange(ctx _context.Context, userId string, usedInsightId string, deltaRows int32, deltaColumns int32) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
		deltaRows: deltaRows,
		deltaColumns: deltaColumns,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.resizedRange(deltaRows={deltaRows},deltaColumns={deltaColumns})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaRows"+"}", _neturl.PathEscape(parameterToString(r.deltaRows, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaColumns"+"}", _neturl.PathEscape(parameterToString(r.deltaColumns, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.deltaRows < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaRows must be greater than -2147483648")
	}
	if r.deltaRows > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaRows must be less than 2147483647")
	}
	if r.deltaColumns < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaColumns must be greater than -2147483648")
	}
	if r.deltaColumns > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaColumns must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
	row int32
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRow Invoke function row

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @param row Usage: row={row}
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRow(ctx _context.Context, userId string, usedInsightId string, row int32) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
		row: row,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.row(row={row})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
	count int32
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251e Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @param count Usage: count={count}
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251e(ctx _context.Context, userId string, usedInsightId string, count int32) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251e")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsAbove(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1 Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1(ctx _context.Context, userId string, usedInsightId string) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsAbove()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c(ctx _context.Context, userId string, usedInsightId string) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsBelow()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
	count int32
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11 Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @param count Usage: count={count}
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11(ctx _context.Context, userId string, usedInsightId string, count int32) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsBelow(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
	valuesOnly bool
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206d(ctx _context.Context, userId string, usedInsightId string, valuesOnly bool) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c(ctx _context.Context, userId string, usedInsightId string) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRange(ctx _context.Context, userId string, usedInsightId string) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRangeView/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	usedInsightId string
}


func (r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest) Execute() (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	return r.ApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewExecute(r)
}

/*
UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleView Invoke function visibleView

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param usedInsightId key: id of usedInsight
 @return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest
*/
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleView(ctx _context.Context, userId string, usedInsightId string) ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest {
	return ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRangeView
func (a *UsersFunctionsApiService) UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewExecute(r ApiUsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest) (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRangeView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleView")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.visibleView()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserMailFoldersDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
}


func (r ApiUsersUserMailFoldersDeltaRequest) Execute() ([]MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	return r.ApiService.UsersUserMailFoldersDeltaExecute(r)
}

/*
UsersUserMailFoldersDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUserMailFoldersDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserMailFoldersDelta(ctx _context.Context, userId string) ApiUsersUserMailFoldersDeltaRequest {
	return ApiUsersUserMailFoldersDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphMailFolder
func (a *UsersFunctionsApiService) UsersUserMailFoldersDeltaExecute(r ApiUsersUserMailFoldersDeltaRequest) ([]MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphMailFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserMailFoldersDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserMailFoldersMailFolderChildFoldersDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	mailFolderId string
}


func (r ApiUsersUserMailFoldersMailFolderChildFoldersDeltaRequest) Execute() ([]MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	return r.ApiService.UsersUserMailFoldersMailFolderChildFoldersDeltaExecute(r)
}

/*
UsersUserMailFoldersMailFolderChildFoldersDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @return ApiUsersUserMailFoldersMailFolderChildFoldersDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserMailFoldersMailFolderChildFoldersDelta(ctx _context.Context, userId string, mailFolderId string) ApiUsersUserMailFoldersMailFolderChildFoldersDeltaRequest {
	return ApiUsersUserMailFoldersMailFolderChildFoldersDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphMailFolder
func (a *UsersFunctionsApiService) UsersUserMailFoldersMailFolderChildFoldersDeltaExecute(r ApiUsersUserMailFoldersMailFolderChildFoldersDeltaRequest) ([]MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphMailFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserMailFoldersMailFolderChildFoldersDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/childFolders/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserMailFoldersMailFolderMessagesDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	mailFolderId string
}


func (r ApiUsersUserMailFoldersMailFolderMessagesDeltaRequest) Execute() ([]MicrosoftGraphMessage, *_nethttp.Response, error) {
	return r.ApiService.UsersUserMailFoldersMailFolderMessagesDeltaExecute(r)
}

/*
UsersUserMailFoldersMailFolderMessagesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @return ApiUsersUserMailFoldersMailFolderMessagesDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserMailFoldersMailFolderMessagesDelta(ctx _context.Context, userId string, mailFolderId string) ApiUsersUserMailFoldersMailFolderMessagesDeltaRequest {
	return ApiUsersUserMailFoldersMailFolderMessagesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphMessage
func (a *UsersFunctionsApiService) UsersUserMailFoldersMailFolderMessagesDeltaExecute(r ApiUsersUserMailFoldersMailFolderMessagesDeltaRequest) ([]MicrosoftGraphMessage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserMailFoldersMailFolderMessagesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
}


func (r ApiUsersUserManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationRequest) Execute() ([]*string, *_nethttp.Response, error) {
	return r.ApiService.UsersUserManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationExecute(r)
}

/*
UsersUserManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistration Invoke function getUserIdsWithFlaggedAppRegistration

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUserManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationRequest
*/
func (a *UsersFunctionsApiService) UsersUserManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistration(ctx _context.Context, userId string) ApiUsersUserManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationRequest {
	return ApiUsersUserManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []*string
func (a *UsersFunctionsApiService) UsersUserManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationExecute(r ApiUsersUserManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationRequest) ([]*string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistration")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedAppRegistrations/microsoft.graph.getUserIdsWithFlaggedAppRegistration()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserMessagesDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
}


func (r ApiUsersUserMessagesDeltaRequest) Execute() ([]MicrosoftGraphMessage, *_nethttp.Response, error) {
	return r.ApiService.UsersUserMessagesDeltaExecute(r)
}

/*
UsersUserMessagesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUserMessagesDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserMessagesDelta(ctx _context.Context, userId string) ApiUsersUserMessagesDeltaRequest {
	return ApiUsersUserMessagesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphMessage
func (a *UsersFunctionsApiService) UsersUserMessagesDeltaExecute(r ApiUsersUserMessagesDeltaRequest) ([]MicrosoftGraphMessage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserMessagesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/messages/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserOnenoteNotebooksGetRecentNotebooksRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	includePersonalNotebooks bool
}


func (r ApiUsersUserOnenoteNotebooksGetRecentNotebooksRequest) Execute() ([]*AnyOfmicrosoftGraphRecentNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersUserOnenoteNotebooksGetRecentNotebooksExecute(r)
}

/*
UsersUserOnenoteNotebooksGetRecentNotebooks Invoke function getRecentNotebooks

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param includePersonalNotebooks Usage: includePersonalNotebooks={includePersonalNotebooks}
 @return ApiUsersUserOnenoteNotebooksGetRecentNotebooksRequest
*/
func (a *UsersFunctionsApiService) UsersUserOnenoteNotebooksGetRecentNotebooks(ctx _context.Context, userId string, includePersonalNotebooks bool) ApiUsersUserOnenoteNotebooksGetRecentNotebooksRequest {
	return ApiUsersUserOnenoteNotebooksGetRecentNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		includePersonalNotebooks: includePersonalNotebooks,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphRecentNotebook
func (a *UsersFunctionsApiService) UsersUserOnenoteNotebooksGetRecentNotebooksExecute(r ApiUsersUserOnenoteNotebooksGetRecentNotebooksRequest) ([]*AnyOfmicrosoftGraphRecentNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphRecentNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserOnenoteNotebooksGetRecentNotebooks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/microsoft.graph.getRecentNotebooks(includePersonalNotebooks={includePersonalNotebooks})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"includePersonalNotebooks"+"}", _neturl.PathEscape(parameterToString(r.includePersonalNotebooks, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiUsersUserOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.UsersUserOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r)
}

/*
UsersUserOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersUserOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest
*/
func (a *UsersFunctionsApiService) UsersUserOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersUserOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest {
	return ApiUsersUserOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *UsersFunctionsApiService) UsersUserOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r ApiUsersUserOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiUsersUserOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.UsersUserOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r)
}

/*
UsersUserOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersUserOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest
*/
func (a *UsersFunctionsApiService) UsersUserOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreview(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiUsersUserOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest {
	return ApiUsersUserOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *UsersFunctionsApiService) UsersUserOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r ApiUsersUserOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
}


func (r ApiUsersUserOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.UsersUserOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r)
}

/*
UsersUserOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersUserOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest
*/
func (a *UsersFunctionsApiService) UsersUserOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiUsersUserOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest {
	return ApiUsersUserOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *UsersFunctionsApiService) UsersUserOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r ApiUsersUserOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
}


func (r ApiUsersUserOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.UsersUserOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r)
}

/*
UsersUserOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersUserOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest
*/
func (a *UsersFunctionsApiService) UsersUserOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreview(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiUsersUserOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest {
	return ApiUsersUserOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *UsersFunctionsApiService) UsersUserOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r ApiUsersUserOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	onenotePageId string
	onenotePageId1 string
}


func (r ApiUsersUserOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.UsersUserOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewExecute(r)
}

/*
UsersUserOnenotePagesOnenotePageParentSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersUserOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewRequest
*/
func (a *UsersFunctionsApiService) UsersUserOnenotePagesOnenotePageParentSectionPagesOnenotePagePreview(ctx _context.Context, userId string, onenotePageId string, onenotePageId1 string) ApiUsersUserOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewRequest {
	return ApiUsersUserOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *UsersFunctionsApiService) UsersUserOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewExecute(r ApiUsersUserOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserOnenotePagesOnenotePageParentSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserOnenotePagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	onenotePageId string
}


func (r ApiUsersUserOnenotePagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.UsersUserOnenotePagesOnenotePagePreviewExecute(r)
}

/*
UsersUserOnenotePagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersUserOnenotePagesOnenotePagePreviewRequest
*/
func (a *UsersFunctionsApiService) UsersUserOnenotePagesOnenotePagePreview(ctx _context.Context, userId string, onenotePageId string) ApiUsersUserOnenotePagesOnenotePagePreviewRequest {
	return ApiUsersUserOnenotePagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *UsersFunctionsApiService) UsersUserOnenotePagesOnenotePagePreviewExecute(r ApiUsersUserOnenotePagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserOnenotePagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiUsersUserOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.UsersUserOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r)
}

/*
UsersUserOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersUserOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest
*/
func (a *UsersFunctionsApiService) UsersUserOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreview(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersUserOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest {
	return ApiUsersUserOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *UsersFunctionsApiService) UsersUserOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r ApiUsersUserOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiUsersUserOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.UsersUserOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r)
}

/*
UsersUserOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersUserOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest
*/
func (a *UsersFunctionsApiService) UsersUserOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersUserOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest {
	return ApiUsersUserOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *UsersFunctionsApiService) UsersUserOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r ApiUsersUserOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiUsersUserOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.UsersUserOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r)
}

/*
UsersUserOnenoteSectionsOnenoteSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersUserOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewRequest
*/
func (a *UsersFunctionsApiService) UsersUserOnenoteSectionsOnenoteSectionPagesOnenotePagePreview(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersUserOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewRequest {
	return ApiUsersUserOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *UsersFunctionsApiService) UsersUserOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r ApiUsersUserOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserOnenoteSectionsOnenoteSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserOutlookSupportedLanguagesRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
}


func (r ApiUsersUserOutlookSupportedLanguagesRequest) Execute() ([]MicrosoftGraphLocaleInfo, *_nethttp.Response, error) {
	return r.ApiService.UsersUserOutlookSupportedLanguagesExecute(r)
}

/*
UsersUserOutlookSupportedLanguages Invoke function supportedLanguages

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUserOutlookSupportedLanguagesRequest
*/
func (a *UsersFunctionsApiService) UsersUserOutlookSupportedLanguages(ctx _context.Context, userId string) ApiUsersUserOutlookSupportedLanguagesRequest {
	return ApiUsersUserOutlookSupportedLanguagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphLocaleInfo
func (a *UsersFunctionsApiService) UsersUserOutlookSupportedLanguagesExecute(r ApiUsersUserOutlookSupportedLanguagesRequest) ([]MicrosoftGraphLocaleInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphLocaleInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserOutlookSupportedLanguages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/outlook/microsoft.graph.supportedLanguages()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserOutlookSupportedTimeZones51c6Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	timeZoneStandard AnyOfmicrosoftGraphTimeZoneStandard
}


func (r ApiUsersUserOutlookSupportedTimeZones51c6Request) Execute() ([]MicrosoftGraphTimeZoneInformation, *_nethttp.Response, error) {
	return r.ApiService.UsersUserOutlookSupportedTimeZones51c6Execute(r)
}

/*
UsersUserOutlookSupportedTimeZones51c6 Invoke function supportedTimeZones

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param timeZoneStandard Usage: TimeZoneStandard={TimeZoneStandard}
 @return ApiUsersUserOutlookSupportedTimeZones51c6Request
*/
func (a *UsersFunctionsApiService) UsersUserOutlookSupportedTimeZones51c6(ctx _context.Context, userId string, timeZoneStandard AnyOfmicrosoftGraphTimeZoneStandard) ApiUsersUserOutlookSupportedTimeZones51c6Request {
	return ApiUsersUserOutlookSupportedTimeZones51c6Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		timeZoneStandard: timeZoneStandard,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphTimeZoneInformation
func (a *UsersFunctionsApiService) UsersUserOutlookSupportedTimeZones51c6Execute(r ApiUsersUserOutlookSupportedTimeZones51c6Request) ([]MicrosoftGraphTimeZoneInformation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphTimeZoneInformation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserOutlookSupportedTimeZones51c6")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/outlook/microsoft.graph.supportedTimeZones(TimeZoneStandard={TimeZoneStandard})"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"TimeZoneStandard"+"}", _neturl.PathEscape(parameterToString(r.timeZoneStandard, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserOutlookSupportedTimeZonesEe48Request struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
}


func (r ApiUsersUserOutlookSupportedTimeZonesEe48Request) Execute() ([]MicrosoftGraphTimeZoneInformation, *_nethttp.Response, error) {
	return r.ApiService.UsersUserOutlookSupportedTimeZonesEe48Execute(r)
}

/*
UsersUserOutlookSupportedTimeZonesEe48 Invoke function supportedTimeZones

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUserOutlookSupportedTimeZonesEe48Request
*/
func (a *UsersFunctionsApiService) UsersUserOutlookSupportedTimeZonesEe48(ctx _context.Context, userId string) ApiUsersUserOutlookSupportedTimeZonesEe48Request {
	return ApiUsersUserOutlookSupportedTimeZonesEe48Request{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphTimeZoneInformation
func (a *UsersFunctionsApiService) UsersUserOutlookSupportedTimeZonesEe48Execute(r ApiUsersUserOutlookSupportedTimeZonesEe48Request) ([]MicrosoftGraphTimeZoneInformation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphTimeZoneInformation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserOutlookSupportedTimeZonesEe48")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/outlook/microsoft.graph.supportedTimeZones()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserReminderViewRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	startDateTime string
	endDateTime string
}


func (r ApiUsersUserReminderViewRequest) Execute() ([]MicrosoftGraphReminder, *_nethttp.Response, error) {
	return r.ApiService.UsersUserReminderViewExecute(r)
}

/*
UsersUserReminderView Invoke function reminderView

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param startDateTime Usage: StartDateTime={StartDateTime}
 @param endDateTime Usage: EndDateTime={EndDateTime}
 @return ApiUsersUserReminderViewRequest
*/
func (a *UsersFunctionsApiService) UsersUserReminderView(ctx _context.Context, userId string, startDateTime string, endDateTime string) ApiUsersUserReminderViewRequest {
	return ApiUsersUserReminderViewRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		startDateTime: startDateTime,
		endDateTime: endDateTime,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphReminder
func (a *UsersFunctionsApiService) UsersUserReminderViewExecute(r ApiUsersUserReminderViewRequest) ([]MicrosoftGraphReminder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphReminder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserReminderView")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/microsoft.graph.reminderView(StartDateTime='{StartDateTime}',EndDateTime='{EndDateTime}')"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"StartDateTime"+"}", _neturl.PathEscape(parameterToString(r.startDateTime, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"EndDateTime"+"}", _neturl.PathEscape(parameterToString(r.endDateTime, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserTodoListsDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
}


func (r ApiUsersUserTodoListsDeltaRequest) Execute() ([]*AnyOfmicrosoftGraphTodoTaskList, *_nethttp.Response, error) {
	return r.ApiService.UsersUserTodoListsDeltaExecute(r)
}

/*
UsersUserTodoListsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUserTodoListsDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserTodoListsDelta(ctx _context.Context, userId string) ApiUsersUserTodoListsDeltaRequest {
	return ApiUsersUserTodoListsDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphTodoTaskList
func (a *UsersFunctionsApiService) UsersUserTodoListsDeltaExecute(r ApiUsersUserTodoListsDeltaRequest) ([]*AnyOfmicrosoftGraphTodoTaskList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphTodoTaskList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserTodoListsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/todo/lists/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserTodoListsTodoTaskListTasksDeltaRequest struct {
	ctx _context.Context
	ApiService *UsersFunctionsApiService
	userId string
	todoTaskListId string
}


func (r ApiUsersUserTodoListsTodoTaskListTasksDeltaRequest) Execute() ([]*AnyOfmicrosoftGraphTodoTask, *_nethttp.Response, error) {
	return r.ApiService.UsersUserTodoListsTodoTaskListTasksDeltaExecute(r)
}

/*
UsersUserTodoListsTodoTaskListTasksDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param todoTaskListId key: id of todoTaskList
 @return ApiUsersUserTodoListsTodoTaskListTasksDeltaRequest
*/
func (a *UsersFunctionsApiService) UsersUserTodoListsTodoTaskListTasksDelta(ctx _context.Context, userId string, todoTaskListId string) ApiUsersUserTodoListsTodoTaskListTasksDeltaRequest {
	return ApiUsersUserTodoListsTodoTaskListTasksDeltaRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		todoTaskListId: todoTaskListId,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphTodoTask
func (a *UsersFunctionsApiService) UsersUserTodoListsTodoTaskListTasksDeltaExecute(r ApiUsersUserTodoListsTodoTaskListTasksDeltaRequest) ([]*AnyOfmicrosoftGraphTodoTask, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphTodoTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersFunctionsApiService.UsersUserTodoListsTodoTaskListTasksDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/todo/lists/{todoTaskList-id}/tasks/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"todoTaskList-id"+"}", _neturl.PathEscape(parameterToString(r.todoTaskListId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
