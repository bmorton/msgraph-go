/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject1344 struct for InlineObject1344
type InlineObject1344 struct {
	Principal AnyOfobject `json:"principal,omitempty"`
	Schedule AnyOfobject `json:"schedule,omitempty"`
}

// NewInlineObject1344 instantiates a new InlineObject1344 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1344() *InlineObject1344 {
	this := InlineObject1344{}
	return &this
}

// NewInlineObject1344WithDefaults instantiates a new InlineObject1344 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1344WithDefaults() *InlineObject1344 {
	this := InlineObject1344{}
	return &this
}

// GetPrincipal returns the Principal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1344) GetPrincipal() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1344) GetPrincipalOk() (*AnyOfobject, bool) {
	if o == nil || o.Principal == nil {
		return nil, false
	}
	return &o.Principal, true
}

// HasPrincipal returns a boolean if a field has been set.
func (o *InlineObject1344) HasPrincipal() bool {
	if o != nil && o.Principal != nil {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given AnyOfobject and assigns it to the Principal field.
func (o *InlineObject1344) SetPrincipal(v AnyOfobject) {
	o.Principal = v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1344) GetSchedule() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1344) GetScheduleOk() (*AnyOfobject, bool) {
	if o == nil || o.Schedule == nil {
		return nil, false
	}
	return &o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *InlineObject1344) HasSchedule() bool {
	if o != nil && o.Schedule != nil {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given AnyOfobject and assigns it to the Schedule field.
func (o *InlineObject1344) SetSchedule(v AnyOfobject) {
	o.Schedule = v
}

func (o InlineObject1344) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Principal != nil {
		toSerialize["principal"] = o.Principal
	}
	if o.Schedule != nil {
		toSerialize["schedule"] = o.Schedule
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1344 struct {
	value *InlineObject1344
	isSet bool
}

func (v NullableInlineObject1344) Get() *InlineObject1344 {
	return v.value
}

func (v *NullableInlineObject1344) Set(val *InlineObject1344) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1344) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1344) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1344(val *InlineObject1344) *NullableInlineObject1344 {
	return &NullableInlineObject1344{value: val, isSet: true}
}

func (v NullableInlineObject1344) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1344) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


