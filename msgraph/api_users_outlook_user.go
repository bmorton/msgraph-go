/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// UsersOutlookUserApiService UsersOutlookUserApi service
type UsersOutlookUserApiService service

type ApiUsersDeleteOutlookRequest struct {
	ctx _context.Context
	ApiService *UsersOutlookUserApiService
	userId string
	ifMatch *string
}

// ETag
func (r ApiUsersDeleteOutlookRequest) IfMatch(ifMatch string) ApiUsersDeleteOutlookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersDeleteOutlookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersDeleteOutlookExecute(r)
}

/*
UsersDeleteOutlook Delete navigation property outlook for users

Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersDeleteOutlookRequest
*/
func (a *UsersOutlookUserApiService) UsersDeleteOutlook(ctx _context.Context, userId string) ApiUsersDeleteOutlookRequest {
	return ApiUsersDeleteOutlookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
func (a *UsersOutlookUserApiService) UsersDeleteOutlookExecute(r ApiUsersDeleteOutlookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOutlookUserApiService.UsersDeleteOutlook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/outlook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersGetOutlookRequest struct {
	ctx _context.Context
	ApiService *UsersOutlookUserApiService
	userId string
	select_ *[]string
}

// Select properties to be returned
func (r ApiUsersGetOutlookRequest) Select_(select_ []string) ApiUsersGetOutlookRequest {
	r.select_ = &select_
	return r
}

func (r ApiUsersGetOutlookRequest) Execute() (MicrosoftGraphOutlookUser, *_nethttp.Response, error) {
	return r.ApiService.UsersGetOutlookExecute(r)
}

/*
UsersGetOutlook Get outlook from users

Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersGetOutlookRequest
*/
func (a *UsersOutlookUserApiService) UsersGetOutlook(ctx _context.Context, userId string) ApiUsersGetOutlookRequest {
	return ApiUsersGetOutlookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOutlookUser
func (a *UsersOutlookUserApiService) UsersGetOutlookExecute(r ApiUsersGetOutlookRequest) (MicrosoftGraphOutlookUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOutlookUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOutlookUserApiService.UsersGetOutlook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/outlook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOutlookCreateMasterCategoriesRequest struct {
	ctx _context.Context
	ApiService *UsersOutlookUserApiService
	userId string
	microsoftGraphOutlookCategory *MicrosoftGraphOutlookCategory
}

// New navigation property
func (r ApiUsersOutlookCreateMasterCategoriesRequest) MicrosoftGraphOutlookCategory(microsoftGraphOutlookCategory MicrosoftGraphOutlookCategory) ApiUsersOutlookCreateMasterCategoriesRequest {
	r.microsoftGraphOutlookCategory = &microsoftGraphOutlookCategory
	return r
}

func (r ApiUsersOutlookCreateMasterCategoriesRequest) Execute() (MicrosoftGraphOutlookCategory, *_nethttp.Response, error) {
	return r.ApiService.UsersOutlookCreateMasterCategoriesExecute(r)
}

/*
UsersOutlookCreateMasterCategories Create new navigation property to masterCategories for users

A list of categories defined for the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersOutlookCreateMasterCategoriesRequest
*/
func (a *UsersOutlookUserApiService) UsersOutlookCreateMasterCategories(ctx _context.Context, userId string) ApiUsersOutlookCreateMasterCategoriesRequest {
	return ApiUsersOutlookCreateMasterCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOutlookCategory
func (a *UsersOutlookUserApiService) UsersOutlookCreateMasterCategoriesExecute(r ApiUsersOutlookCreateMasterCategoriesRequest) (MicrosoftGraphOutlookCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOutlookCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOutlookUserApiService.UsersOutlookCreateMasterCategories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/outlook/masterCategories"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOutlookCategory == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOutlookCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOutlookCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOutlookDeleteMasterCategoriesRequest struct {
	ctx _context.Context
	ApiService *UsersOutlookUserApiService
	userId string
	outlookCategoryId string
	ifMatch *string
}

// ETag
func (r ApiUsersOutlookDeleteMasterCategoriesRequest) IfMatch(ifMatch string) ApiUsersOutlookDeleteMasterCategoriesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOutlookDeleteMasterCategoriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOutlookDeleteMasterCategoriesExecute(r)
}

/*
UsersOutlookDeleteMasterCategories Delete navigation property masterCategories for users

A list of categories defined for the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param outlookCategoryId key: id of outlookCategory
 @return ApiUsersOutlookDeleteMasterCategoriesRequest
*/
func (a *UsersOutlookUserApiService) UsersOutlookDeleteMasterCategories(ctx _context.Context, userId string, outlookCategoryId string) ApiUsersOutlookDeleteMasterCategoriesRequest {
	return ApiUsersOutlookDeleteMasterCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		outlookCategoryId: outlookCategoryId,
	}
}

// Execute executes the request
func (a *UsersOutlookUserApiService) UsersOutlookDeleteMasterCategoriesExecute(r ApiUsersOutlookDeleteMasterCategoriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOutlookUserApiService.UsersOutlookDeleteMasterCategories")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/outlook/masterCategories/{outlookCategory-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"outlookCategory-id"+"}", _neturl.PathEscape(parameterToString(r.outlookCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOutlookGetMasterCategoriesRequest struct {
	ctx _context.Context
	ApiService *UsersOutlookUserApiService
	userId string
	outlookCategoryId string
	select_ *[]string
}

// Select properties to be returned
func (r ApiUsersOutlookGetMasterCategoriesRequest) Select_(select_ []string) ApiUsersOutlookGetMasterCategoriesRequest {
	r.select_ = &select_
	return r
}

func (r ApiUsersOutlookGetMasterCategoriesRequest) Execute() (MicrosoftGraphOutlookCategory, *_nethttp.Response, error) {
	return r.ApiService.UsersOutlookGetMasterCategoriesExecute(r)
}

/*
UsersOutlookGetMasterCategories Get masterCategories from users

A list of categories defined for the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param outlookCategoryId key: id of outlookCategory
 @return ApiUsersOutlookGetMasterCategoriesRequest
*/
func (a *UsersOutlookUserApiService) UsersOutlookGetMasterCategories(ctx _context.Context, userId string, outlookCategoryId string) ApiUsersOutlookGetMasterCategoriesRequest {
	return ApiUsersOutlookGetMasterCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		outlookCategoryId: outlookCategoryId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOutlookCategory
func (a *UsersOutlookUserApiService) UsersOutlookGetMasterCategoriesExecute(r ApiUsersOutlookGetMasterCategoriesRequest) (MicrosoftGraphOutlookCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOutlookCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOutlookUserApiService.UsersOutlookGetMasterCategories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/outlook/masterCategories/{outlookCategory-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"outlookCategory-id"+"}", _neturl.PathEscape(parameterToString(r.outlookCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOutlookListMasterCategoriesRequest struct {
	ctx _context.Context
	ApiService *UsersOutlookUserApiService
	userId string
	top *int32
	skip *int32
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
}

// Show only the first n items
func (r ApiUsersOutlookListMasterCategoriesRequest) Top(top int32) ApiUsersOutlookListMasterCategoriesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOutlookListMasterCategoriesRequest) Skip(skip int32) ApiUsersOutlookListMasterCategoriesRequest {
	r.skip = &skip
	return r
}
// Filter items by property values
func (r ApiUsersOutlookListMasterCategoriesRequest) Filter(filter string) ApiUsersOutlookListMasterCategoriesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOutlookListMasterCategoriesRequest) Count(count bool) ApiUsersOutlookListMasterCategoriesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOutlookListMasterCategoriesRequest) Orderby(orderby []string) ApiUsersOutlookListMasterCategoriesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOutlookListMasterCategoriesRequest) Select_(select_ []string) ApiUsersOutlookListMasterCategoriesRequest {
	r.select_ = &select_
	return r
}

func (r ApiUsersOutlookListMasterCategoriesRequest) Execute() (CollectionOfOutlookCategory, *_nethttp.Response, error) {
	return r.ApiService.UsersOutlookListMasterCategoriesExecute(r)
}

/*
UsersOutlookListMasterCategories Get masterCategories from users

A list of categories defined for the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersOutlookListMasterCategoriesRequest
*/
func (a *UsersOutlookUserApiService) UsersOutlookListMasterCategories(ctx _context.Context, userId string) ApiUsersOutlookListMasterCategoriesRequest {
	return ApiUsersOutlookListMasterCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfOutlookCategory
func (a *UsersOutlookUserApiService) UsersOutlookListMasterCategoriesExecute(r ApiUsersOutlookListMasterCategoriesRequest) (CollectionOfOutlookCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOutlookCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOutlookUserApiService.UsersOutlookListMasterCategories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/outlook/masterCategories"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOutlookUpdateMasterCategoriesRequest struct {
	ctx _context.Context
	ApiService *UsersOutlookUserApiService
	userId string
	outlookCategoryId string
	microsoftGraphOutlookCategory *MicrosoftGraphOutlookCategory
}

// New navigation property values
func (r ApiUsersOutlookUpdateMasterCategoriesRequest) MicrosoftGraphOutlookCategory(microsoftGraphOutlookCategory MicrosoftGraphOutlookCategory) ApiUsersOutlookUpdateMasterCategoriesRequest {
	r.microsoftGraphOutlookCategory = &microsoftGraphOutlookCategory
	return r
}

func (r ApiUsersOutlookUpdateMasterCategoriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOutlookUpdateMasterCategoriesExecute(r)
}

/*
UsersOutlookUpdateMasterCategories Update the navigation property masterCategories in users

A list of categories defined for the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param outlookCategoryId key: id of outlookCategory
 @return ApiUsersOutlookUpdateMasterCategoriesRequest
*/
func (a *UsersOutlookUserApiService) UsersOutlookUpdateMasterCategories(ctx _context.Context, userId string, outlookCategoryId string) ApiUsersOutlookUpdateMasterCategoriesRequest {
	return ApiUsersOutlookUpdateMasterCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		outlookCategoryId: outlookCategoryId,
	}
}

// Execute executes the request
func (a *UsersOutlookUserApiService) UsersOutlookUpdateMasterCategoriesExecute(r ApiUsersOutlookUpdateMasterCategoriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOutlookUserApiService.UsersOutlookUpdateMasterCategories")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/outlook/masterCategories/{outlookCategory-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"outlookCategory-id"+"}", _neturl.PathEscape(parameterToString(r.outlookCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOutlookCategory == nil {
		return nil, reportError("microsoftGraphOutlookCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOutlookCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersUpdateOutlookRequest struct {
	ctx _context.Context
	ApiService *UsersOutlookUserApiService
	userId string
	microsoftGraphOutlookUser *MicrosoftGraphOutlookUser
}

// New navigation property values
func (r ApiUsersUpdateOutlookRequest) MicrosoftGraphOutlookUser(microsoftGraphOutlookUser MicrosoftGraphOutlookUser) ApiUsersUpdateOutlookRequest {
	r.microsoftGraphOutlookUser = &microsoftGraphOutlookUser
	return r
}

func (r ApiUsersUpdateOutlookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersUpdateOutlookExecute(r)
}

/*
UsersUpdateOutlook Update the navigation property outlook in users

Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUpdateOutlookRequest
*/
func (a *UsersOutlookUserApiService) UsersUpdateOutlook(ctx _context.Context, userId string) ApiUsersUpdateOutlookRequest {
	return ApiUsersUpdateOutlookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
func (a *UsersOutlookUserApiService) UsersUpdateOutlookExecute(r ApiUsersUpdateOutlookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOutlookUserApiService.UsersUpdateOutlook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/outlook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOutlookUser == nil {
		return nil, reportError("microsoftGraphOutlookUser is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOutlookUser
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
