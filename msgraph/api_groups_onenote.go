/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
)

// Linger please
var (
	_ _context.Context
)

// GroupsOnenoteApiService GroupsOnenoteApi service
type GroupsOnenoteApiService service

type ApiGroupsDeleteOnenoteRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsDeleteOnenoteRequest) IfMatch(ifMatch string) ApiGroupsDeleteOnenoteRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsDeleteOnenoteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsDeleteOnenoteExecute(r)
}

/*
GroupsDeleteOnenote Delete navigation property onenote for groups

Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @return ApiGroupsDeleteOnenoteRequest
*/
func (a *GroupsOnenoteApiService) GroupsDeleteOnenote(ctx _context.Context, groupId string) ApiGroupsDeleteOnenoteRequest {
	return ApiGroupsDeleteOnenoteRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsDeleteOnenoteExecute(r ApiGroupsDeleteOnenoteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsDeleteOnenote")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsGetOnenoteRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsGetOnenoteRequest) Select_(select_ []string) ApiGroupsGetOnenoteRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsGetOnenoteRequest) Expand(expand []string) ApiGroupsGetOnenoteRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsGetOnenoteRequest) Execute() (MicrosoftGraphOnenote, *_nethttp.Response, error) {
	return r.ApiService.GroupsGetOnenoteExecute(r)
}

/*
GroupsGetOnenote Get onenote from groups

Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @return ApiGroupsGetOnenoteRequest
*/
func (a *GroupsOnenoteApiService) GroupsGetOnenote(ctx _context.Context, groupId string) ApiGroupsGetOnenoteRequest {
	return ApiGroupsGetOnenoteRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenote
func (a *GroupsOnenoteApiService) GroupsGetOnenoteExecute(r ApiGroupsGetOnenoteRequest) (MicrosoftGraphOnenote, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsGetOnenote")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteCreateNotebooksRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property
func (r ApiGroupsOnenoteCreateNotebooksRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteCreateNotebooksRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteCreateNotebooksRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteCreateNotebooksExecute(r)
}

/*
GroupsOnenoteCreateNotebooks Create new navigation property to notebooks for groups

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @return ApiGroupsOnenoteCreateNotebooksRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteCreateNotebooks(ctx _context.Context, groupId string) ApiGroupsOnenoteCreateNotebooksRequest {
	return ApiGroupsOnenoteCreateNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteCreateNotebooksExecute(r ApiGroupsOnenoteCreateNotebooksRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteCreateNotebooks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteCreateOperationsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	microsoftGraphOnenoteOperation *MicrosoftGraphOnenoteOperation
}

// New navigation property
func (r ApiGroupsOnenoteCreateOperationsRequest) MicrosoftGraphOnenoteOperation(microsoftGraphOnenoteOperation MicrosoftGraphOnenoteOperation) ApiGroupsOnenoteCreateOperationsRequest {
	r.microsoftGraphOnenoteOperation = &microsoftGraphOnenoteOperation
	return r
}

func (r ApiGroupsOnenoteCreateOperationsRequest) Execute() (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteCreateOperationsExecute(r)
}

/*
GroupsOnenoteCreateOperations Create new navigation property to operations for groups

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @return ApiGroupsOnenoteCreateOperationsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteCreateOperations(ctx _context.Context, groupId string) ApiGroupsOnenoteCreateOperationsRequest {
	return ApiGroupsOnenoteCreateOperationsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteOperation
func (a *GroupsOnenoteApiService) GroupsOnenoteCreateOperationsExecute(r ApiGroupsOnenoteCreateOperationsRequest) (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteCreateOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/operations"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteOperation == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteCreatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiGroupsOnenoteCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenoteCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenoteCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteCreatePagesExecute(r)
}

/*
GroupsOnenoteCreatePages Create new navigation property to pages for groups

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @return ApiGroupsOnenoteCreatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteCreatePages(ctx _context.Context, groupId string) ApiGroupsOnenoteCreatePagesRequest {
	return ApiGroupsOnenoteCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteCreatePagesExecute(r ApiGroupsOnenoteCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteCreateResourcesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	microsoftGraphOnenoteResource *MicrosoftGraphOnenoteResource
}

// New navigation property
func (r ApiGroupsOnenoteCreateResourcesRequest) MicrosoftGraphOnenoteResource(microsoftGraphOnenoteResource MicrosoftGraphOnenoteResource) ApiGroupsOnenoteCreateResourcesRequest {
	r.microsoftGraphOnenoteResource = &microsoftGraphOnenoteResource
	return r
}

func (r ApiGroupsOnenoteCreateResourcesRequest) Execute() (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteCreateResourcesExecute(r)
}

/*
GroupsOnenoteCreateResources Create new navigation property to resources for groups

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @return ApiGroupsOnenoteCreateResourcesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteCreateResources(ctx _context.Context, groupId string) ApiGroupsOnenoteCreateResourcesRequest {
	return ApiGroupsOnenoteCreateResourcesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteResource
func (a *GroupsOnenoteApiService) GroupsOnenoteCreateResourcesExecute(r ApiGroupsOnenoteCreateResourcesRequest) (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteCreateResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteResource == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenoteCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteCreateSectionGroupsExecute(r)
}

/*
GroupsOnenoteCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @return ApiGroupsOnenoteCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteCreateSectionGroups(ctx _context.Context, groupId string) ApiGroupsOnenoteCreateSectionGroupsRequest {
	return ApiGroupsOnenoteCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteCreateSectionGroupsExecute(r ApiGroupsOnenoteCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenoteCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteCreateSectionsExecute(r)
}

/*
GroupsOnenoteCreateSections Create new navigation property to sections for groups

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @return ApiGroupsOnenoteCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteCreateSections(ctx _context.Context, groupId string) ApiGroupsOnenoteCreateSectionsRequest {
	return ApiGroupsOnenoteCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteCreateSectionsExecute(r ApiGroupsOnenoteCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteDeleteNotebooksRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteDeleteNotebooksRequest) IfMatch(ifMatch string) ApiGroupsOnenoteDeleteNotebooksRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteDeleteNotebooksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteDeleteNotebooksExecute(r)
}

/*
GroupsOnenoteDeleteNotebooks Delete navigation property notebooks for groups

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @return ApiGroupsOnenoteDeleteNotebooksRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteDeleteNotebooks(ctx _context.Context, groupId string, notebookId string) ApiGroupsOnenoteDeleteNotebooksRequest {
	return ApiGroupsOnenoteDeleteNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteDeleteNotebooksExecute(r ApiGroupsOnenoteDeleteNotebooksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteDeleteNotebooks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteDeleteOperationsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteOperationId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteDeleteOperationsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteDeleteOperationsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteDeleteOperationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteDeleteOperationsExecute(r)
}

/*
GroupsOnenoteDeleteOperations Delete navigation property operations for groups

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteOperationId key: id of onenoteOperation
 @return ApiGroupsOnenoteDeleteOperationsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteDeleteOperations(ctx _context.Context, groupId string, onenoteOperationId string) ApiGroupsOnenoteDeleteOperationsRequest {
	return ApiGroupsOnenoteDeleteOperationsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteOperationId: onenoteOperationId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteDeleteOperationsExecute(r ApiGroupsOnenoteDeleteOperationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteDeleteOperations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/operations/{onenoteOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteOperation-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteDeletePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteDeletePagesRequest) IfMatch(ifMatch string) ApiGroupsOnenoteDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteDeletePagesExecute(r)
}

/*
GroupsOnenoteDeletePages Delete navigation property pages for groups

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteDeletePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteDeletePages(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenoteDeletePagesRequest {
	return ApiGroupsOnenoteDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteDeletePagesExecute(r ApiGroupsOnenoteDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteDeleteResourcesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteResourceId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteDeleteResourcesRequest) IfMatch(ifMatch string) ApiGroupsOnenoteDeleteResourcesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteDeleteResourcesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteDeleteResourcesExecute(r)
}

/*
GroupsOnenoteDeleteResources Delete navigation property resources for groups

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteResourceId key: id of onenoteResource
 @return ApiGroupsOnenoteDeleteResourcesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteDeleteResources(ctx _context.Context, groupId string, onenoteResourceId string) ApiGroupsOnenoteDeleteResourcesRequest {
	return ApiGroupsOnenoteDeleteResourcesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteDeleteResourcesExecute(r ApiGroupsOnenoteDeleteResourcesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteDeleteResources")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/resources/{onenoteResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenoteDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteDeleteSectionGroups(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteDeleteSectionGroupsRequest {
	return ApiGroupsOnenoteDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteDeleteSectionGroupsExecute(r ApiGroupsOnenoteDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteDeleteSectionsExecute(r)
}

/*
GroupsOnenoteDeleteSections Delete navigation property sections for groups

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteDeleteSections(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteDeleteSectionsRequest {
	return ApiGroupsOnenoteDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteDeleteSectionsExecute(r ApiGroupsOnenoteDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteGetNotebooksRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteGetNotebooksRequest) Select_(select_ []string) ApiGroupsOnenoteGetNotebooksRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteGetNotebooksRequest) Expand(expand []string) ApiGroupsOnenoteGetNotebooksRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteGetNotebooksRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteGetNotebooksExecute(r)
}

/*
GroupsOnenoteGetNotebooks Get notebooks from groups

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @return ApiGroupsOnenoteGetNotebooksRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteGetNotebooks(ctx _context.Context, groupId string, notebookId string) ApiGroupsOnenoteGetNotebooksRequest {
	return ApiGroupsOnenoteGetNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteGetNotebooksExecute(r ApiGroupsOnenoteGetNotebooksRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteGetNotebooks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteGetOperationsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteOperationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteGetOperationsRequest) Select_(select_ []string) ApiGroupsOnenoteGetOperationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteGetOperationsRequest) Expand(expand []string) ApiGroupsOnenoteGetOperationsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteGetOperationsRequest) Execute() (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteGetOperationsExecute(r)
}

/*
GroupsOnenoteGetOperations Get operations from groups

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteOperationId key: id of onenoteOperation
 @return ApiGroupsOnenoteGetOperationsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteGetOperations(ctx _context.Context, groupId string, onenoteOperationId string) ApiGroupsOnenoteGetOperationsRequest {
	return ApiGroupsOnenoteGetOperationsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteOperationId: onenoteOperationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteOperation
func (a *GroupsOnenoteApiService) GroupsOnenoteGetOperationsExecute(r ApiGroupsOnenoteGetOperationsRequest) (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteGetOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/operations/{onenoteOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteOperation-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteGetPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteGetPagesRequest) Select_(select_ []string) ApiGroupsOnenoteGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteGetPagesRequest) Expand(expand []string) ApiGroupsOnenoteGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteGetPagesExecute(r)
}

/*
GroupsOnenoteGetPages Get pages from groups

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteGetPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteGetPages(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenoteGetPagesRequest {
	return ApiGroupsOnenoteGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteGetPagesExecute(r ApiGroupsOnenoteGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
}


func (r ApiGroupsOnenoteGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteGetPagesContentExecute(r)
}

/*
GroupsOnenoteGetPagesContent Get media content for the navigation property pages from groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteGetPagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteGetPagesContent(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenoteGetPagesContentRequest {
	return ApiGroupsOnenoteGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *GroupsOnenoteApiService) GroupsOnenoteGetPagesContentExecute(r ApiGroupsOnenoteGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteGetResourcesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteResourceId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteGetResourcesRequest) Select_(select_ []string) ApiGroupsOnenoteGetResourcesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteGetResourcesRequest) Expand(expand []string) ApiGroupsOnenoteGetResourcesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteGetResourcesRequest) Execute() (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteGetResourcesExecute(r)
}

/*
GroupsOnenoteGetResources Get resources from groups

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteResourceId key: id of onenoteResource
 @return ApiGroupsOnenoteGetResourcesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteGetResources(ctx _context.Context, groupId string, onenoteResourceId string) ApiGroupsOnenoteGetResourcesRequest {
	return ApiGroupsOnenoteGetResourcesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteResource
func (a *GroupsOnenoteApiService) GroupsOnenoteGetResourcesExecute(r ApiGroupsOnenoteGetResourcesRequest) (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteGetResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/resources/{onenoteResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteGetResourcesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteResourceId string
}


func (r ApiGroupsOnenoteGetResourcesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteGetResourcesContentExecute(r)
}

/*
GroupsOnenoteGetResourcesContent Get media content for the navigation property resources from groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteResourceId key: id of onenoteResource
 @return ApiGroupsOnenoteGetResourcesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteGetResourcesContent(ctx _context.Context, groupId string, onenoteResourceId string) ApiGroupsOnenoteGetResourcesContentRequest {
	return ApiGroupsOnenoteGetResourcesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *GroupsOnenoteApiService) GroupsOnenoteGetResourcesContentExecute(r ApiGroupsOnenoteGetResourcesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteGetResourcesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/resources/{onenoteResource-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteGetSectionGroupsExecute(r)
}

/*
GroupsOnenoteGetSectionGroups Get sectionGroups from groups

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteGetSectionGroups(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteGetSectionGroupsRequest {
	return ApiGroupsOnenoteGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteGetSectionGroupsExecute(r ApiGroupsOnenoteGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteGetSectionsRequest) Expand(expand []string) ApiGroupsOnenoteGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteGetSectionsExecute(r)
}

/*
GroupsOnenoteGetSections Get sections from groups

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteGetSections(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteGetSectionsRequest {
	return ApiGroupsOnenoteGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteGetSectionsExecute(r ApiGroupsOnenoteGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteListNotebooksRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteListNotebooksRequest) Top(top int32) ApiGroupsOnenoteListNotebooksRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteListNotebooksRequest) Skip(skip int32) ApiGroupsOnenoteListNotebooksRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteListNotebooksRequest) Search(search string) ApiGroupsOnenoteListNotebooksRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteListNotebooksRequest) Filter(filter string) ApiGroupsOnenoteListNotebooksRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteListNotebooksRequest) Count(count bool) ApiGroupsOnenoteListNotebooksRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteListNotebooksRequest) Orderby(orderby []string) ApiGroupsOnenoteListNotebooksRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteListNotebooksRequest) Select_(select_ []string) ApiGroupsOnenoteListNotebooksRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteListNotebooksRequest) Expand(expand []string) ApiGroupsOnenoteListNotebooksRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteListNotebooksRequest) Execute() (CollectionOfNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteListNotebooksExecute(r)
}

/*
GroupsOnenoteListNotebooks Get notebooks from groups

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @return ApiGroupsOnenoteListNotebooksRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteListNotebooks(ctx _context.Context, groupId string) ApiGroupsOnenoteListNotebooksRequest {
	return ApiGroupsOnenoteListNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return CollectionOfNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteListNotebooksExecute(r ApiGroupsOnenoteListNotebooksRequest) (CollectionOfNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteListNotebooks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteListOperationsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteListOperationsRequest) Top(top int32) ApiGroupsOnenoteListOperationsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteListOperationsRequest) Skip(skip int32) ApiGroupsOnenoteListOperationsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteListOperationsRequest) Search(search string) ApiGroupsOnenoteListOperationsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteListOperationsRequest) Filter(filter string) ApiGroupsOnenoteListOperationsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteListOperationsRequest) Count(count bool) ApiGroupsOnenoteListOperationsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteListOperationsRequest) Orderby(orderby []string) ApiGroupsOnenoteListOperationsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteListOperationsRequest) Select_(select_ []string) ApiGroupsOnenoteListOperationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteListOperationsRequest) Expand(expand []string) ApiGroupsOnenoteListOperationsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteListOperationsRequest) Execute() (CollectionOfOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteListOperationsExecute(r)
}

/*
GroupsOnenoteListOperations Get operations from groups

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @return ApiGroupsOnenoteListOperationsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteListOperations(ctx _context.Context, groupId string) ApiGroupsOnenoteListOperationsRequest {
	return ApiGroupsOnenoteListOperationsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteOperation
func (a *GroupsOnenoteApiService) GroupsOnenoteListOperationsExecute(r ApiGroupsOnenoteListOperationsRequest) (CollectionOfOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteListOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/operations"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteListPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteListPagesRequest) Top(top int32) ApiGroupsOnenoteListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteListPagesRequest) Skip(skip int32) ApiGroupsOnenoteListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteListPagesRequest) Search(search string) ApiGroupsOnenoteListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteListPagesRequest) Filter(filter string) ApiGroupsOnenoteListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteListPagesRequest) Count(count bool) ApiGroupsOnenoteListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteListPagesRequest) Orderby(orderby []string) ApiGroupsOnenoteListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteListPagesRequest) Select_(select_ []string) ApiGroupsOnenoteListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteListPagesRequest) Expand(expand []string) ApiGroupsOnenoteListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteListPagesExecute(r)
}

/*
GroupsOnenoteListPages Get pages from groups

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @return ApiGroupsOnenoteListPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteListPages(ctx _context.Context, groupId string) ApiGroupsOnenoteListPagesRequest {
	return ApiGroupsOnenoteListPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteListPagesExecute(r ApiGroupsOnenoteListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteListResourcesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteListResourcesRequest) Top(top int32) ApiGroupsOnenoteListResourcesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteListResourcesRequest) Skip(skip int32) ApiGroupsOnenoteListResourcesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteListResourcesRequest) Search(search string) ApiGroupsOnenoteListResourcesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteListResourcesRequest) Filter(filter string) ApiGroupsOnenoteListResourcesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteListResourcesRequest) Count(count bool) ApiGroupsOnenoteListResourcesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteListResourcesRequest) Orderby(orderby []string) ApiGroupsOnenoteListResourcesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteListResourcesRequest) Select_(select_ []string) ApiGroupsOnenoteListResourcesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteListResourcesRequest) Expand(expand []string) ApiGroupsOnenoteListResourcesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteListResourcesRequest) Execute() (CollectionOfOnenoteResource, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteListResourcesExecute(r)
}

/*
GroupsOnenoteListResources Get resources from groups

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @return ApiGroupsOnenoteListResourcesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteListResources(ctx _context.Context, groupId string) ApiGroupsOnenoteListResourcesRequest {
	return ApiGroupsOnenoteListResourcesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteResource
func (a *GroupsOnenoteApiService) GroupsOnenoteListResourcesExecute(r ApiGroupsOnenoteListResourcesRequest) (CollectionOfOnenoteResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteListResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteListSectionGroupsRequest) Top(top int32) ApiGroupsOnenoteListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenoteListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteListSectionGroupsRequest) Search(search string) ApiGroupsOnenoteListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenoteListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteListSectionGroupsRequest) Count(count bool) ApiGroupsOnenoteListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenoteListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteListSectionGroupsExecute(r)
}

/*
GroupsOnenoteListSectionGroups Get sectionGroups from groups

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @return ApiGroupsOnenoteListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteListSectionGroups(ctx _context.Context, groupId string) ApiGroupsOnenoteListSectionGroupsRequest {
	return ApiGroupsOnenoteListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteListSectionGroupsExecute(r ApiGroupsOnenoteListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteListSectionsRequest) Top(top int32) ApiGroupsOnenoteListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteListSectionsRequest) Skip(skip int32) ApiGroupsOnenoteListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteListSectionsRequest) Search(search string) ApiGroupsOnenoteListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteListSectionsRequest) Filter(filter string) ApiGroupsOnenoteListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteListSectionsRequest) Count(count bool) ApiGroupsOnenoteListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenoteListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteListSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteListSectionsRequest) Expand(expand []string) ApiGroupsOnenoteListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteListSectionsExecute(r)
}

/*
GroupsOnenoteListSections Get sections from groups

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @return ApiGroupsOnenoteListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteListSections(ctx _context.Context, groupId string) ApiGroupsOnenoteListSectionsRequest {
	return ApiGroupsOnenoteListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteListSectionsExecute(r ApiGroupsOnenoteListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenoteNotebooksCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteNotebooksCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteNotebooksCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksCreateSectionGroupsExecute(r)
}

/*
GroupsOnenoteNotebooksCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @return ApiGroupsOnenoteNotebooksCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksCreateSectionGroups(ctx _context.Context, groupId string, notebookId string) ApiGroupsOnenoteNotebooksCreateSectionGroupsRequest {
	return ApiGroupsOnenoteNotebooksCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksCreateSectionGroupsExecute(r ApiGroupsOnenoteNotebooksCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenoteNotebooksCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteNotebooksCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteNotebooksCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksCreateSectionsExecute(r)
}

/*
GroupsOnenoteNotebooksCreateSections Create new navigation property to sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @return ApiGroupsOnenoteNotebooksCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksCreateSections(ctx _context.Context, groupId string, notebookId string) ApiGroupsOnenoteNotebooksCreateSectionsRequest {
	return ApiGroupsOnenoteNotebooksCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksCreateSectionsExecute(r ApiGroupsOnenoteNotebooksCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenoteNotebooksDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksDeleteSectionGroups(ctx _context.Context, groupId string, notebookId string, sectionGroupId string) ApiGroupsOnenoteNotebooksDeleteSectionGroupsRequest {
	return ApiGroupsOnenoteNotebooksDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksDeleteSectionGroupsExecute(r ApiGroupsOnenoteNotebooksDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksDeleteSectionsExecute(r)
}

/*
GroupsOnenoteNotebooksDeleteSections Delete navigation property sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksDeleteSections(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksDeleteSectionsRequest {
	return ApiGroupsOnenoteNotebooksDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksDeleteSectionsExecute(r ApiGroupsOnenoteNotebooksDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksGetSectionGroupsExecute(r)
}

/*
GroupsOnenoteNotebooksGetSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksGetSectionGroups(ctx _context.Context, groupId string, notebookId string, sectionGroupId string) ApiGroupsOnenoteNotebooksGetSectionGroupsRequest {
	return ApiGroupsOnenoteNotebooksGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksGetSectionGroupsExecute(r ApiGroupsOnenoteNotebooksGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksGetSectionsRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksGetSectionsExecute(r)
}

/*
GroupsOnenoteNotebooksGetSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksGetSections(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksGetSectionsRequest {
	return ApiGroupsOnenoteNotebooksGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksGetSectionsExecute(r ApiGroupsOnenoteNotebooksGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteNotebooksListSectionGroupsRequest) Top(top int32) ApiGroupsOnenoteNotebooksListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteNotebooksListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenoteNotebooksListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteNotebooksListSectionGroupsRequest) Search(search string) ApiGroupsOnenoteNotebooksListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteNotebooksListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenoteNotebooksListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteNotebooksListSectionGroupsRequest) Count(count bool) ApiGroupsOnenoteNotebooksListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteNotebooksListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenoteNotebooksListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksListSectionGroupsExecute(r)
}

/*
GroupsOnenoteNotebooksListSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @return ApiGroupsOnenoteNotebooksListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksListSectionGroups(ctx _context.Context, groupId string, notebookId string) ApiGroupsOnenoteNotebooksListSectionGroupsRequest {
	return ApiGroupsOnenoteNotebooksListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksListSectionGroupsExecute(r ApiGroupsOnenoteNotebooksListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteNotebooksListSectionsRequest) Top(top int32) ApiGroupsOnenoteNotebooksListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteNotebooksListSectionsRequest) Skip(skip int32) ApiGroupsOnenoteNotebooksListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteNotebooksListSectionsRequest) Search(search string) ApiGroupsOnenoteNotebooksListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteNotebooksListSectionsRequest) Filter(filter string) ApiGroupsOnenoteNotebooksListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteNotebooksListSectionsRequest) Count(count bool) ApiGroupsOnenoteNotebooksListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteNotebooksListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenoteNotebooksListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksListSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksListSectionsRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksListSectionsExecute(r)
}

/*
GroupsOnenoteNotebooksListSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @return ApiGroupsOnenoteNotebooksListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksListSections(ctx _context.Context, groupId string, notebookId string) ApiGroupsOnenoteNotebooksListSectionsRequest {
	return ApiGroupsOnenoteNotebooksListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksListSectionsExecute(r ApiGroupsOnenoteNotebooksListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsCreateSectionGroupsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsCreateSectionGroups(ctx _context.Context, groupId string, notebookId string, sectionGroupId string) ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsCreateSectionGroupsExecute(r ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsCreateSectionsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsCreateSections Create new navigation property to sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsCreateSections(ctx _context.Context, groupId string, notebookId string, sectionGroupId string) ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionsRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsCreateSectionsExecute(r ApiGroupsOnenoteNotebooksSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsDeleteParentNotebook(ctx _context.Context, groupId string, notebookId string, sectionGroupId string) ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsDeleteParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsDeleteParentSectionGroup(ctx _context.Context, groupId string, notebookId string, sectionGroupId string) ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsDeleteParentSectionGroupExecute(r ApiGroupsOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsDeleteSectionGroups(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsDeleteSectionGroupsExecute(r ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsDeleteSectionsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsDeleteSections Delete navigation property sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsDeleteSections(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionsRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsDeleteSectionsExecute(r ApiGroupsOnenoteNotebooksSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsGetParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsGetParentNotebook Get parentNotebook from groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionGroupsGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsGetParentNotebook(ctx _context.Context, groupId string, notebookId string, sectionGroupId string) ApiGroupsOnenoteNotebooksSectionGroupsGetParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsGetParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsGetParentSectionGroupExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsGetParentSectionGroup(ctx _context.Context, groupId string, notebookId string, sectionGroupId string) ApiGroupsOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsGetParentSectionGroupExecute(r ApiGroupsOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsGetSectionGroupsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsGetSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionGroupsGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsGetSectionGroups(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenoteNotebooksSectionGroupsGetSectionGroupsRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsGetSectionGroupsExecute(r ApiGroupsOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionGroupsGetSectionsRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsGetSectionsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsGetSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionGroupsGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsGetSections(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionGroupsGetSectionsRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsGetSectionsExecute(r ApiGroupsOnenoteNotebooksSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Top(top int32) ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Search(search string) ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Count(count bool) ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsListSectionGroupsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsListSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsListSectionGroups(ctx _context.Context, groupId string, notebookId string, sectionGroupId string) ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsListSectionGroupsExecute(r ApiGroupsOnenoteNotebooksSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest) Top(top int32) ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest) Skip(skip int32) ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest) Search(search string) ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest) Filter(filter string) ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest) Count(count bool) ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsListSectionsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsListSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsListSections(ctx _context.Context, groupId string, notebookId string, sectionGroupId string) ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsListSectionsExecute(r ApiGroupsOnenoteNotebooksSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsCreatePagesExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsCreatePages Create new navigation property to pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsCreatePages(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsCreatePagesExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsDeletePagesExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsDeletePages Delete navigation property pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsDeletePages(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsDeletePagesExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebook(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroup(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsGetPagesExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsGetPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsGetPages(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsGetPagesExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsGetPagesContentExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsGetPagesContent Get media content for the navigation property pages from groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsGetPagesContent(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsGetPagesContentExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsGetParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsGetParentNotebook Get parentNotebook from groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsGetParentNotebook(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsGetParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroup(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Top(top int32) ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Skip(skip int32) ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Search(search string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Filter(filter string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Count(count bool) ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Orderby(orderby []string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsListPagesExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsListPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsListPages(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsListPagesExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebook(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSection Delete navigation property parentSection for groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSection(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebook Get parentNotebook from groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebook(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentSection Get parentSection from groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentSection(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebook(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSection Update the navigation property parentSection in groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSection(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsUpdatePages Update the navigation property pages in groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsUpdatePages(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest) Body(body *os.File) ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesContent Update media content for the navigation property pages in groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesContent(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebook(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroup(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupExecute(r ApiGroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsUpdateParentNotebook(ctx _context.Context, groupId string, notebookId string, sectionGroupId string) ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsUpdateParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsUpdateParentSectionGroup(ctx _context.Context, groupId string, notebookId string, sectionGroupId string) ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsUpdateParentSectionGroupExecute(r ApiGroupsOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsUpdateSectionGroups(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsUpdateSectionGroupsExecute(r ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionGroupsUpdateSectionsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionGroupsUpdateSections Update the navigation property sections in groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsUpdateSections(ctx _context.Context, groupId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionsRequest {
	return ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionGroupsUpdateSectionsExecute(r ApiGroupsOnenoteNotebooksSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiGroupsOnenoteNotebooksSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenoteNotebooksSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsCreatePagesExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsCreatePages Create new navigation property to pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsCreatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsCreatePages(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsCreatePagesRequest {
	return ApiGroupsOnenoteNotebooksSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsCreatePagesExecute(r ApiGroupsOnenoteNotebooksSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsDeletePagesExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsDeletePages Delete navigation property pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionsDeletePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsDeletePages(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionsDeletePagesRequest {
	return ApiGroupsOnenoteNotebooksSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsDeletePagesExecute(r ApiGroupsOnenoteNotebooksSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsDeleteParentNotebook(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsDeleteParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsDeleteParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsDeleteParentSectionGroup(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsDeleteParentSectionGroupRequest {
	return ApiGroupsOnenoteNotebooksSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsDeleteParentSectionGroupExecute(r ApiGroupsOnenoteNotebooksSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionsGetPagesRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionsGetPagesRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsGetPagesExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsGetPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionsGetPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsGetPages(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionsGetPagesRequest {
	return ApiGroupsOnenoteNotebooksSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsGetPagesExecute(r ApiGroupsOnenoteNotebooksSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiGroupsOnenoteNotebooksSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsGetPagesContentExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsGetPagesContent Get media content for the navigation property pages from groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionsGetPagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsGetPagesContent(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionsGetPagesContentRequest {
	return ApiGroupsOnenoteNotebooksSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsGetPagesContentExecute(r ApiGroupsOnenoteNotebooksSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionsGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionsGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsGetParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsGetParentNotebook Get parentNotebook from groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsGetParentNotebook(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsGetParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsGetParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsGetParentSectionGroupExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsGetParentSectionGroup(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsGetParentSectionGroupRequest {
	return ApiGroupsOnenoteNotebooksSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsGetParentSectionGroupExecute(r ApiGroupsOnenoteNotebooksSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteNotebooksSectionsListPagesRequest) Top(top int32) ApiGroupsOnenoteNotebooksSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteNotebooksSectionsListPagesRequest) Skip(skip int32) ApiGroupsOnenoteNotebooksSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteNotebooksSectionsListPagesRequest) Search(search string) ApiGroupsOnenoteNotebooksSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteNotebooksSectionsListPagesRequest) Filter(filter string) ApiGroupsOnenoteNotebooksSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteNotebooksSectionsListPagesRequest) Count(count bool) ApiGroupsOnenoteNotebooksSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteNotebooksSectionsListPagesRequest) Orderby(orderby []string) ApiGroupsOnenoteNotebooksSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionsListPagesRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionsListPagesRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsListPagesExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsListPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsListPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsListPages(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsListPagesRequest {
	return ApiGroupsOnenoteNotebooksSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsListPagesExecute(r ApiGroupsOnenoteNotebooksSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsPagesDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsPagesDeleteParentNotebook(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsPagesDeleteParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsPagesDeleteParentSectionExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsPagesDeleteParentSection Delete navigation property parentSection for groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsPagesDeleteParentSection(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentSectionRequest {
	return ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsPagesDeleteParentSectionExecute(r ApiGroupsOnenoteNotebooksSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsPagesGetParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsPagesGetParentNotebook Get parentNotebook from groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionsPagesGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsPagesGetParentNotebook(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionsPagesGetParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsPagesGetParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsPagesGetParentSectionExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsPagesGetParentSection Get parentSection from groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionsPagesGetParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsPagesGetParentSection(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionsPagesGetParentSectionRequest {
	return ApiGroupsOnenoteNotebooksSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsPagesGetParentSectionExecute(r ApiGroupsOnenoteNotebooksSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsPagesUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsPagesUpdateParentNotebook(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsPagesUpdateParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsPagesUpdateParentSectionExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsPagesUpdateParentSection Update the navigation property parentSection in groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsPagesUpdateParentSection(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentSectionRequest {
	return ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsPagesUpdateParentSectionExecute(r ApiGroupsOnenoteNotebooksSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroups(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupCreateSections Create new navigation property to sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupCreateSections(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionsExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebook(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroups(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSections Delete navigation property sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSections(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupGetParentNotebook Get parentNotebook from groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupGetParentNotebook(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroup(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionGroups(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupGetSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupGetSections(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionsExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Search(search string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroups(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Top(top int32) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Skip(skip int32) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Search(search string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Filter(filter string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Count(count bool) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Expand(expand []string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupListSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupListSections(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebook(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroups(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSections Update the navigation property sections in groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSections(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest {
	return ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsExecute(r ApiGroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenoteNotebooksSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsUpdatePagesExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsUpdatePages Update the navigation property pages in groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionsUpdatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsUpdatePages(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionsUpdatePagesRequest {
	return ApiGroupsOnenoteNotebooksSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsUpdatePagesExecute(r ApiGroupsOnenoteNotebooksSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiGroupsOnenoteNotebooksSectionsUpdatePagesContentRequest) Body(body *os.File) ApiGroupsOnenoteNotebooksSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsUpdatePagesContentExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsUpdatePagesContent Update media content for the navigation property pages in groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteNotebooksSectionsUpdatePagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsUpdatePagesContent(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteNotebooksSectionsUpdatePagesContentRequest {
	return ApiGroupsOnenoteNotebooksSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsUpdatePagesContentExecute(r ApiGroupsOnenoteNotebooksSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteNotebooksSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsUpdateParentNotebook(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsUpdateParentNotebookRequest {
	return ApiGroupsOnenoteNotebooksSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsUpdateParentNotebookExecute(r ApiGroupsOnenoteNotebooksSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteNotebooksSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteNotebooksSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksSectionsUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenoteNotebooksSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksSectionsUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsUpdateParentSectionGroup(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksSectionsUpdateParentSectionGroupRequest {
	return ApiGroupsOnenoteNotebooksSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksSectionsUpdateParentSectionGroupExecute(r ApiGroupsOnenoteNotebooksSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteNotebooksUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteNotebooksUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenoteNotebooksUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteNotebooksUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksUpdateSectionGroups(ctx _context.Context, groupId string, notebookId string, sectionGroupId string) ApiGroupsOnenoteNotebooksUpdateSectionGroupsRequest {
	return ApiGroupsOnenoteNotebooksUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksUpdateSectionGroupsExecute(r ApiGroupsOnenoteNotebooksUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteNotebooksUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteNotebooksUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteNotebooksUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteNotebooksUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteNotebooksUpdateSectionsExecute(r)
}

/*
GroupsOnenoteNotebooksUpdateSections Update the navigation property sections in groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteNotebooksUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksUpdateSections(ctx _context.Context, groupId string, notebookId string, onenoteSectionId string) ApiGroupsOnenoteNotebooksUpdateSectionsRequest {
	return ApiGroupsOnenoteNotebooksUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteNotebooksUpdateSectionsExecute(r ApiGroupsOnenoteNotebooksUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteNotebooksUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesDeleteParentNotebookExecute(r)
}

/*
GroupsOnenotePagesDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesDeleteParentNotebook(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesDeleteParentNotebookRequest {
	return ApiGroupsOnenotePagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesDeleteParentNotebookExecute(r ApiGroupsOnenotePagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesDeleteParentSectionExecute(r)
}

/*
GroupsOnenotePagesDeleteParentSection Delete navigation property parentSection for groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesDeleteParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesDeleteParentSection(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesDeleteParentSectionRequest {
	return ApiGroupsOnenotePagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesDeleteParentSectionExecute(r ApiGroupsOnenotePagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenotePagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenotePagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesGetParentNotebookExecute(r)
}

/*
GroupsOnenotePagesGetParentNotebook Get parentNotebook from groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesGetParentNotebook(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesGetParentNotebookRequest {
	return ApiGroupsOnenotePagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenotePagesGetParentNotebookExecute(r ApiGroupsOnenotePagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesGetParentSectionRequest) Select_(select_ []string) ApiGroupsOnenotePagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesGetParentSectionRequest) Expand(expand []string) ApiGroupsOnenotePagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesGetParentSectionExecute(r)
}

/*
GroupsOnenotePagesGetParentSection Get parentSection from groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesGetParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesGetParentSection(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesGetParentSectionRequest {
	return ApiGroupsOnenotePagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesGetParentSectionExecute(r ApiGroupsOnenotePagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenotePagesParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookCreateSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentNotebookCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookCreateSectionGroups(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentNotebookCreateSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookCreateSectionGroupsExecute(r ApiGroupsOnenotePagesParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenotePagesParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenotePagesParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookCreateSectionsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookCreateSections Create new navigation property to sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentNotebookCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookCreateSections(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentNotebookCreateSectionsRequest {
	return ApiGroupsOnenotePagesParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookCreateSectionsExecute(r ApiGroupsOnenotePagesParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookDeleteSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookDeleteSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookDeleteSectionGroupsExecute(r ApiGroupsOnenotePagesParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookDeleteSectionsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookDeleteSections Delete navigation property sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookDeleteSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookDeleteSectionsRequest {
	return ApiGroupsOnenotePagesParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookDeleteSectionsExecute(r ApiGroupsOnenotePagesParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookGetSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookGetSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookGetSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookGetSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookGetSectionGroupsExecute(r ApiGroupsOnenotePagesParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookGetSectionsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookGetSectionsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookGetSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookGetSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookGetSectionsRequest {
	return ApiGroupsOnenotePagesParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookGetSectionsExecute(r ApiGroupsOnenotePagesParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest) Top(top int32) ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest) Search(search string) ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest) Count(count bool) ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookListSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookListSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookListSectionGroups(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookListSectionGroupsExecute(r ApiGroupsOnenotePagesParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentNotebookListSectionsRequest) Top(top int32) ApiGroupsOnenotePagesParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentNotebookListSectionsRequest) Skip(skip int32) ApiGroupsOnenotePagesParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentNotebookListSectionsRequest) Search(search string) ApiGroupsOnenotePagesParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentNotebookListSectionsRequest) Filter(filter string) ApiGroupsOnenotePagesParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentNotebookListSectionsRequest) Count(count bool) ApiGroupsOnenotePagesParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentNotebookListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookListSectionsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookListSectionsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookListSectionsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookListSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentNotebookListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookListSections(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentNotebookListSectionsRequest {
	return ApiGroupsOnenotePagesParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookListSectionsExecute(r ApiGroupsOnenotePagesParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsCreateSections Create new navigation property to sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsCreateSections(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsCreateSectionsExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsDeleteSections Delete navigation property sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsDeleteSections(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionsExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsGetSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsGetSections(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsGetSectionsExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsListSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsListSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsListSections(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsListSectionsExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsCreatePages Create new navigation property to pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsCreatePages(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsDeletePages Delete navigation property pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsDeletePages(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebook(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPages(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebook Get parentNotebook from groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebook(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Top(top int32) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Skip(skip int32) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Search(search string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Filter(filter string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Count(count bool) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsListPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsListPages(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdatePages Update the navigation property pages in groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdatePages(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebook(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionGroupsUpdateSections Update the navigation property sections in groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsUpdateSections(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionsExecute(r ApiGroupsOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiGroupsOnenotePagesParentNotebookSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenotePagesParentNotebookSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsCreatePagesExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsCreatePages Create new navigation property to pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsCreatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsCreatePages(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsCreatePagesRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsCreatePagesExecute(r ApiGroupsOnenotePagesParentNotebookSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsDeletePagesExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsDeletePages Delete navigation property pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiGroupsOnenotePagesParentNotebookSectionsDeletePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsDeletePages(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiGroupsOnenotePagesParentNotebookSectionsDeletePagesRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsDeletePagesExecute(r ApiGroupsOnenotePagesParentNotebookSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsDeleteParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsDeleteParentNotebook(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsDeleteParentNotebookExecute(r ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsDeleteParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsDeleteParentSectionGroupExecute(r ApiGroupsOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionsGetPagesRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionsGetPagesRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsGetPagesExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsGetPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiGroupsOnenotePagesParentNotebookSectionsGetPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsGetPages(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiGroupsOnenotePagesParentNotebookSectionsGetPagesRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsGetPagesExecute(r ApiGroupsOnenotePagesParentNotebookSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionsGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionsGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsGetParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsGetParentNotebook Get parentNotebook from groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsGetParentNotebook(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsGetParentNotebookRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsGetParentNotebookExecute(r ApiGroupsOnenotePagesParentNotebookSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsGetParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupExecute(r ApiGroupsOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest) Top(top int32) ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest) Skip(skip int32) ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest) Search(search string) ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest) Filter(filter string) ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest) Count(count bool) ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsListPagesExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsListPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsListPages(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsListPagesExecute(r ApiGroupsOnenotePagesParentNotebookSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSections Create new navigation property to sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebook(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroups(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSections Delete navigation property sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebook Get parentNotebook from groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebook(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroups(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Search(search string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroups(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Top(top int32) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Skip(skip int32) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Search(search string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Filter(filter string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Count(count bool) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebook(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSections Update the navigation property sections in groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsExecute(r ApiGroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenotePagesParentNotebookSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsUpdatePagesExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsUpdatePages Update the navigation property pages in groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiGroupsOnenotePagesParentNotebookSectionsUpdatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsUpdatePages(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiGroupsOnenotePagesParentNotebookSectionsUpdatePagesRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsUpdatePagesExecute(r ApiGroupsOnenotePagesParentNotebookSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsUpdateParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsUpdateParentNotebook(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsUpdateParentNotebookExecute(r ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookSectionsUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentNotebookSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsUpdateParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookSectionsUpdateParentSectionGroupExecute(r ApiGroupsOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentNotebookUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookUpdateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentNotebookUpdateSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookUpdateSectionGroupsExecute(r ApiGroupsOnenotePagesParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenotePagesParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenotePagesParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentNotebookUpdateSectionsExecute(r)
}

/*
GroupsOnenotePagesParentNotebookUpdateSections Update the navigation property sections in groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentNotebookUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookUpdateSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentNotebookUpdateSectionsRequest {
	return ApiGroupsOnenotePagesParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentNotebookUpdateSectionsExecute(r ApiGroupsOnenotePagesParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionCreatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiGroupsOnenotePagesParentSectionCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenotePagesParentSectionCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenotePagesParentSectionCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionCreatePagesExecute(r)
}

/*
GroupsOnenotePagesParentSectionCreatePages Create new navigation property to pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionCreatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionCreatePages(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionCreatePagesRequest {
	return ApiGroupsOnenotePagesParentSectionCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionCreatePagesExecute(r ApiGroupsOnenotePagesParentSectionCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionDeletePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenotePageId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentSectionDeletePagesRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentSectionDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentSectionDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionDeletePagesExecute(r)
}

/*
GroupsOnenotePagesParentSectionDeletePages Delete navigation property pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionDeletePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionDeletePages(ctx _context.Context, groupId string, onenotePageId string, onenotePageId1 string) ApiGroupsOnenotePagesParentSectionDeletePagesRequest {
	return ApiGroupsOnenotePagesParentSectionDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionDeletePagesExecute(r ApiGroupsOnenotePagesParentSectionDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentSectionDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentSectionDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentSectionDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionDeleteParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentSectionDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionDeleteParentNotebook(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionDeleteParentNotebookRequest {
	return ApiGroupsOnenotePagesParentSectionDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionDeleteParentNotebookExecute(r ApiGroupsOnenotePagesParentSectionDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentSectionDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentSectionDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentSectionDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentSectionDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionDeleteParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionDeleteParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentSectionDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionDeleteParentSectionGroupExecute(r ApiGroupsOnenotePagesParentSectionDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionGetPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenotePageId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionGetPagesRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionGetPagesRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionGetPagesExecute(r)
}

/*
GroupsOnenotePagesParentSectionGetPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionGetPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionGetPages(ctx _context.Context, groupId string, onenotePageId string, onenotePageId1 string) ApiGroupsOnenotePagesParentSectionGetPagesRequest {
	return ApiGroupsOnenotePagesParentSectionGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionGetPagesExecute(r ApiGroupsOnenotePagesParentSectionGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionGetParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentSectionGetParentNotebook Get parentNotebook from groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionGetParentNotebook(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionGetParentNotebookRequest {
	return ApiGroupsOnenotePagesParentSectionGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionGetParentNotebookExecute(r ApiGroupsOnenotePagesParentSectionGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionGetParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentSectionGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionGetParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionGetParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentSectionGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionGetParentSectionGroupExecute(r ApiGroupsOnenotePagesParentSectionGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionListPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentSectionListPagesRequest) Top(top int32) ApiGroupsOnenotePagesParentSectionListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentSectionListPagesRequest) Skip(skip int32) ApiGroupsOnenotePagesParentSectionListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentSectionListPagesRequest) Search(search string) ApiGroupsOnenotePagesParentSectionListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentSectionListPagesRequest) Filter(filter string) ApiGroupsOnenotePagesParentSectionListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentSectionListPagesRequest) Count(count bool) ApiGroupsOnenotePagesParentSectionListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentSectionListPagesRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentSectionListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionListPagesRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionListPagesRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionListPagesExecute(r)
}

/*
GroupsOnenotePagesParentSectionListPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionListPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionListPages(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionListPagesRequest {
	return ApiGroupsOnenotePagesParentSectionListPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionListPagesExecute(r ApiGroupsOnenotePagesParentSectionListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookCreateSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookCreateSectionGroups(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookCreateSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookCreateSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookCreateSections Create new navigation property to sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookCreateSections(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookCreateSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookDeleteSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookDeleteSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookDeleteSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookDeleteSections Delete navigation property sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookDeleteSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookDeleteSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookGetSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookGetSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookGetSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookGetSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookGetSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookGetSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookGetSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookGetSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Top(top int32) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Search(search string) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Count(count bool) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookListSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookListSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookListSectionGroups(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookListSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest) Top(top int32) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest) Skip(skip int32) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest) Search(search string) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest) Filter(filter string) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest) Count(count bool) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookListSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookListSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookListSections(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookListSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSections Create new navigation property to sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSections(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSections Delete navigation property sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSections(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSections(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSections(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSections Update the navigation property sections in groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSections(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookUpdateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookUpdateSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentNotebookUpdateSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentNotebookUpdateSections Update the navigation property sections in groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookUpdateSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentNotebookUpdateSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupCreateSectionGroups(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupCreateSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupCreateSections Create new navigation property to sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupCreateSections(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupCreateSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupDeleteParentNotebook(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupDeleteSections Delete navigation property sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupDeleteSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupGetParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupGetParentNotebook Get parentNotebook from groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupGetParentNotebook(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupGetParentNotebookExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupGetParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupGetSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupGetSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupGetSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupGetSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupGetSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupGetSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupGetSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupGetSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Search(search string) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupListSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupListSectionGroups(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Top(top int32) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Skip(skip int32) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Search(search string) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Filter(filter string) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Count(count bool) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupListSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupListSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupListSections(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupListSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroups(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSections Create new navigation property to sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSections(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSections Delete navigation property sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Top(top int32) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Search(search string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Count(count bool) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroups(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Top(top int32) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Skip(skip int32) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Search(search string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Filter(filter string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Count(count bool) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Select_(select_ []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Expand(expand []string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSections(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSections Update the navigation property sections in groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupUpdateParentNotebook(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionGroups(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionsExecute(r)
}

/*
GroupsOnenotePagesParentSectionParentSectionGroupUpdateSections Update the navigation property sections in groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupUpdateSections(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string) ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest {
	return ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionsExecute(r ApiGroupsOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenotePageId1 string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentSectionUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenotePagesParentSectionUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenotePagesParentSectionUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionUpdatePagesExecute(r)
}

/*
GroupsOnenotePagesParentSectionUpdatePages Update the navigation property pages in groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionUpdatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionUpdatePages(ctx _context.Context, groupId string, onenotePageId string, onenotePageId1 string) ApiGroupsOnenotePagesParentSectionUpdatePagesRequest {
	return ApiGroupsOnenotePagesParentSectionUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionUpdatePagesExecute(r ApiGroupsOnenotePagesParentSectionUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentSectionUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenotePagesParentSectionUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenotePagesParentSectionUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionUpdateParentNotebookExecute(r)
}

/*
GroupsOnenotePagesParentSectionUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionUpdateParentNotebook(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionUpdateParentNotebookRequest {
	return ApiGroupsOnenotePagesParentSectionUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionUpdateParentNotebookExecute(r ApiGroupsOnenotePagesParentSectionUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesParentSectionUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenotePagesParentSectionUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenotePagesParentSectionUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenotePagesParentSectionUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesParentSectionUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenotePagesParentSectionUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesParentSectionUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionUpdateParentSectionGroup(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesParentSectionUpdateParentSectionGroupRequest {
	return ApiGroupsOnenotePagesParentSectionUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesParentSectionUpdateParentSectionGroupExecute(r ApiGroupsOnenotePagesParentSectionUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesParentSectionUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenotePagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenotePagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenotePagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesUpdateParentNotebookExecute(r)
}

/*
GroupsOnenotePagesUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesUpdateParentNotebook(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesUpdateParentNotebookRequest {
	return ApiGroupsOnenotePagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesUpdateParentNotebookExecute(r ApiGroupsOnenotePagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenotePagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenotePagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenotePagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenotePagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenotePagesUpdateParentSectionExecute(r)
}

/*
GroupsOnenotePagesUpdateParentSection Update the navigation property parentSection in groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenotePagesUpdateParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenotePagesUpdateParentSection(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenotePagesUpdateParentSectionRequest {
	return ApiGroupsOnenotePagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenotePagesUpdateParentSectionExecute(r ApiGroupsOnenotePagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenotePagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
}


func (r ApiGroupsOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentExecute(r)
}

/*
GroupsOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContent Get media content for the navigation property pages from groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiGroupsOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContent(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiGroupsOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest {
	return ApiGroupsOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return *os.File
func (a *GroupsOnenoteApiService) GroupsOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentExecute(r ApiGroupsOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	body **os.File
}

// New media content.
func (r ApiGroupsOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest) Body(body *os.File) ApiGroupsOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiGroupsOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentExecute(r)
}

/*
GroupsOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContent Update media content for the navigation property pages in groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiGroupsOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContent(ctx _context.Context, groupId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiGroupsOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest {
	return ApiGroupsOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentExecute(r ApiGroupsOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteParentNotebookSectionsPagesGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
}


func (r ApiGroupsOnenoteParentNotebookSectionsPagesGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteParentNotebookSectionsPagesGetPagesContentExecute(r)
}

/*
GroupsOnenoteParentNotebookSectionsPagesGetPagesContent Get media content for the navigation property pages from groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiGroupsOnenoteParentNotebookSectionsPagesGetPagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteParentNotebookSectionsPagesGetPagesContent(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiGroupsOnenoteParentNotebookSectionsPagesGetPagesContentRequest {
	return ApiGroupsOnenoteParentNotebookSectionsPagesGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return *os.File
func (a *GroupsOnenoteApiService) GroupsOnenoteParentNotebookSectionsPagesGetPagesContentExecute(r ApiGroupsOnenoteParentNotebookSectionsPagesGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteParentNotebookSectionsPagesGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	body **os.File
}

// New media content.
func (r ApiGroupsOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest) Body(body *os.File) ApiGroupsOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiGroupsOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteParentNotebookSectionsPagesUpdatePagesContentExecute(r)
}

/*
GroupsOnenoteParentNotebookSectionsPagesUpdatePagesContent Update media content for the navigation property pages in groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiGroupsOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteParentNotebookSectionsPagesUpdatePagesContent(ctx _context.Context, groupId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiGroupsOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest {
	return ApiGroupsOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteParentNotebookSectionsPagesUpdatePagesContentExecute(r ApiGroupsOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteParentNotebookSectionsPagesUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteParentSectionPagesGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenotePageId1 string
}


func (r ApiGroupsOnenoteParentSectionPagesGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteParentSectionPagesGetPagesContentExecute(r)
}

/*
GroupsOnenoteParentSectionPagesGetPagesContent Get media content for the navigation property pages from groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiGroupsOnenoteParentSectionPagesGetPagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteParentSectionPagesGetPagesContent(ctx _context.Context, groupId string, onenotePageId string, onenotePageId1 string) ApiGroupsOnenoteParentSectionPagesGetPagesContentRequest {
	return ApiGroupsOnenoteParentSectionPagesGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return *os.File
func (a *GroupsOnenoteApiService) GroupsOnenoteParentSectionPagesGetPagesContentExecute(r ApiGroupsOnenoteParentSectionPagesGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteParentSectionPagesGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteParentSectionPagesUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	onenotePageId1 string
	body **os.File
}

// New media content.
func (r ApiGroupsOnenoteParentSectionPagesUpdatePagesContentRequest) Body(body *os.File) ApiGroupsOnenoteParentSectionPagesUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiGroupsOnenoteParentSectionPagesUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteParentSectionPagesUpdatePagesContentExecute(r)
}

/*
GroupsOnenoteParentSectionPagesUpdatePagesContent Update media content for the navigation property pages in groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiGroupsOnenoteParentSectionPagesUpdatePagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteParentSectionPagesUpdatePagesContent(ctx _context.Context, groupId string, onenotePageId string, onenotePageId1 string) ApiGroupsOnenoteParentSectionPagesUpdatePagesContentRequest {
	return ApiGroupsOnenoteParentSectionPagesUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteParentSectionPagesUpdatePagesContentExecute(r ApiGroupsOnenoteParentSectionPagesUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteParentSectionPagesUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenoteSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsCreateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsCreateSectionGroups(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteSectionGroupsCreateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsCreateSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenoteSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsCreateSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsCreateSections Create new navigation property to sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsCreateSections(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteSectionGroupsCreateSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsCreateSectionsExecute(r ApiGroupsOnenoteSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsDeleteParentNotebook(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteSectionGroupsDeleteParentNotebookRequest {
	return ApiGroupsOnenoteSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsDeleteParentNotebookExecute(r ApiGroupsOnenoteSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsDeleteParentSectionGroup(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteSectionGroupsDeleteParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsDeleteParentSectionGroupExecute(r ApiGroupsOnenoteSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsDeleteSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenoteSectionGroupsDeleteSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsDeleteSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsDeleteSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsDeleteSections Delete navigation property sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsDeleteSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsDeleteSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsDeleteSectionsExecute(r ApiGroupsOnenoteSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsGetParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionGroupsGetParentNotebook Get parentNotebook from groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsGetParentNotebook(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteSectionGroupsGetParentNotebookRequest {
	return ApiGroupsOnenoteSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsGetParentNotebookExecute(r ApiGroupsOnenoteSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsGetParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionGroupsGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsGetParentSectionGroup(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteSectionGroupsGetParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsGetParentSectionGroupExecute(r ApiGroupsOnenoteSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsGetSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsGetSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsGetSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenoteSectionGroupsGetSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsGetSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsGetSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsGetSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsGetSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsGetSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsGetSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsGetSectionsExecute(r ApiGroupsOnenoteSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest) Top(top int32) ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest) Search(search string) ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest) Count(count bool) ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsListSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsListSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsListSectionGroups(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsListSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionGroupsListSectionsRequest) Top(top int32) ApiGroupsOnenoteSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionGroupsListSectionsRequest) Skip(skip int32) ApiGroupsOnenoteSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionGroupsListSectionsRequest) Search(search string) ApiGroupsOnenoteSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionGroupsListSectionsRequest) Filter(filter string) ApiGroupsOnenoteSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionGroupsListSectionsRequest) Count(count bool) ApiGroupsOnenoteSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsListSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsListSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsListSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsListSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsListSections(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteSectionGroupsListSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsListSectionsExecute(r ApiGroupsOnenoteSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookCreateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookCreateSectionGroups(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookCreateSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookCreateSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookCreateSections Create new navigation property to sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookCreateSections(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookCreateSectionsExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookDeleteSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookDeleteSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookDeleteSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookDeleteSections Delete navigation property sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookDeleteSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookDeleteSectionsExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookGetSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookGetSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookGetSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookGetSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookGetSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookGetSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookGetSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookGetSectionsExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Top(top int32) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Search(search string) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Count(count bool) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookListSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookListSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookListSectionGroups(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookListSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest) Top(top int32) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest) Skip(skip int32) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest) Search(search string) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest) Filter(filter string) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest) Count(count bool) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookListSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookListSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookListSections(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookListSectionsExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsCreatePagesExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsCreatePages Create new navigation property to pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsCreatePages(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsCreatePagesExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsDeletePagesExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsDeletePages Delete navigation property pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsDeletePages(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsDeletePagesExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebook(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroup(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsGetPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsGetPages(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesContentExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesContent Get media content for the navigation property pages from groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesContent(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesContentExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsGetParentNotebook Get parentNotebook from groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsGetParentNotebook(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroup(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Top(top int32) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Skip(skip int32) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Search(search string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Filter(filter string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Count(count bool) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsListPagesExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsListPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsListPages(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsListPagesExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebook(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSection Delete navigation property parentSection for groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSection(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebook Get parentNotebook from groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebook(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSection Get parentSection from groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSection(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebook(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSection Update the navigation property parentSection in groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSection(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePages Update the navigation property pages in groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePages(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest) Body(body *os.File) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContent Update media content for the navigation property pages in groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContent(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebook(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroup(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookUpdateSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookUpdateSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsParentNotebookUpdateSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsParentNotebookUpdateSections Update the navigation property sections in groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookUpdateSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsParentNotebookUpdateSectionsExecute(r ApiGroupsOnenoteSectionGroupsParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiGroupsOnenoteSectionGroupsSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenoteSectionGroupsSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsCreatePagesExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsCreatePages Create new navigation property to pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsCreatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsCreatePages(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsSectionsCreatePagesRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsCreatePagesExecute(r ApiGroupsOnenoteSectionGroupsSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsDeletePagesExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsDeletePages Delete navigation property pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsSectionsDeletePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsDeletePages(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsSectionsDeletePagesRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsDeletePagesExecute(r ApiGroupsOnenoteSectionGroupsSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsDeleteParentNotebook(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsSectionsDeleteParentNotebookRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsDeleteParentNotebookExecute(r ApiGroupsOnenoteSectionGroupsSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsDeleteParentSectionGroup(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsDeleteParentSectionGroupExecute(r ApiGroupsOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsSectionsGetPagesRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsSectionsGetPagesRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsGetPagesExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsGetPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsSectionsGetPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsGetPages(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsSectionsGetPagesRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsGetPagesExecute(r ApiGroupsOnenoteSectionGroupsSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiGroupsOnenoteSectionGroupsSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsGetPagesContentExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsGetPagesContent Get media content for the navigation property pages from groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsSectionsGetPagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsGetPagesContent(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsSectionsGetPagesContentRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsGetPagesContentExecute(r ApiGroupsOnenoteSectionGroupsSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsSectionsGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsSectionsGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsGetParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsGetParentNotebook Get parentNotebook from groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsGetParentNotebook(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsSectionsGetParentNotebookRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsGetParentNotebookExecute(r ApiGroupsOnenoteSectionGroupsSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsGetParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsGetParentSectionGroup(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsSectionsGetParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsGetParentSectionGroupExecute(r ApiGroupsOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest) Top(top int32) ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest) Skip(skip int32) ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest) Search(search string) ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest) Filter(filter string) ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest) Count(count bool) ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsListPagesExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsListPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsListPages(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsListPagesExecute(r ApiGroupsOnenoteSectionGroupsSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesDeleteParentNotebook(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesDeleteParentNotebookExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesDeleteParentSectionExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesDeleteParentSection Delete navigation property parentSection for groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesDeleteParentSection(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesDeleteParentSectionExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesGetParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesGetParentNotebook Get parentNotebook from groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesGetParentNotebook(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesGetParentNotebookExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesGetParentSectionExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesGetParentSection Get parentSection from groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesGetParentSection(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentSectionRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesGetParentSectionExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSections Create new navigation property to sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, sectionGroupId1 string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSections Delete navigation property sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, sectionGroupId1 string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Top(top int32) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Search(search string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Count(count bool) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Top(top int32) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Skip(skip int32) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Search(search string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Filter(filter string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Count(count bool) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, sectionGroupId1 string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSections Update the navigation property sections in groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesUpdateParentNotebook(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesUpdateParentNotebookExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsPagesUpdateParentSectionExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsPagesUpdateParentSection Update the navigation property parentSection in groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesUpdateParentSection(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsPagesUpdateParentSectionExecute(r ApiGroupsOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsParentNotebookCreateSections Create new navigation property to sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookCreateSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionsExecute(r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, sectionGroupId1 string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSections Delete navigation property sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsExecute(r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, sectionGroupId1 string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsParentNotebookGetSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookGetSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionsExecute(r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Top(top int32) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Search(search string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Count(count bool) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Top(top int32) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Skip(skip int32) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Search(search string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Filter(filter string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Count(count bool) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsParentNotebookListSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookListSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsExecute(r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, sectionGroupId1 string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSections Update the navigation property sections in groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsExecute(r ApiGroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsUpdatePagesExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsUpdatePages Update the navigation property pages in groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsUpdatePages(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsUpdatePagesExecute(r ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesContentRequest) Body(body *os.File) ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsUpdatePagesContentExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsUpdatePagesContent Update media content for the navigation property pages in groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsUpdatePagesContent(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesContentRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsUpdatePagesContentExecute(r ApiGroupsOnenoteSectionGroupsSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteSectionGroupsSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsUpdateParentNotebook(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsSectionsUpdateParentNotebookRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsUpdateParentNotebookExecute(r ApiGroupsOnenoteSectionGroupsSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsSectionsUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionGroupsSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsUpdateParentSectionGroup(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsSectionsUpdateParentSectionGroupExecute(r ApiGroupsOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsUpdateParentNotebook(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteSectionGroupsUpdateParentNotebookRequest {
	return ApiGroupsOnenoteSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsUpdateParentNotebookExecute(r ApiGroupsOnenoteSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsUpdateParentSectionGroup(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteSectionGroupsUpdateParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsUpdateParentSectionGroupExecute(r ApiGroupsOnenoteSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionGroupsUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsUpdateSectionGroups(ctx _context.Context, groupId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenoteSectionGroupsUpdateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsUpdateSectionGroupsExecute(r ApiGroupsOnenoteSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionGroupsUpdateSectionsExecute(r)
}

/*
GroupsOnenoteSectionGroupsUpdateSections Update the navigation property sections in groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionGroupsUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsUpdateSections(ctx _context.Context, groupId string, sectionGroupId string, onenoteSectionId string) ApiGroupsOnenoteSectionGroupsUpdateSectionsRequest {
	return ApiGroupsOnenoteSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionGroupsUpdateSectionsExecute(r ApiGroupsOnenoteSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiGroupsOnenoteSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenoteSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenoteSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsCreatePagesExecute(r)
}

/*
GroupsOnenoteSectionsCreatePages Create new navigation property to pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsCreatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsCreatePages(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsCreatePagesRequest {
	return ApiGroupsOnenoteSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsCreatePagesExecute(r ApiGroupsOnenoteSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsDeletePagesExecute(r)
}

/*
GroupsOnenoteSectionsDeletePages Delete navigation property pages for groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionsDeletePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsDeletePages(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionsDeletePagesRequest {
	return ApiGroupsOnenoteSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsDeletePagesExecute(r ApiGroupsOnenoteSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionsDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsDeleteParentNotebook(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsDeleteParentNotebookRequest {
	return ApiGroupsOnenoteSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsDeleteParentNotebookExecute(r ApiGroupsOnenoteSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsDeleteParentSectionGroup(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsDeleteParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsDeleteParentSectionGroupExecute(r ApiGroupsOnenoteSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsGetPagesRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsGetPagesRequest) Expand(expand []string) ApiGroupsOnenoteSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsGetPagesExecute(r)
}

/*
GroupsOnenoteSectionsGetPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionsGetPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsGetPages(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionsGetPagesRequest {
	return ApiGroupsOnenoteSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsGetPagesExecute(r ApiGroupsOnenoteSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiGroupsOnenoteSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsGetPagesContentExecute(r)
}

/*
GroupsOnenoteSectionsGetPagesContent Get media content for the navigation property pages from groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionsGetPagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsGetPagesContent(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionsGetPagesContentRequest {
	return ApiGroupsOnenoteSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsGetPagesContentExecute(r ApiGroupsOnenoteSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsGetParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionsGetParentNotebook Get parentNotebook from groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsGetParentNotebook(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsGetParentNotebookRequest {
	return ApiGroupsOnenoteSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsGetParentNotebookExecute(r ApiGroupsOnenoteSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenoteSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsGetParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionsGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsGetParentSectionGroup(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsGetParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsGetParentSectionGroupExecute(r ApiGroupsOnenoteSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionsListPagesRequest) Top(top int32) ApiGroupsOnenoteSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionsListPagesRequest) Skip(skip int32) ApiGroupsOnenoteSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionsListPagesRequest) Search(search string) ApiGroupsOnenoteSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionsListPagesRequest) Filter(filter string) ApiGroupsOnenoteSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionsListPagesRequest) Count(count bool) ApiGroupsOnenoteSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionsListPagesRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionsListPagesRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsListPagesRequest) Expand(expand []string) ApiGroupsOnenoteSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsListPagesExecute(r)
}

/*
GroupsOnenoteSectionsListPages Get pages from groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsListPagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsListPages(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsListPagesRequest {
	return ApiGroupsOnenoteSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsListPagesExecute(r ApiGroupsOnenoteSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionsPagesDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesDeleteParentNotebook(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionsPagesDeleteParentNotebookRequest {
	return ApiGroupsOnenoteSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesDeleteParentNotebookExecute(r ApiGroupsOnenoteSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesDeleteParentSectionExecute(r)
}

/*
GroupsOnenoteSectionsPagesDeleteParentSection Delete navigation property parentSection for groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionsPagesDeleteParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesDeleteParentSection(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionsPagesDeleteParentSectionRequest {
	return ApiGroupsOnenoteSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesDeleteParentSectionExecute(r ApiGroupsOnenoteSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesGetParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionsPagesGetParentNotebook Get parentNotebook from groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionsPagesGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesGetParentNotebook(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionsPagesGetParentNotebookRequest {
	return ApiGroupsOnenoteSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesGetParentNotebookExecute(r ApiGroupsOnenoteSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiGroupsOnenoteSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesGetParentSectionExecute(r)
}

/*
GroupsOnenoteSectionsPagesGetParentSection Get parentSection from groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionsPagesGetParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesGetParentSection(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionsPagesGetParentSectionRequest {
	return ApiGroupsOnenoteSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesGetParentSectionExecute(r ApiGroupsOnenoteSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookCreateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookCreateSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookCreateSectionGroupsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookCreateSectionsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookCreateSections Create new navigation property to sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookCreateSections(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookCreateSectionsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookDeleteSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookDeleteSectionGroupsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookDeleteSectionsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookDeleteSections Delete navigation property sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookDeleteSections(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookDeleteSectionsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookGetSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookGetSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookGetSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookGetSectionGroupsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookGetSectionsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookGetSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookGetSections(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookGetSectionsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Top(top int32) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Search(search string) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Count(count bool) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookListSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookListSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookListSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookListSectionGroupsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest) Top(top int32) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest) Skip(skip int32) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest) Search(search string) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest) Filter(filter string) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest) Count(count bool) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookListSectionsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookListSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookListSections(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookListSectionsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSections Create new navigation property to sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSections(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSections Delete navigation property sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSections(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSections(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSections(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSections Update the navigation property sections in groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSections(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookUpdateSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookUpdateSectionGroupsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesParentNotebookUpdateSectionsExecute(r)
}

/*
GroupsOnenoteSectionsPagesParentNotebookUpdateSections Update the navigation property sections in groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookUpdateSections(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionsRequest {
	return ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesParentNotebookUpdateSectionsExecute(r ApiGroupsOnenoteSectionsPagesParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionsPagesUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesUpdateParentNotebook(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionsPagesUpdateParentNotebookRequest {
	return ApiGroupsOnenoteSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesUpdateParentNotebookExecute(r ApiGroupsOnenoteSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsPagesUpdateParentSectionExecute(r)
}

/*
GroupsOnenoteSectionsPagesUpdateParentSection Update the navigation property parentSection in groups

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionsPagesUpdateParentSectionRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesUpdateParentSection(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionsPagesUpdateParentSectionRequest {
	return ApiGroupsOnenoteSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsPagesUpdateParentSectionExecute(r ApiGroupsOnenoteSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenoteSectionsParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookCreateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentNotebookCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookCreateSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentNotebookCreateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookCreateSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenoteSectionsParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionsParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookCreateSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookCreateSections Create new navigation property to sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentNotebookCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookCreateSections(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentNotebookCreateSectionsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookCreateSectionsExecute(r ApiGroupsOnenoteSectionsParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookDeleteSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentNotebookDeleteSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookDeleteSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookDeleteSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookDeleteSections Delete navigation property sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentNotebookDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookDeleteSections(ctx _context.Context, groupId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsParentNotebookDeleteSectionsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookDeleteSectionsExecute(r ApiGroupsOnenoteSectionsParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookGetSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookGetSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookGetSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentNotebookGetSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookGetSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentNotebookGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentNotebookGetSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookGetSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookGetSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentNotebookGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookGetSections(ctx _context.Context, groupId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsParentNotebookGetSectionsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookGetSectionsExecute(r ApiGroupsOnenoteSectionsParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest) Top(top int32) ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest) Search(search string) ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest) Count(count bool) ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookListSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookListSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookListSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookListSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest) Top(top int32) ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest) Skip(skip int32) ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest) Search(search string) ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest) Filter(filter string) ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest) Count(count bool) ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookListSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookListSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookListSections(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookListSectionsExecute(r ApiGroupsOnenoteSectionsParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsCreateSections Create new navigation property to sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsCreateSections(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionsExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSections Delete navigation property sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSections(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsGetSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsGetSections(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionsExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsListSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsListSections(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string, sectionGroupId1 string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSections Update the navigation property sections in groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSections(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsExecute(r ApiGroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentNotebookUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookUpdateSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentNotebookUpdateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookUpdateSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionsParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionsParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentNotebookUpdateSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentNotebookUpdateSections Update the navigation property sections in groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentNotebookUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookUpdateSections(ctx _context.Context, groupId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsParentNotebookUpdateSectionsRequest {
	return ApiGroupsOnenoteSectionsParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentNotebookUpdateSectionsExecute(r ApiGroupsOnenoteSectionsParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupCreateSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupCreateSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupCreateSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupCreateSections Create new navigation property to sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupCreateSections(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupCreateSectionsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupDeleteParentNotebook(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupDeleteParentNotebookExecute(r ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupDeleteParentSectionGroupExecute(r ApiGroupsOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupDeleteSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupDeleteSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupDeleteSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupDeleteSections Delete navigation property sections for groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupDeleteSections(ctx _context.Context, groupId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupDeleteSectionsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupGetParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupGetParentNotebook Get parentNotebook from groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupGetParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupGetParentNotebook(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentSectionGroupGetParentNotebookRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupGetParentNotebookExecute(r ApiGroupsOnenoteSectionsParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupGetParentSectionGroup Get parentSectionGroup from groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupGetParentSectionGroup(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupGetParentSectionGroupExecute(r ApiGroupsOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupGetSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupGetSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentSectionGroupGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupGetSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentSectionGroupGetSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupGetSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupGetSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupGetSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupGetSections(ctx _context.Context, groupId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsParentSectionGroupGetSectionsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupGetSectionsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Search(search string) ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupListSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupListSectionGroups Get sectionGroups from groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupListSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupListSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest) Top(top int32) ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest) Skip(skip int32) ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest) Search(search string) ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest) Filter(filter string) ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest) Count(count bool) ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupListSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupListSections Get sections from groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupListSections(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupListSectionsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSections Create new navigation property to sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSections(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSections Delete navigation property sections for groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSections(ctx _context.Context, groupId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupParentNotebookGetSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookGetSections(ctx _context.Context, groupId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Top(top int32) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Search(search string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Filter(filter string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Count(count bool) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroups Get sectionGroups from groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Top(top int32) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Skip(skip int32) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Search(search string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Filter(filter string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Count(count bool) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Orderby(orderby []string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Select_(select_ []string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Expand(expand []string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupParentNotebookListSections Get sections from groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookListSections(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSections Update the navigation property sections in groups

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSections(ctx _context.Context, groupId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupUpdateParentNotebook(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupUpdateParentNotebookExecute(r ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupUpdateParentSectionGroupExecute(r ApiGroupsOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupUpdateSectionGroups(ctx _context.Context, groupId string, onenoteSectionId string, sectionGroupId string) ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupUpdateSectionGroupsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsParentSectionGroupUpdateSectionsExecute(r)
}

/*
GroupsOnenoteSectionsParentSectionGroupUpdateSections Update the navigation property sections in groups

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupUpdateSections(ctx _context.Context, groupId string, onenoteSectionId string, onenoteSectionId1 string) ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionsRequest {
	return ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsParentSectionGroupUpdateSectionsExecute(r ApiGroupsOnenoteSectionsParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenoteSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenoteSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsUpdatePagesExecute(r)
}

/*
GroupsOnenoteSectionsUpdatePages Update the navigation property pages in groups

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionsUpdatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsUpdatePages(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionsUpdatePagesRequest {
	return ApiGroupsOnenoteSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsUpdatePagesExecute(r ApiGroupsOnenoteSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiGroupsOnenoteSectionsUpdatePagesContentRequest) Body(body *os.File) ApiGroupsOnenoteSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiGroupsOnenoteSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsUpdatePagesContentExecute(r)
}

/*
GroupsOnenoteSectionsUpdatePagesContent Update media content for the navigation property pages in groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteSectionsUpdatePagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsUpdatePagesContent(ctx _context.Context, groupId string, onenoteSectionId string, onenotePageId string) ApiGroupsOnenoteSectionsUpdatePagesContentRequest {
	return ApiGroupsOnenoteSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsUpdatePagesContentExecute(r ApiGroupsOnenoteSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsUpdateParentNotebookExecute(r)
}

/*
GroupsOnenoteSectionsUpdateParentNotebook Update the navigation property parentNotebook in groups

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsUpdateParentNotebookRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsUpdateParentNotebook(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsUpdateParentNotebookRequest {
	return ApiGroupsOnenoteSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsUpdateParentNotebookExecute(r ApiGroupsOnenoteSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteSectionsUpdateParentSectionGroupExecute(r)
}

/*
GroupsOnenoteSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in groups

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteSectionsUpdateParentSectionGroupRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsUpdateParentSectionGroup(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteSectionsUpdateParentSectionGroupRequest {
	return ApiGroupsOnenoteSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteSectionsUpdateParentSectionGroupExecute(r ApiGroupsOnenoteSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteUpdateNotebooksRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	notebookId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiGroupsOnenoteUpdateNotebooksRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiGroupsOnenoteUpdateNotebooksRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiGroupsOnenoteUpdateNotebooksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteUpdateNotebooksExecute(r)
}

/*
GroupsOnenoteUpdateNotebooks Update the navigation property notebooks in groups

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param notebookId key: id of notebook
 @return ApiGroupsOnenoteUpdateNotebooksRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdateNotebooks(ctx _context.Context, groupId string, notebookId string) ApiGroupsOnenoteUpdateNotebooksRequest {
	return ApiGroupsOnenoteUpdateNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		notebookId: notebookId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdateNotebooksExecute(r ApiGroupsOnenoteUpdateNotebooksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteUpdateNotebooks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/notebooks/{notebook-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteUpdateOperationsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteOperationId string
	microsoftGraphOnenoteOperation *MicrosoftGraphOnenoteOperation
}

// New navigation property values
func (r ApiGroupsOnenoteUpdateOperationsRequest) MicrosoftGraphOnenoteOperation(microsoftGraphOnenoteOperation MicrosoftGraphOnenoteOperation) ApiGroupsOnenoteUpdateOperationsRequest {
	r.microsoftGraphOnenoteOperation = &microsoftGraphOnenoteOperation
	return r
}

func (r ApiGroupsOnenoteUpdateOperationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteUpdateOperationsExecute(r)
}

/*
GroupsOnenoteUpdateOperations Update the navigation property operations in groups

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteOperationId key: id of onenoteOperation
 @return ApiGroupsOnenoteUpdateOperationsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdateOperations(ctx _context.Context, groupId string, onenoteOperationId string) ApiGroupsOnenoteUpdateOperationsRequest {
	return ApiGroupsOnenoteUpdateOperationsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteOperationId: onenoteOperationId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdateOperationsExecute(r ApiGroupsOnenoteUpdateOperationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteUpdateOperations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/operations/{onenoteOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteOperation-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteOperation == nil {
		return nil, reportError("microsoftGraphOnenoteOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiGroupsOnenoteUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiGroupsOnenoteUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiGroupsOnenoteUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteUpdatePagesExecute(r)
}

/*
GroupsOnenoteUpdatePages Update the navigation property pages in groups

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteUpdatePagesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdatePages(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenoteUpdatePagesRequest {
	return ApiGroupsOnenoteUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdatePagesExecute(r ApiGroupsOnenoteUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiGroupsOnenoteUpdatePagesContentRequest) Body(body *os.File) ApiGroupsOnenoteUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiGroupsOnenoteUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteUpdatePagesContentExecute(r)
}

/*
GroupsOnenoteUpdatePagesContent Update media content for the navigation property pages in groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenotePageId key: id of onenotePage
 @return ApiGroupsOnenoteUpdatePagesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdatePagesContent(ctx _context.Context, groupId string, onenotePageId string) ApiGroupsOnenoteUpdatePagesContentRequest {
	return ApiGroupsOnenoteUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdatePagesContentExecute(r ApiGroupsOnenoteUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteUpdateResourcesRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteResourceId string
	microsoftGraphOnenoteResource *MicrosoftGraphOnenoteResource
}

// New navigation property values
func (r ApiGroupsOnenoteUpdateResourcesRequest) MicrosoftGraphOnenoteResource(microsoftGraphOnenoteResource MicrosoftGraphOnenoteResource) ApiGroupsOnenoteUpdateResourcesRequest {
	r.microsoftGraphOnenoteResource = &microsoftGraphOnenoteResource
	return r
}

func (r ApiGroupsOnenoteUpdateResourcesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteUpdateResourcesExecute(r)
}

/*
GroupsOnenoteUpdateResources Update the navigation property resources in groups

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteResourceId key: id of onenoteResource
 @return ApiGroupsOnenoteUpdateResourcesRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdateResources(ctx _context.Context, groupId string, onenoteResourceId string) ApiGroupsOnenoteUpdateResourcesRequest {
	return ApiGroupsOnenoteUpdateResourcesRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdateResourcesExecute(r ApiGroupsOnenoteUpdateResourcesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteUpdateResources")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/resources/{onenoteResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteResource == nil {
		return nil, reportError("microsoftGraphOnenoteResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteUpdateResourcesContentRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteResourceId string
	body **os.File
}

// New media content.
func (r ApiGroupsOnenoteUpdateResourcesContentRequest) Body(body *os.File) ApiGroupsOnenoteUpdateResourcesContentRequest {
	r.body = &body
	return r
}

func (r ApiGroupsOnenoteUpdateResourcesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteUpdateResourcesContentExecute(r)
}

/*
GroupsOnenoteUpdateResourcesContent Update media content for the navigation property resources in groups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteResourceId key: id of onenoteResource
 @return ApiGroupsOnenoteUpdateResourcesContentRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdateResourcesContent(ctx _context.Context, groupId string, onenoteResourceId string) ApiGroupsOnenoteUpdateResourcesContentRequest {
	return ApiGroupsOnenoteUpdateResourcesContentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdateResourcesContentExecute(r ApiGroupsOnenoteUpdateResourcesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteUpdateResourcesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/resources/{onenoteResource-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiGroupsOnenoteUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiGroupsOnenoteUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiGroupsOnenoteUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteUpdateSectionGroupsExecute(r)
}

/*
GroupsOnenoteUpdateSectionGroups Update the navigation property sectionGroups in groups

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param sectionGroupId key: id of sectionGroup
 @return ApiGroupsOnenoteUpdateSectionGroupsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdateSectionGroups(ctx _context.Context, groupId string, sectionGroupId string) ApiGroupsOnenoteUpdateSectionGroupsRequest {
	return ApiGroupsOnenoteUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdateSectionGroupsExecute(r ApiGroupsOnenoteUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsOnenoteUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiGroupsOnenoteUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiGroupsOnenoteUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiGroupsOnenoteUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsOnenoteUpdateSectionsExecute(r)
}

/*
GroupsOnenoteUpdateSections Update the navigation property sections in groups

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @param onenoteSectionId key: id of onenoteSection
 @return ApiGroupsOnenoteUpdateSectionsRequest
*/
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdateSections(ctx _context.Context, groupId string, onenoteSectionId string) ApiGroupsOnenoteUpdateSectionsRequest {
	return ApiGroupsOnenoteUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsOnenoteUpdateSectionsExecute(r ApiGroupsOnenoteUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsOnenoteUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsUpdateOnenoteRequest struct {
	ctx _context.Context
	ApiService *GroupsOnenoteApiService
	groupId string
	microsoftGraphOnenote *MicrosoftGraphOnenote
}

// New navigation property values
func (r ApiGroupsUpdateOnenoteRequest) MicrosoftGraphOnenote(microsoftGraphOnenote MicrosoftGraphOnenote) ApiGroupsUpdateOnenoteRequest {
	r.microsoftGraphOnenote = &microsoftGraphOnenote
	return r
}

func (r ApiGroupsUpdateOnenoteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GroupsUpdateOnenoteExecute(r)
}

/*
GroupsUpdateOnenote Update the navigation property onenote in groups

Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId key: id of group
 @return ApiGroupsUpdateOnenoteRequest
*/
func (a *GroupsOnenoteApiService) GroupsUpdateOnenote(ctx _context.Context, groupId string) ApiGroupsUpdateOnenoteRequest {
	return ApiGroupsUpdateOnenoteRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
func (a *GroupsOnenoteApiService) GroupsUpdateOnenoteExecute(r ApiGroupsUpdateOnenoteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsOnenoteApiService.GroupsUpdateOnenote")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group-id}/onenote"
	localVarPath = strings.Replace(localVarPath, "{"+"group-id"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenote == nil {
		return nil, reportError("microsoftGraphOnenote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
