/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphDeviceManagementExchangeConnectorSyncType The type of Exchange Connector sync requested.
type MicrosoftGraphDeviceManagementExchangeConnectorSyncType string

// List of microsoft.graph.deviceManagementExchangeConnectorSyncType
const (
	FULL_SYNC MicrosoftGraphDeviceManagementExchangeConnectorSyncType = "fullSync"
	DELTA_SYNC MicrosoftGraphDeviceManagementExchangeConnectorSyncType = "deltaSync"
)

// All allowed values of MicrosoftGraphDeviceManagementExchangeConnectorSyncType enum
var AllowedMicrosoftGraphDeviceManagementExchangeConnectorSyncTypeEnumValues = []MicrosoftGraphDeviceManagementExchangeConnectorSyncType{
	"fullSync",
	"deltaSync",
}

func (v *MicrosoftGraphDeviceManagementExchangeConnectorSyncType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphDeviceManagementExchangeConnectorSyncType(value)
	for _, existing := range AllowedMicrosoftGraphDeviceManagementExchangeConnectorSyncTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphDeviceManagementExchangeConnectorSyncType", value)
}

// NewMicrosoftGraphDeviceManagementExchangeConnectorSyncTypeFromValue returns a pointer to a valid MicrosoftGraphDeviceManagementExchangeConnectorSyncType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphDeviceManagementExchangeConnectorSyncTypeFromValue(v string) (*MicrosoftGraphDeviceManagementExchangeConnectorSyncType, error) {
	ev := MicrosoftGraphDeviceManagementExchangeConnectorSyncType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphDeviceManagementExchangeConnectorSyncType: valid values are %v", v, AllowedMicrosoftGraphDeviceManagementExchangeConnectorSyncTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphDeviceManagementExchangeConnectorSyncType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphDeviceManagementExchangeConnectorSyncTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.deviceManagementExchangeConnectorSyncType value
func (v MicrosoftGraphDeviceManagementExchangeConnectorSyncType) Ptr() *MicrosoftGraphDeviceManagementExchangeConnectorSyncType {
	return &v
}

type NullableMicrosoftGraphDeviceManagementExchangeConnectorSyncType struct {
	value *MicrosoftGraphDeviceManagementExchangeConnectorSyncType
	isSet bool
}

func (v NullableMicrosoftGraphDeviceManagementExchangeConnectorSyncType) Get() *MicrosoftGraphDeviceManagementExchangeConnectorSyncType {
	return v.value
}

func (v *NullableMicrosoftGraphDeviceManagementExchangeConnectorSyncType) Set(val *MicrosoftGraphDeviceManagementExchangeConnectorSyncType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphDeviceManagementExchangeConnectorSyncType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphDeviceManagementExchangeConnectorSyncType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphDeviceManagementExchangeConnectorSyncType(val *MicrosoftGraphDeviceManagementExchangeConnectorSyncType) *NullableMicrosoftGraphDeviceManagementExchangeConnectorSyncType {
	return &NullableMicrosoftGraphDeviceManagementExchangeConnectorSyncType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphDeviceManagementExchangeConnectorSyncType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphDeviceManagementExchangeConnectorSyncType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

