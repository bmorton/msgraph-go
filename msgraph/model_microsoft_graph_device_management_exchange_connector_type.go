/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphDeviceManagementExchangeConnectorType The type of Exchange Connector.
type MicrosoftGraphDeviceManagementExchangeConnectorType string

// List of microsoft.graph.deviceManagementExchangeConnectorType
const (
	ON_PREMISES MicrosoftGraphDeviceManagementExchangeConnectorType = "onPremises"
	HOSTED MicrosoftGraphDeviceManagementExchangeConnectorType = "hosted"
	SERVICE_TO_SERVICE MicrosoftGraphDeviceManagementExchangeConnectorType = "serviceToService"
	DEDICATED MicrosoftGraphDeviceManagementExchangeConnectorType = "dedicated"
)

// All allowed values of MicrosoftGraphDeviceManagementExchangeConnectorType enum
var AllowedMicrosoftGraphDeviceManagementExchangeConnectorTypeEnumValues = []MicrosoftGraphDeviceManagementExchangeConnectorType{
	"onPremises",
	"hosted",
	"serviceToService",
	"dedicated",
}

func (v *MicrosoftGraphDeviceManagementExchangeConnectorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphDeviceManagementExchangeConnectorType(value)
	for _, existing := range AllowedMicrosoftGraphDeviceManagementExchangeConnectorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphDeviceManagementExchangeConnectorType", value)
}

// NewMicrosoftGraphDeviceManagementExchangeConnectorTypeFromValue returns a pointer to a valid MicrosoftGraphDeviceManagementExchangeConnectorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphDeviceManagementExchangeConnectorTypeFromValue(v string) (*MicrosoftGraphDeviceManagementExchangeConnectorType, error) {
	ev := MicrosoftGraphDeviceManagementExchangeConnectorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphDeviceManagementExchangeConnectorType: valid values are %v", v, AllowedMicrosoftGraphDeviceManagementExchangeConnectorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphDeviceManagementExchangeConnectorType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphDeviceManagementExchangeConnectorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.deviceManagementExchangeConnectorType value
func (v MicrosoftGraphDeviceManagementExchangeConnectorType) Ptr() *MicrosoftGraphDeviceManagementExchangeConnectorType {
	return &v
}

type NullableMicrosoftGraphDeviceManagementExchangeConnectorType struct {
	value *MicrosoftGraphDeviceManagementExchangeConnectorType
	isSet bool
}

func (v NullableMicrosoftGraphDeviceManagementExchangeConnectorType) Get() *MicrosoftGraphDeviceManagementExchangeConnectorType {
	return v.value
}

func (v *NullableMicrosoftGraphDeviceManagementExchangeConnectorType) Set(val *MicrosoftGraphDeviceManagementExchangeConnectorType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphDeviceManagementExchangeConnectorType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphDeviceManagementExchangeConnectorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphDeviceManagementExchangeConnectorType(val *MicrosoftGraphDeviceManagementExchangeConnectorType) *NullableMicrosoftGraphDeviceManagementExchangeConnectorType {
	return &NullableMicrosoftGraphDeviceManagementExchangeConnectorType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphDeviceManagementExchangeConnectorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphDeviceManagementExchangeConnectorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

