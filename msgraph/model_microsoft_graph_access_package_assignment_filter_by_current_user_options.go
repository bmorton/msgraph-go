/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions the model 'MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions'
type MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions string

// List of microsoft.graph.accessPackageAssignmentFilterByCurrentUserOptions
const (
	TARGET MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions = "target"
	CREATED_BY MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions = "createdBy"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions enum
var AllowedMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptionsEnumValues = []MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions{
	"target",
	"createdBy",
	"unknownFutureValue",
}

func (v *MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions(value)
	for _, existing := range AllowedMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions", value)
}

// NewMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptionsFromValue returns a pointer to a valid MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptionsFromValue(v string) (*MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions, error) {
	ev := MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions: valid values are %v", v, AllowedMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.accessPackageAssignmentFilterByCurrentUserOptions value
func (v MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions) Ptr() *MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions {
	return &v
}

type NullableMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions struct {
	value *MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions
	isSet bool
}

func (v NullableMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions) Get() *MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions {
	return v.value
}

func (v *NullableMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions) Set(val *MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions(val *MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions) *NullableMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions {
	return &NullableMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions{value: val, isSet: true}
}

func (v NullableMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

