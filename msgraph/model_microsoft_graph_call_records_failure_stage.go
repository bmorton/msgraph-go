/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphCallRecordsFailureStage the model 'MicrosoftGraphCallRecordsFailureStage'
type MicrosoftGraphCallRecordsFailureStage string

// List of microsoft.graph.callRecords.failureStage
const (
	UNKNOWN MicrosoftGraphCallRecordsFailureStage = "unknown"
	CALL_SETUP MicrosoftGraphCallRecordsFailureStage = "callSetup"
	MIDCALL MicrosoftGraphCallRecordsFailureStage = "midcall"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphCallRecordsFailureStage = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphCallRecordsFailureStage enum
var AllowedMicrosoftGraphCallRecordsFailureStageEnumValues = []MicrosoftGraphCallRecordsFailureStage{
	"unknown",
	"callSetup",
	"midcall",
	"unknownFutureValue",
}

func (v *MicrosoftGraphCallRecordsFailureStage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphCallRecordsFailureStage(value)
	for _, existing := range AllowedMicrosoftGraphCallRecordsFailureStageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphCallRecordsFailureStage", value)
}

// NewMicrosoftGraphCallRecordsFailureStageFromValue returns a pointer to a valid MicrosoftGraphCallRecordsFailureStage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphCallRecordsFailureStageFromValue(v string) (*MicrosoftGraphCallRecordsFailureStage, error) {
	ev := MicrosoftGraphCallRecordsFailureStage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphCallRecordsFailureStage: valid values are %v", v, AllowedMicrosoftGraphCallRecordsFailureStageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphCallRecordsFailureStage) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphCallRecordsFailureStageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.callRecords.failureStage value
func (v MicrosoftGraphCallRecordsFailureStage) Ptr() *MicrosoftGraphCallRecordsFailureStage {
	return &v
}

type NullableMicrosoftGraphCallRecordsFailureStage struct {
	value *MicrosoftGraphCallRecordsFailureStage
	isSet bool
}

func (v NullableMicrosoftGraphCallRecordsFailureStage) Get() *MicrosoftGraphCallRecordsFailureStage {
	return v.value
}

func (v *NullableMicrosoftGraphCallRecordsFailureStage) Set(val *MicrosoftGraphCallRecordsFailureStage) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphCallRecordsFailureStage) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphCallRecordsFailureStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphCallRecordsFailureStage(val *MicrosoftGraphCallRecordsFailureStage) *NullableMicrosoftGraphCallRecordsFailureStage {
	return &NullableMicrosoftGraphCallRecordsFailureStage{value: val, isSet: true}
}

func (v NullableMicrosoftGraphCallRecordsFailureStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphCallRecordsFailureStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

