/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphOnenoteSourceService the model 'MicrosoftGraphOnenoteSourceService'
type MicrosoftGraphOnenoteSourceService string

// List of microsoft.graph.onenoteSourceService
const (
	UNKNOWN MicrosoftGraphOnenoteSourceService = "Unknown"
	ONE_DRIVE MicrosoftGraphOnenoteSourceService = "OneDrive"
	ONE_DRIVE_FOR_BUSINESS MicrosoftGraphOnenoteSourceService = "OneDriveForBusiness"
	ON_PREM_ONE_DRIVE_FOR_BUSINESS MicrosoftGraphOnenoteSourceService = "OnPremOneDriveForBusiness"
)

// All allowed values of MicrosoftGraphOnenoteSourceService enum
var AllowedMicrosoftGraphOnenoteSourceServiceEnumValues = []MicrosoftGraphOnenoteSourceService{
	"Unknown",
	"OneDrive",
	"OneDriveForBusiness",
	"OnPremOneDriveForBusiness",
}

func (v *MicrosoftGraphOnenoteSourceService) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphOnenoteSourceService(value)
	for _, existing := range AllowedMicrosoftGraphOnenoteSourceServiceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphOnenoteSourceService", value)
}

// NewMicrosoftGraphOnenoteSourceServiceFromValue returns a pointer to a valid MicrosoftGraphOnenoteSourceService
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphOnenoteSourceServiceFromValue(v string) (*MicrosoftGraphOnenoteSourceService, error) {
	ev := MicrosoftGraphOnenoteSourceService(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphOnenoteSourceService: valid values are %v", v, AllowedMicrosoftGraphOnenoteSourceServiceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphOnenoteSourceService) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphOnenoteSourceServiceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.onenoteSourceService value
func (v MicrosoftGraphOnenoteSourceService) Ptr() *MicrosoftGraphOnenoteSourceService {
	return &v
}

type NullableMicrosoftGraphOnenoteSourceService struct {
	value *MicrosoftGraphOnenoteSourceService
	isSet bool
}

func (v NullableMicrosoftGraphOnenoteSourceService) Get() *MicrosoftGraphOnenoteSourceService {
	return v.value
}

func (v *NullableMicrosoftGraphOnenoteSourceService) Set(val *MicrosoftGraphOnenoteSourceService) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphOnenoteSourceService) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphOnenoteSourceService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphOnenoteSourceService(val *MicrosoftGraphOnenoteSourceService) *NullableMicrosoftGraphOnenoteSourceService {
	return &NullableMicrosoftGraphOnenoteSourceService{value: val, isSet: true}
}

func (v NullableMicrosoftGraphOnenoteSourceService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphOnenoteSourceService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

