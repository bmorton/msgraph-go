/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// InlineObject1319 struct for InlineObject1319
type InlineObject1319 struct {
	NominalRate AnyOfobject `json:"nominalRate,omitempty"`
	Npery AnyOfobject `json:"npery,omitempty"`
}

// NewInlineObject1319 instantiates a new InlineObject1319 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1319() *InlineObject1319 {
	this := InlineObject1319{}
	return &this
}

// NewInlineObject1319WithDefaults instantiates a new InlineObject1319 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1319WithDefaults() *InlineObject1319 {
	this := InlineObject1319{}
	return &this
}

// GetNominalRate returns the NominalRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1319) GetNominalRate() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.NominalRate
}

// GetNominalRateOk returns a tuple with the NominalRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1319) GetNominalRateOk() (*AnyOfobject, bool) {
	if o == nil || o.NominalRate == nil {
		return nil, false
	}
	return &o.NominalRate, true
}

// HasNominalRate returns a boolean if a field has been set.
func (o *InlineObject1319) HasNominalRate() bool {
	if o != nil && o.NominalRate != nil {
		return true
	}

	return false
}

// SetNominalRate gets a reference to the given AnyOfobject and assigns it to the NominalRate field.
func (o *InlineObject1319) SetNominalRate(v AnyOfobject) {
	o.NominalRate = v
}

// GetNpery returns the Npery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1319) GetNpery() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Npery
}

// GetNperyOk returns a tuple with the Npery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1319) GetNperyOk() (*AnyOfobject, bool) {
	if o == nil || o.Npery == nil {
		return nil, false
	}
	return &o.Npery, true
}

// HasNpery returns a boolean if a field has been set.
func (o *InlineObject1319) HasNpery() bool {
	if o != nil && o.Npery != nil {
		return true
	}

	return false
}

// SetNpery gets a reference to the given AnyOfobject and assigns it to the Npery field.
func (o *InlineObject1319) SetNpery(v AnyOfobject) {
	o.Npery = v
}

func (o InlineObject1319) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NominalRate != nil {
		toSerialize["nominalRate"] = o.NominalRate
	}
	if o.Npery != nil {
		toSerialize["npery"] = o.Npery
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1319 struct {
	value *InlineObject1319
	isSet bool
}

func (v NullableInlineObject1319) Get() *InlineObject1319 {
	return v.value
}

func (v *NullableInlineObject1319) Set(val *InlineObject1319) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1319) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1319) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1319(val *InlineObject1319) *NullableInlineObject1319 {
	return &NullableInlineObject1319{value: val, isSet: true}
}

func (v NullableInlineObject1319) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1319) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


