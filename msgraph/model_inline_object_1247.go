/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// InlineObject1247 struct for InlineObject1247
type InlineObject1247 struct {
	Number1 AnyOfobject `json:"number1,omitempty"`
	Number2 AnyOfobject `json:"number2,omitempty"`
}

// NewInlineObject1247 instantiates a new InlineObject1247 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1247() *InlineObject1247 {
	this := InlineObject1247{}
	return &this
}

// NewInlineObject1247WithDefaults instantiates a new InlineObject1247 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1247WithDefaults() *InlineObject1247 {
	this := InlineObject1247{}
	return &this
}

// GetNumber1 returns the Number1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1247) GetNumber1() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Number1
}

// GetNumber1Ok returns a tuple with the Number1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1247) GetNumber1Ok() (*AnyOfobject, bool) {
	if o == nil || o.Number1 == nil {
		return nil, false
	}
	return &o.Number1, true
}

// HasNumber1 returns a boolean if a field has been set.
func (o *InlineObject1247) HasNumber1() bool {
	if o != nil && o.Number1 != nil {
		return true
	}

	return false
}

// SetNumber1 gets a reference to the given AnyOfobject and assigns it to the Number1 field.
func (o *InlineObject1247) SetNumber1(v AnyOfobject) {
	o.Number1 = v
}

// GetNumber2 returns the Number2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1247) GetNumber2() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Number2
}

// GetNumber2Ok returns a tuple with the Number2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1247) GetNumber2Ok() (*AnyOfobject, bool) {
	if o == nil || o.Number2 == nil {
		return nil, false
	}
	return &o.Number2, true
}

// HasNumber2 returns a boolean if a field has been set.
func (o *InlineObject1247) HasNumber2() bool {
	if o != nil && o.Number2 != nil {
		return true
	}

	return false
}

// SetNumber2 gets a reference to the given AnyOfobject and assigns it to the Number2 field.
func (o *InlineObject1247) SetNumber2(v AnyOfobject) {
	o.Number2 = v
}

func (o InlineObject1247) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Number1 != nil {
		toSerialize["number1"] = o.Number1
	}
	if o.Number2 != nil {
		toSerialize["number2"] = o.Number2
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1247 struct {
	value *InlineObject1247
	isSet bool
}

func (v NullableInlineObject1247) Get() *InlineObject1247 {
	return v.value
}

func (v *NullableInlineObject1247) Set(val *InlineObject1247) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1247) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1247) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1247(val *InlineObject1247) *NullableInlineObject1247 {
	return &NullableInlineObject1247{value: val, isSet: true}
}

func (v NullableInlineObject1247) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1247) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


