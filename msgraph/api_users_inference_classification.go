/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// UsersInferenceClassificationApiService UsersInferenceClassificationApi service
type UsersInferenceClassificationApiService service

type ApiUsersDeleteInferenceClassificationRequest struct {
	ctx _context.Context
	ApiService *UsersInferenceClassificationApiService
	userId string
	ifMatch *string
}

// ETag
func (r ApiUsersDeleteInferenceClassificationRequest) IfMatch(ifMatch string) ApiUsersDeleteInferenceClassificationRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersDeleteInferenceClassificationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersDeleteInferenceClassificationExecute(r)
}

/*
UsersDeleteInferenceClassification Delete navigation property inferenceClassification for users

Relevance classification of the user's messages based on explicit designations which override inferred relevance or importance.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersDeleteInferenceClassificationRequest
*/
func (a *UsersInferenceClassificationApiService) UsersDeleteInferenceClassification(ctx _context.Context, userId string) ApiUsersDeleteInferenceClassificationRequest {
	return ApiUsersDeleteInferenceClassificationRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
func (a *UsersInferenceClassificationApiService) UsersDeleteInferenceClassificationExecute(r ApiUsersDeleteInferenceClassificationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersInferenceClassificationApiService.UsersDeleteInferenceClassification")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/inferenceClassification"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersGetInferenceClassificationRequest struct {
	ctx _context.Context
	ApiService *UsersInferenceClassificationApiService
	userId string
	select_ *[]string
}

// Select properties to be returned
func (r ApiUsersGetInferenceClassificationRequest) Select_(select_ []string) ApiUsersGetInferenceClassificationRequest {
	r.select_ = &select_
	return r
}

func (r ApiUsersGetInferenceClassificationRequest) Execute() (MicrosoftGraphInferenceClassification, *_nethttp.Response, error) {
	return r.ApiService.UsersGetInferenceClassificationExecute(r)
}

/*
UsersGetInferenceClassification Get inferenceClassification from users

Relevance classification of the user's messages based on explicit designations which override inferred relevance or importance.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersGetInferenceClassificationRequest
*/
func (a *UsersInferenceClassificationApiService) UsersGetInferenceClassification(ctx _context.Context, userId string) ApiUsersGetInferenceClassificationRequest {
	return ApiUsersGetInferenceClassificationRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphInferenceClassification
func (a *UsersInferenceClassificationApiService) UsersGetInferenceClassificationExecute(r ApiUsersGetInferenceClassificationRequest) (MicrosoftGraphInferenceClassification, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphInferenceClassification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersInferenceClassificationApiService.UsersGetInferenceClassification")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/inferenceClassification"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersInferenceClassificationCreateOverridesRequest struct {
	ctx _context.Context
	ApiService *UsersInferenceClassificationApiService
	userId string
	microsoftGraphInferenceClassificationOverride *MicrosoftGraphInferenceClassificationOverride
}

// New navigation property
func (r ApiUsersInferenceClassificationCreateOverridesRequest) MicrosoftGraphInferenceClassificationOverride(microsoftGraphInferenceClassificationOverride MicrosoftGraphInferenceClassificationOverride) ApiUsersInferenceClassificationCreateOverridesRequest {
	r.microsoftGraphInferenceClassificationOverride = &microsoftGraphInferenceClassificationOverride
	return r
}

func (r ApiUsersInferenceClassificationCreateOverridesRequest) Execute() (MicrosoftGraphInferenceClassificationOverride, *_nethttp.Response, error) {
	return r.ApiService.UsersInferenceClassificationCreateOverridesExecute(r)
}

/*
UsersInferenceClassificationCreateOverrides Create new navigation property to overrides for users

A set of overrides for a user to always classify messages from specific senders in certain ways: focused, or other. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersInferenceClassificationCreateOverridesRequest
*/
func (a *UsersInferenceClassificationApiService) UsersInferenceClassificationCreateOverrides(ctx _context.Context, userId string) ApiUsersInferenceClassificationCreateOverridesRequest {
	return ApiUsersInferenceClassificationCreateOverridesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphInferenceClassificationOverride
func (a *UsersInferenceClassificationApiService) UsersInferenceClassificationCreateOverridesExecute(r ApiUsersInferenceClassificationCreateOverridesRequest) (MicrosoftGraphInferenceClassificationOverride, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphInferenceClassificationOverride
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersInferenceClassificationApiService.UsersInferenceClassificationCreateOverrides")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/inferenceClassification/overrides"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphInferenceClassificationOverride == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphInferenceClassificationOverride is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphInferenceClassificationOverride
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersInferenceClassificationDeleteOverridesRequest struct {
	ctx _context.Context
	ApiService *UsersInferenceClassificationApiService
	userId string
	inferenceClassificationOverrideId string
	ifMatch *string
}

// ETag
func (r ApiUsersInferenceClassificationDeleteOverridesRequest) IfMatch(ifMatch string) ApiUsersInferenceClassificationDeleteOverridesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersInferenceClassificationDeleteOverridesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersInferenceClassificationDeleteOverridesExecute(r)
}

/*
UsersInferenceClassificationDeleteOverrides Delete navigation property overrides for users

A set of overrides for a user to always classify messages from specific senders in certain ways: focused, or other. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param inferenceClassificationOverrideId key: id of inferenceClassificationOverride
 @return ApiUsersInferenceClassificationDeleteOverridesRequest
*/
func (a *UsersInferenceClassificationApiService) UsersInferenceClassificationDeleteOverrides(ctx _context.Context, userId string, inferenceClassificationOverrideId string) ApiUsersInferenceClassificationDeleteOverridesRequest {
	return ApiUsersInferenceClassificationDeleteOverridesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		inferenceClassificationOverrideId: inferenceClassificationOverrideId,
	}
}

// Execute executes the request
func (a *UsersInferenceClassificationApiService) UsersInferenceClassificationDeleteOverridesExecute(r ApiUsersInferenceClassificationDeleteOverridesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersInferenceClassificationApiService.UsersInferenceClassificationDeleteOverrides")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/inferenceClassification/overrides/{inferenceClassificationOverride-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"inferenceClassificationOverride-id"+"}", _neturl.PathEscape(parameterToString(r.inferenceClassificationOverrideId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersInferenceClassificationGetOverridesRequest struct {
	ctx _context.Context
	ApiService *UsersInferenceClassificationApiService
	userId string
	inferenceClassificationOverrideId string
	select_ *[]string
}

// Select properties to be returned
func (r ApiUsersInferenceClassificationGetOverridesRequest) Select_(select_ []string) ApiUsersInferenceClassificationGetOverridesRequest {
	r.select_ = &select_
	return r
}

func (r ApiUsersInferenceClassificationGetOverridesRequest) Execute() (MicrosoftGraphInferenceClassificationOverride, *_nethttp.Response, error) {
	return r.ApiService.UsersInferenceClassificationGetOverridesExecute(r)
}

/*
UsersInferenceClassificationGetOverrides Get overrides from users

A set of overrides for a user to always classify messages from specific senders in certain ways: focused, or other. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param inferenceClassificationOverrideId key: id of inferenceClassificationOverride
 @return ApiUsersInferenceClassificationGetOverridesRequest
*/
func (a *UsersInferenceClassificationApiService) UsersInferenceClassificationGetOverrides(ctx _context.Context, userId string, inferenceClassificationOverrideId string) ApiUsersInferenceClassificationGetOverridesRequest {
	return ApiUsersInferenceClassificationGetOverridesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		inferenceClassificationOverrideId: inferenceClassificationOverrideId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphInferenceClassificationOverride
func (a *UsersInferenceClassificationApiService) UsersInferenceClassificationGetOverridesExecute(r ApiUsersInferenceClassificationGetOverridesRequest) (MicrosoftGraphInferenceClassificationOverride, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphInferenceClassificationOverride
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersInferenceClassificationApiService.UsersInferenceClassificationGetOverrides")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/inferenceClassification/overrides/{inferenceClassificationOverride-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"inferenceClassificationOverride-id"+"}", _neturl.PathEscape(parameterToString(r.inferenceClassificationOverrideId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersInferenceClassificationListOverridesRequest struct {
	ctx _context.Context
	ApiService *UsersInferenceClassificationApiService
	userId string
	top *int32
	skip *int32
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
}

// Show only the first n items
func (r ApiUsersInferenceClassificationListOverridesRequest) Top(top int32) ApiUsersInferenceClassificationListOverridesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersInferenceClassificationListOverridesRequest) Skip(skip int32) ApiUsersInferenceClassificationListOverridesRequest {
	r.skip = &skip
	return r
}
// Filter items by property values
func (r ApiUsersInferenceClassificationListOverridesRequest) Filter(filter string) ApiUsersInferenceClassificationListOverridesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersInferenceClassificationListOverridesRequest) Count(count bool) ApiUsersInferenceClassificationListOverridesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersInferenceClassificationListOverridesRequest) Orderby(orderby []string) ApiUsersInferenceClassificationListOverridesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersInferenceClassificationListOverridesRequest) Select_(select_ []string) ApiUsersInferenceClassificationListOverridesRequest {
	r.select_ = &select_
	return r
}

func (r ApiUsersInferenceClassificationListOverridesRequest) Execute() (CollectionOfInferenceClassificationOverride, *_nethttp.Response, error) {
	return r.ApiService.UsersInferenceClassificationListOverridesExecute(r)
}

/*
UsersInferenceClassificationListOverrides Get overrides from users

A set of overrides for a user to always classify messages from specific senders in certain ways: focused, or other. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersInferenceClassificationListOverridesRequest
*/
func (a *UsersInferenceClassificationApiService) UsersInferenceClassificationListOverrides(ctx _context.Context, userId string) ApiUsersInferenceClassificationListOverridesRequest {
	return ApiUsersInferenceClassificationListOverridesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfInferenceClassificationOverride
func (a *UsersInferenceClassificationApiService) UsersInferenceClassificationListOverridesExecute(r ApiUsersInferenceClassificationListOverridesRequest) (CollectionOfInferenceClassificationOverride, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfInferenceClassificationOverride
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersInferenceClassificationApiService.UsersInferenceClassificationListOverrides")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/inferenceClassification/overrides"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersInferenceClassificationUpdateOverridesRequest struct {
	ctx _context.Context
	ApiService *UsersInferenceClassificationApiService
	userId string
	inferenceClassificationOverrideId string
	microsoftGraphInferenceClassificationOverride *MicrosoftGraphInferenceClassificationOverride
}

// New navigation property values
func (r ApiUsersInferenceClassificationUpdateOverridesRequest) MicrosoftGraphInferenceClassificationOverride(microsoftGraphInferenceClassificationOverride MicrosoftGraphInferenceClassificationOverride) ApiUsersInferenceClassificationUpdateOverridesRequest {
	r.microsoftGraphInferenceClassificationOverride = &microsoftGraphInferenceClassificationOverride
	return r
}

func (r ApiUsersInferenceClassificationUpdateOverridesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersInferenceClassificationUpdateOverridesExecute(r)
}

/*
UsersInferenceClassificationUpdateOverrides Update the navigation property overrides in users

A set of overrides for a user to always classify messages from specific senders in certain ways: focused, or other. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param inferenceClassificationOverrideId key: id of inferenceClassificationOverride
 @return ApiUsersInferenceClassificationUpdateOverridesRequest
*/
func (a *UsersInferenceClassificationApiService) UsersInferenceClassificationUpdateOverrides(ctx _context.Context, userId string, inferenceClassificationOverrideId string) ApiUsersInferenceClassificationUpdateOverridesRequest {
	return ApiUsersInferenceClassificationUpdateOverridesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		inferenceClassificationOverrideId: inferenceClassificationOverrideId,
	}
}

// Execute executes the request
func (a *UsersInferenceClassificationApiService) UsersInferenceClassificationUpdateOverridesExecute(r ApiUsersInferenceClassificationUpdateOverridesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersInferenceClassificationApiService.UsersInferenceClassificationUpdateOverrides")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/inferenceClassification/overrides/{inferenceClassificationOverride-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"inferenceClassificationOverride-id"+"}", _neturl.PathEscape(parameterToString(r.inferenceClassificationOverrideId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphInferenceClassificationOverride == nil {
		return nil, reportError("microsoftGraphInferenceClassificationOverride is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphInferenceClassificationOverride
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersUpdateInferenceClassificationRequest struct {
	ctx _context.Context
	ApiService *UsersInferenceClassificationApiService
	userId string
	microsoftGraphInferenceClassification *MicrosoftGraphInferenceClassification
}

// New navigation property values
func (r ApiUsersUpdateInferenceClassificationRequest) MicrosoftGraphInferenceClassification(microsoftGraphInferenceClassification MicrosoftGraphInferenceClassification) ApiUsersUpdateInferenceClassificationRequest {
	r.microsoftGraphInferenceClassification = &microsoftGraphInferenceClassification
	return r
}

func (r ApiUsersUpdateInferenceClassificationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersUpdateInferenceClassificationExecute(r)
}

/*
UsersUpdateInferenceClassification Update the navigation property inferenceClassification in users

Relevance classification of the user's messages based on explicit designations which override inferred relevance or importance.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUpdateInferenceClassificationRequest
*/
func (a *UsersInferenceClassificationApiService) UsersUpdateInferenceClassification(ctx _context.Context, userId string) ApiUsersUpdateInferenceClassificationRequest {
	return ApiUsersUpdateInferenceClassificationRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
func (a *UsersInferenceClassificationApiService) UsersUpdateInferenceClassificationExecute(r ApiUsersUpdateInferenceClassificationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersInferenceClassificationApiService.UsersUpdateInferenceClassification")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/inferenceClassification"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphInferenceClassification == nil {
		return nil, reportError("microsoftGraphInferenceClassification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphInferenceClassification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
