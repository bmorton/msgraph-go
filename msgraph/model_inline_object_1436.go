/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// InlineObject1436 struct for InlineObject1436
type InlineObject1436 struct {
	NumberF AnyOfobject `json:"numberF,omitempty"`
	NumberS AnyOfobject `json:"numberS,omitempty"`
	ProbabilityS AnyOfobject `json:"probabilityS,omitempty"`
	Cumulative AnyOfobject `json:"cumulative,omitempty"`
}

// NewInlineObject1436 instantiates a new InlineObject1436 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1436() *InlineObject1436 {
	this := InlineObject1436{}
	return &this
}

// NewInlineObject1436WithDefaults instantiates a new InlineObject1436 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1436WithDefaults() *InlineObject1436 {
	this := InlineObject1436{}
	return &this
}

// GetNumberF returns the NumberF field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1436) GetNumberF() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.NumberF
}

// GetNumberFOk returns a tuple with the NumberF field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1436) GetNumberFOk() (*AnyOfobject, bool) {
	if o == nil || o.NumberF == nil {
		return nil, false
	}
	return &o.NumberF, true
}

// HasNumberF returns a boolean if a field has been set.
func (o *InlineObject1436) HasNumberF() bool {
	if o != nil && o.NumberF != nil {
		return true
	}

	return false
}

// SetNumberF gets a reference to the given AnyOfobject and assigns it to the NumberF field.
func (o *InlineObject1436) SetNumberF(v AnyOfobject) {
	o.NumberF = v
}

// GetNumberS returns the NumberS field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1436) GetNumberS() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.NumberS
}

// GetNumberSOk returns a tuple with the NumberS field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1436) GetNumberSOk() (*AnyOfobject, bool) {
	if o == nil || o.NumberS == nil {
		return nil, false
	}
	return &o.NumberS, true
}

// HasNumberS returns a boolean if a field has been set.
func (o *InlineObject1436) HasNumberS() bool {
	if o != nil && o.NumberS != nil {
		return true
	}

	return false
}

// SetNumberS gets a reference to the given AnyOfobject and assigns it to the NumberS field.
func (o *InlineObject1436) SetNumberS(v AnyOfobject) {
	o.NumberS = v
}

// GetProbabilityS returns the ProbabilityS field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1436) GetProbabilityS() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.ProbabilityS
}

// GetProbabilitySOk returns a tuple with the ProbabilityS field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1436) GetProbabilitySOk() (*AnyOfobject, bool) {
	if o == nil || o.ProbabilityS == nil {
		return nil, false
	}
	return &o.ProbabilityS, true
}

// HasProbabilityS returns a boolean if a field has been set.
func (o *InlineObject1436) HasProbabilityS() bool {
	if o != nil && o.ProbabilityS != nil {
		return true
	}

	return false
}

// SetProbabilityS gets a reference to the given AnyOfobject and assigns it to the ProbabilityS field.
func (o *InlineObject1436) SetProbabilityS(v AnyOfobject) {
	o.ProbabilityS = v
}

// GetCumulative returns the Cumulative field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1436) GetCumulative() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Cumulative
}

// GetCumulativeOk returns a tuple with the Cumulative field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1436) GetCumulativeOk() (*AnyOfobject, bool) {
	if o == nil || o.Cumulative == nil {
		return nil, false
	}
	return &o.Cumulative, true
}

// HasCumulative returns a boolean if a field has been set.
func (o *InlineObject1436) HasCumulative() bool {
	if o != nil && o.Cumulative != nil {
		return true
	}

	return false
}

// SetCumulative gets a reference to the given AnyOfobject and assigns it to the Cumulative field.
func (o *InlineObject1436) SetCumulative(v AnyOfobject) {
	o.Cumulative = v
}

func (o InlineObject1436) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumberF != nil {
		toSerialize["numberF"] = o.NumberF
	}
	if o.NumberS != nil {
		toSerialize["numberS"] = o.NumberS
	}
	if o.ProbabilityS != nil {
		toSerialize["probabilityS"] = o.ProbabilityS
	}
	if o.Cumulative != nil {
		toSerialize["cumulative"] = o.Cumulative
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1436 struct {
	value *InlineObject1436
	isSet bool
}

func (v NullableInlineObject1436) Get() *InlineObject1436 {
	return v.value
}

func (v *NullableInlineObject1436) Set(val *InlineObject1436) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1436) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1436) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1436(val *InlineObject1436) *NullableInlineObject1436 {
	return &NullableInlineObject1436{value: val, isSet: true}
}

func (v NullableInlineObject1436) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1436) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


