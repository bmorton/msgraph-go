/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphManagedAppDataStorageLocation Storage locations where managed apps can potentially store their data
type MicrosoftGraphManagedAppDataStorageLocation string

// List of microsoft.graph.managedAppDataStorageLocation
const (
	ONE_DRIVE_FOR_BUSINESS MicrosoftGraphManagedAppDataStorageLocation = "oneDriveForBusiness"
	SHARE_POINT MicrosoftGraphManagedAppDataStorageLocation = "sharePoint"
	BOX MicrosoftGraphManagedAppDataStorageLocation = "box"
	LOCAL_STORAGE MicrosoftGraphManagedAppDataStorageLocation = "localStorage"
)

// All allowed values of MicrosoftGraphManagedAppDataStorageLocation enum
var AllowedMicrosoftGraphManagedAppDataStorageLocationEnumValues = []MicrosoftGraphManagedAppDataStorageLocation{
	"oneDriveForBusiness",
	"sharePoint",
	"box",
	"localStorage",
}

func (v *MicrosoftGraphManagedAppDataStorageLocation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphManagedAppDataStorageLocation(value)
	for _, existing := range AllowedMicrosoftGraphManagedAppDataStorageLocationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphManagedAppDataStorageLocation", value)
}

// NewMicrosoftGraphManagedAppDataStorageLocationFromValue returns a pointer to a valid MicrosoftGraphManagedAppDataStorageLocation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphManagedAppDataStorageLocationFromValue(v string) (*MicrosoftGraphManagedAppDataStorageLocation, error) {
	ev := MicrosoftGraphManagedAppDataStorageLocation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphManagedAppDataStorageLocation: valid values are %v", v, AllowedMicrosoftGraphManagedAppDataStorageLocationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphManagedAppDataStorageLocation) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphManagedAppDataStorageLocationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.managedAppDataStorageLocation value
func (v MicrosoftGraphManagedAppDataStorageLocation) Ptr() *MicrosoftGraphManagedAppDataStorageLocation {
	return &v
}

type NullableMicrosoftGraphManagedAppDataStorageLocation struct {
	value *MicrosoftGraphManagedAppDataStorageLocation
	isSet bool
}

func (v NullableMicrosoftGraphManagedAppDataStorageLocation) Get() *MicrosoftGraphManagedAppDataStorageLocation {
	return v.value
}

func (v *NullableMicrosoftGraphManagedAppDataStorageLocation) Set(val *MicrosoftGraphManagedAppDataStorageLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphManagedAppDataStorageLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphManagedAppDataStorageLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphManagedAppDataStorageLocation(val *MicrosoftGraphManagedAppDataStorageLocation) *NullableMicrosoftGraphManagedAppDataStorageLocation {
	return &NullableMicrosoftGraphManagedAppDataStorageLocation{value: val, isSet: true}
}

func (v NullableMicrosoftGraphManagedAppDataStorageLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphManagedAppDataStorageLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

