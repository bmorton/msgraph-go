/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphAccessPackageSubjectType the model 'MicrosoftGraphAccessPackageSubjectType'
type MicrosoftGraphAccessPackageSubjectType string

// List of microsoft.graph.accessPackageSubjectType
const (
	NOT_SPECIFIED MicrosoftGraphAccessPackageSubjectType = "notSpecified"
	USER MicrosoftGraphAccessPackageSubjectType = "user"
	SERVICE_PRINCIPAL MicrosoftGraphAccessPackageSubjectType = "servicePrincipal"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphAccessPackageSubjectType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphAccessPackageSubjectType enum
var AllowedMicrosoftGraphAccessPackageSubjectTypeEnumValues = []MicrosoftGraphAccessPackageSubjectType{
	"notSpecified",
	"user",
	"servicePrincipal",
	"unknownFutureValue",
}

func (v *MicrosoftGraphAccessPackageSubjectType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphAccessPackageSubjectType(value)
	for _, existing := range AllowedMicrosoftGraphAccessPackageSubjectTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphAccessPackageSubjectType", value)
}

// NewMicrosoftGraphAccessPackageSubjectTypeFromValue returns a pointer to a valid MicrosoftGraphAccessPackageSubjectType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphAccessPackageSubjectTypeFromValue(v string) (*MicrosoftGraphAccessPackageSubjectType, error) {
	ev := MicrosoftGraphAccessPackageSubjectType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphAccessPackageSubjectType: valid values are %v", v, AllowedMicrosoftGraphAccessPackageSubjectTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphAccessPackageSubjectType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphAccessPackageSubjectTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.accessPackageSubjectType value
func (v MicrosoftGraphAccessPackageSubjectType) Ptr() *MicrosoftGraphAccessPackageSubjectType {
	return &v
}

type NullableMicrosoftGraphAccessPackageSubjectType struct {
	value *MicrosoftGraphAccessPackageSubjectType
	isSet bool
}

func (v NullableMicrosoftGraphAccessPackageSubjectType) Get() *MicrosoftGraphAccessPackageSubjectType {
	return v.value
}

func (v *NullableMicrosoftGraphAccessPackageSubjectType) Set(val *MicrosoftGraphAccessPackageSubjectType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphAccessPackageSubjectType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphAccessPackageSubjectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphAccessPackageSubjectType(val *MicrosoftGraphAccessPackageSubjectType) *NullableMicrosoftGraphAccessPackageSubjectType {
	return &NullableMicrosoftGraphAccessPackageSubjectType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphAccessPackageSubjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphAccessPackageSubjectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

