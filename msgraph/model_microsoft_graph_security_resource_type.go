/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphSecurityResourceType the model 'MicrosoftGraphSecurityResourceType'
type MicrosoftGraphSecurityResourceType string

// List of microsoft.graph.securityResourceType
const (
	UNKNOWN MicrosoftGraphSecurityResourceType = "unknown"
	ATTACKED MicrosoftGraphSecurityResourceType = "attacked"
	RELATED MicrosoftGraphSecurityResourceType = "related"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphSecurityResourceType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphSecurityResourceType enum
var AllowedMicrosoftGraphSecurityResourceTypeEnumValues = []MicrosoftGraphSecurityResourceType{
	"unknown",
	"attacked",
	"related",
	"unknownFutureValue",
}

func (v *MicrosoftGraphSecurityResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphSecurityResourceType(value)
	for _, existing := range AllowedMicrosoftGraphSecurityResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphSecurityResourceType", value)
}

// NewMicrosoftGraphSecurityResourceTypeFromValue returns a pointer to a valid MicrosoftGraphSecurityResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphSecurityResourceTypeFromValue(v string) (*MicrosoftGraphSecurityResourceType, error) {
	ev := MicrosoftGraphSecurityResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphSecurityResourceType: valid values are %v", v, AllowedMicrosoftGraphSecurityResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphSecurityResourceType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphSecurityResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.securityResourceType value
func (v MicrosoftGraphSecurityResourceType) Ptr() *MicrosoftGraphSecurityResourceType {
	return &v
}

type NullableMicrosoftGraphSecurityResourceType struct {
	value *MicrosoftGraphSecurityResourceType
	isSet bool
}

func (v NullableMicrosoftGraphSecurityResourceType) Get() *MicrosoftGraphSecurityResourceType {
	return v.value
}

func (v *NullableMicrosoftGraphSecurityResourceType) Set(val *MicrosoftGraphSecurityResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphSecurityResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphSecurityResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphSecurityResourceType(val *MicrosoftGraphSecurityResourceType) *NullableMicrosoftGraphSecurityResourceType {
	return &NullableMicrosoftGraphSecurityResourceType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphSecurityResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphSecurityResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

