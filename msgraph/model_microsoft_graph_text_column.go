/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MicrosoftGraphTextColumn struct for MicrosoftGraphTextColumn
type MicrosoftGraphTextColumn struct {
	// Whether to allow multiple lines of text.
	AllowMultipleLines NullableBool `json:"allowMultipleLines,omitempty"`
	// Whether updates to this column should replace existing text, or append to it.
	AppendChangesToExistingText NullableBool `json:"appendChangesToExistingText,omitempty"`
	// The size of the text box.
	LinesForEditing NullableInt32 `json:"linesForEditing,omitempty"`
	// The maximum number of characters for the value.
	MaxLength NullableInt32 `json:"maxLength,omitempty"`
	// The type of text being stored. Must be one of plain or richText
	TextType NullableString `json:"textType,omitempty"`
}

// NewMicrosoftGraphTextColumn instantiates a new MicrosoftGraphTextColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphTextColumn() *MicrosoftGraphTextColumn {
	this := MicrosoftGraphTextColumn{}
	return &this
}

// NewMicrosoftGraphTextColumnWithDefaults instantiates a new MicrosoftGraphTextColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphTextColumnWithDefaults() *MicrosoftGraphTextColumn {
	this := MicrosoftGraphTextColumn{}
	return &this
}

// GetAllowMultipleLines returns the AllowMultipleLines field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphTextColumn) GetAllowMultipleLines() bool {
	if o == nil || o.AllowMultipleLines.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AllowMultipleLines.Get()
}

// GetAllowMultipleLinesOk returns a tuple with the AllowMultipleLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphTextColumn) GetAllowMultipleLinesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AllowMultipleLines.Get(), o.AllowMultipleLines.IsSet()
}

// HasAllowMultipleLines returns a boolean if a field has been set.
func (o *MicrosoftGraphTextColumn) HasAllowMultipleLines() bool {
	if o != nil && o.AllowMultipleLines.IsSet() {
		return true
	}

	return false
}

// SetAllowMultipleLines gets a reference to the given NullableBool and assigns it to the AllowMultipleLines field.
func (o *MicrosoftGraphTextColumn) SetAllowMultipleLines(v bool) {
	o.AllowMultipleLines.Set(&v)
}
// SetAllowMultipleLinesNil sets the value for AllowMultipleLines to be an explicit nil
func (o *MicrosoftGraphTextColumn) SetAllowMultipleLinesNil() {
	o.AllowMultipleLines.Set(nil)
}

// UnsetAllowMultipleLines ensures that no value is present for AllowMultipleLines, not even an explicit nil
func (o *MicrosoftGraphTextColumn) UnsetAllowMultipleLines() {
	o.AllowMultipleLines.Unset()
}

// GetAppendChangesToExistingText returns the AppendChangesToExistingText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphTextColumn) GetAppendChangesToExistingText() bool {
	if o == nil || o.AppendChangesToExistingText.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AppendChangesToExistingText.Get()
}

// GetAppendChangesToExistingTextOk returns a tuple with the AppendChangesToExistingText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphTextColumn) GetAppendChangesToExistingTextOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppendChangesToExistingText.Get(), o.AppendChangesToExistingText.IsSet()
}

// HasAppendChangesToExistingText returns a boolean if a field has been set.
func (o *MicrosoftGraphTextColumn) HasAppendChangesToExistingText() bool {
	if o != nil && o.AppendChangesToExistingText.IsSet() {
		return true
	}

	return false
}

// SetAppendChangesToExistingText gets a reference to the given NullableBool and assigns it to the AppendChangesToExistingText field.
func (o *MicrosoftGraphTextColumn) SetAppendChangesToExistingText(v bool) {
	o.AppendChangesToExistingText.Set(&v)
}
// SetAppendChangesToExistingTextNil sets the value for AppendChangesToExistingText to be an explicit nil
func (o *MicrosoftGraphTextColumn) SetAppendChangesToExistingTextNil() {
	o.AppendChangesToExistingText.Set(nil)
}

// UnsetAppendChangesToExistingText ensures that no value is present for AppendChangesToExistingText, not even an explicit nil
func (o *MicrosoftGraphTextColumn) UnsetAppendChangesToExistingText() {
	o.AppendChangesToExistingText.Unset()
}

// GetLinesForEditing returns the LinesForEditing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphTextColumn) GetLinesForEditing() int32 {
	if o == nil || o.LinesForEditing.Get() == nil {
		var ret int32
		return ret
	}
	return *o.LinesForEditing.Get()
}

// GetLinesForEditingOk returns a tuple with the LinesForEditing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphTextColumn) GetLinesForEditingOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LinesForEditing.Get(), o.LinesForEditing.IsSet()
}

// HasLinesForEditing returns a boolean if a field has been set.
func (o *MicrosoftGraphTextColumn) HasLinesForEditing() bool {
	if o != nil && o.LinesForEditing.IsSet() {
		return true
	}

	return false
}

// SetLinesForEditing gets a reference to the given NullableInt32 and assigns it to the LinesForEditing field.
func (o *MicrosoftGraphTextColumn) SetLinesForEditing(v int32) {
	o.LinesForEditing.Set(&v)
}
// SetLinesForEditingNil sets the value for LinesForEditing to be an explicit nil
func (o *MicrosoftGraphTextColumn) SetLinesForEditingNil() {
	o.LinesForEditing.Set(nil)
}

// UnsetLinesForEditing ensures that no value is present for LinesForEditing, not even an explicit nil
func (o *MicrosoftGraphTextColumn) UnsetLinesForEditing() {
	o.LinesForEditing.Unset()
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphTextColumn) GetMaxLength() int32 {
	if o == nil || o.MaxLength.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MaxLength.Get()
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphTextColumn) GetMaxLengthOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxLength.Get(), o.MaxLength.IsSet()
}

// HasMaxLength returns a boolean if a field has been set.
func (o *MicrosoftGraphTextColumn) HasMaxLength() bool {
	if o != nil && o.MaxLength.IsSet() {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given NullableInt32 and assigns it to the MaxLength field.
func (o *MicrosoftGraphTextColumn) SetMaxLength(v int32) {
	o.MaxLength.Set(&v)
}
// SetMaxLengthNil sets the value for MaxLength to be an explicit nil
func (o *MicrosoftGraphTextColumn) SetMaxLengthNil() {
	o.MaxLength.Set(nil)
}

// UnsetMaxLength ensures that no value is present for MaxLength, not even an explicit nil
func (o *MicrosoftGraphTextColumn) UnsetMaxLength() {
	o.MaxLength.Unset()
}

// GetTextType returns the TextType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphTextColumn) GetTextType() string {
	if o == nil || o.TextType.Get() == nil {
		var ret string
		return ret
	}
	return *o.TextType.Get()
}

// GetTextTypeOk returns a tuple with the TextType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphTextColumn) GetTextTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TextType.Get(), o.TextType.IsSet()
}

// HasTextType returns a boolean if a field has been set.
func (o *MicrosoftGraphTextColumn) HasTextType() bool {
	if o != nil && o.TextType.IsSet() {
		return true
	}

	return false
}

// SetTextType gets a reference to the given NullableString and assigns it to the TextType field.
func (o *MicrosoftGraphTextColumn) SetTextType(v string) {
	o.TextType.Set(&v)
}
// SetTextTypeNil sets the value for TextType to be an explicit nil
func (o *MicrosoftGraphTextColumn) SetTextTypeNil() {
	o.TextType.Set(nil)
}

// UnsetTextType ensures that no value is present for TextType, not even an explicit nil
func (o *MicrosoftGraphTextColumn) UnsetTextType() {
	o.TextType.Unset()
}

func (o MicrosoftGraphTextColumn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowMultipleLines.IsSet() {
		toSerialize["allowMultipleLines"] = o.AllowMultipleLines.Get()
	}
	if o.AppendChangesToExistingText.IsSet() {
		toSerialize["appendChangesToExistingText"] = o.AppendChangesToExistingText.Get()
	}
	if o.LinesForEditing.IsSet() {
		toSerialize["linesForEditing"] = o.LinesForEditing.Get()
	}
	if o.MaxLength.IsSet() {
		toSerialize["maxLength"] = o.MaxLength.Get()
	}
	if o.TextType.IsSet() {
		toSerialize["textType"] = o.TextType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphTextColumn struct {
	value *MicrosoftGraphTextColumn
	isSet bool
}

func (v NullableMicrosoftGraphTextColumn) Get() *MicrosoftGraphTextColumn {
	return v.value
}

func (v *NullableMicrosoftGraphTextColumn) Set(val *MicrosoftGraphTextColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphTextColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphTextColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphTextColumn(val *MicrosoftGraphTextColumn) *NullableMicrosoftGraphTextColumn {
	return &NullableMicrosoftGraphTextColumn{value: val, isSet: true}
}

func (v NullableMicrosoftGraphTextColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphTextColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


