/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// DeviceManagementPartner Entity which represents a connection to device management partner.
type DeviceManagementPartner struct {
	// Partner display name
	DisplayName NullableString `json:"displayName,omitempty"`
	// Whether device management partner is configured or not
	IsConfigured *bool `json:"isConfigured,omitempty"`
	// Timestamp of last heartbeat after admin enabled option Connect to Device management Partner
	LastHeartbeatDateTime *time.Time `json:"lastHeartbeatDateTime,omitempty"`
	// Partner App type. Possible values are: unknown, singleTenantApp, multiTenantApp.
	PartnerAppType AnyOfmicrosoftGraphDeviceManagementPartnerAppType `json:"partnerAppType,omitempty"`
	// Partner state of this tenant. Possible values are: unknown, unavailable, enabled, terminated, rejected, unresponsive.
	PartnerState AnyOfmicrosoftGraphDeviceManagementPartnerTenantState `json:"partnerState,omitempty"`
	// Partner Single tenant App id
	SingleTenantAppId NullableString `json:"singleTenantAppId,omitempty"`
	// DateTime in UTC when PartnerDevices will be marked as NonCompliant
	WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime NullableTime `json:"whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime,omitempty"`
	// DateTime in UTC when PartnerDevices will be removed
	WhenPartnerDevicesWillBeRemovedDateTime NullableTime `json:"whenPartnerDevicesWillBeRemovedDateTime,omitempty"`
}

// NewDeviceManagementPartner instantiates a new DeviceManagementPartner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceManagementPartner() *DeviceManagementPartner {
	this := DeviceManagementPartner{}
	return &this
}

// NewDeviceManagementPartnerWithDefaults instantiates a new DeviceManagementPartner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceManagementPartnerWithDefaults() *DeviceManagementPartner {
	this := DeviceManagementPartner{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceManagementPartner) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceManagementPartner) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DeviceManagementPartner) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *DeviceManagementPartner) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *DeviceManagementPartner) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *DeviceManagementPartner) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetIsConfigured returns the IsConfigured field value if set, zero value otherwise.
func (o *DeviceManagementPartner) GetIsConfigured() bool {
	if o == nil || o.IsConfigured == nil {
		var ret bool
		return ret
	}
	return *o.IsConfigured
}

// GetIsConfiguredOk returns a tuple with the IsConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceManagementPartner) GetIsConfiguredOk() (*bool, bool) {
	if o == nil || o.IsConfigured == nil {
		return nil, false
	}
	return o.IsConfigured, true
}

// HasIsConfigured returns a boolean if a field has been set.
func (o *DeviceManagementPartner) HasIsConfigured() bool {
	if o != nil && o.IsConfigured != nil {
		return true
	}

	return false
}

// SetIsConfigured gets a reference to the given bool and assigns it to the IsConfigured field.
func (o *DeviceManagementPartner) SetIsConfigured(v bool) {
	o.IsConfigured = &v
}

// GetLastHeartbeatDateTime returns the LastHeartbeatDateTime field value if set, zero value otherwise.
func (o *DeviceManagementPartner) GetLastHeartbeatDateTime() time.Time {
	if o == nil || o.LastHeartbeatDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastHeartbeatDateTime
}

// GetLastHeartbeatDateTimeOk returns a tuple with the LastHeartbeatDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceManagementPartner) GetLastHeartbeatDateTimeOk() (*time.Time, bool) {
	if o == nil || o.LastHeartbeatDateTime == nil {
		return nil, false
	}
	return o.LastHeartbeatDateTime, true
}

// HasLastHeartbeatDateTime returns a boolean if a field has been set.
func (o *DeviceManagementPartner) HasLastHeartbeatDateTime() bool {
	if o != nil && o.LastHeartbeatDateTime != nil {
		return true
	}

	return false
}

// SetLastHeartbeatDateTime gets a reference to the given time.Time and assigns it to the LastHeartbeatDateTime field.
func (o *DeviceManagementPartner) SetLastHeartbeatDateTime(v time.Time) {
	o.LastHeartbeatDateTime = &v
}

// GetPartnerAppType returns the PartnerAppType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceManagementPartner) GetPartnerAppType() AnyOfmicrosoftGraphDeviceManagementPartnerAppType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphDeviceManagementPartnerAppType
		return ret
	}
	return o.PartnerAppType
}

// GetPartnerAppTypeOk returns a tuple with the PartnerAppType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceManagementPartner) GetPartnerAppTypeOk() (*AnyOfmicrosoftGraphDeviceManagementPartnerAppType, bool) {
	if o == nil || o.PartnerAppType == nil {
		return nil, false
	}
	return &o.PartnerAppType, true
}

// HasPartnerAppType returns a boolean if a field has been set.
func (o *DeviceManagementPartner) HasPartnerAppType() bool {
	if o != nil && o.PartnerAppType != nil {
		return true
	}

	return false
}

// SetPartnerAppType gets a reference to the given AnyOfmicrosoftGraphDeviceManagementPartnerAppType and assigns it to the PartnerAppType field.
func (o *DeviceManagementPartner) SetPartnerAppType(v AnyOfmicrosoftGraphDeviceManagementPartnerAppType) {
	o.PartnerAppType = v
}

// GetPartnerState returns the PartnerState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceManagementPartner) GetPartnerState() AnyOfmicrosoftGraphDeviceManagementPartnerTenantState {
	if o == nil  {
		var ret AnyOfmicrosoftGraphDeviceManagementPartnerTenantState
		return ret
	}
	return o.PartnerState
}

// GetPartnerStateOk returns a tuple with the PartnerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceManagementPartner) GetPartnerStateOk() (*AnyOfmicrosoftGraphDeviceManagementPartnerTenantState, bool) {
	if o == nil || o.PartnerState == nil {
		return nil, false
	}
	return &o.PartnerState, true
}

// HasPartnerState returns a boolean if a field has been set.
func (o *DeviceManagementPartner) HasPartnerState() bool {
	if o != nil && o.PartnerState != nil {
		return true
	}

	return false
}

// SetPartnerState gets a reference to the given AnyOfmicrosoftGraphDeviceManagementPartnerTenantState and assigns it to the PartnerState field.
func (o *DeviceManagementPartner) SetPartnerState(v AnyOfmicrosoftGraphDeviceManagementPartnerTenantState) {
	o.PartnerState = v
}

// GetSingleTenantAppId returns the SingleTenantAppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceManagementPartner) GetSingleTenantAppId() string {
	if o == nil || o.SingleTenantAppId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SingleTenantAppId.Get()
}

// GetSingleTenantAppIdOk returns a tuple with the SingleTenantAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceManagementPartner) GetSingleTenantAppIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SingleTenantAppId.Get(), o.SingleTenantAppId.IsSet()
}

// HasSingleTenantAppId returns a boolean if a field has been set.
func (o *DeviceManagementPartner) HasSingleTenantAppId() bool {
	if o != nil && o.SingleTenantAppId.IsSet() {
		return true
	}

	return false
}

// SetSingleTenantAppId gets a reference to the given NullableString and assigns it to the SingleTenantAppId field.
func (o *DeviceManagementPartner) SetSingleTenantAppId(v string) {
	o.SingleTenantAppId.Set(&v)
}
// SetSingleTenantAppIdNil sets the value for SingleTenantAppId to be an explicit nil
func (o *DeviceManagementPartner) SetSingleTenantAppIdNil() {
	o.SingleTenantAppId.Set(nil)
}

// UnsetSingleTenantAppId ensures that no value is present for SingleTenantAppId, not even an explicit nil
func (o *DeviceManagementPartner) UnsetSingleTenantAppId() {
	o.SingleTenantAppId.Unset()
}

// GetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime returns the WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceManagementPartner) GetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime() time.Time {
	if o == nil || o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.Get()
}

// GetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTimeOk returns a tuple with the WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceManagementPartner) GetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.Get(), o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.IsSet()
}

// HasWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime returns a boolean if a field has been set.
func (o *DeviceManagementPartner) HasWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime() bool {
	if o != nil && o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.IsSet() {
		return true
	}

	return false
}

// SetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime gets a reference to the given NullableTime and assigns it to the WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime field.
func (o *DeviceManagementPartner) SetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime(v time.Time) {
	o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.Set(&v)
}
// SetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTimeNil sets the value for WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime to be an explicit nil
func (o *DeviceManagementPartner) SetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTimeNil() {
	o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.Set(nil)
}

// UnsetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime ensures that no value is present for WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime, not even an explicit nil
func (o *DeviceManagementPartner) UnsetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime() {
	o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.Unset()
}

// GetWhenPartnerDevicesWillBeRemovedDateTime returns the WhenPartnerDevicesWillBeRemovedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceManagementPartner) GetWhenPartnerDevicesWillBeRemovedDateTime() time.Time {
	if o == nil || o.WhenPartnerDevicesWillBeRemovedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.WhenPartnerDevicesWillBeRemovedDateTime.Get()
}

// GetWhenPartnerDevicesWillBeRemovedDateTimeOk returns a tuple with the WhenPartnerDevicesWillBeRemovedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceManagementPartner) GetWhenPartnerDevicesWillBeRemovedDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WhenPartnerDevicesWillBeRemovedDateTime.Get(), o.WhenPartnerDevicesWillBeRemovedDateTime.IsSet()
}

// HasWhenPartnerDevicesWillBeRemovedDateTime returns a boolean if a field has been set.
func (o *DeviceManagementPartner) HasWhenPartnerDevicesWillBeRemovedDateTime() bool {
	if o != nil && o.WhenPartnerDevicesWillBeRemovedDateTime.IsSet() {
		return true
	}

	return false
}

// SetWhenPartnerDevicesWillBeRemovedDateTime gets a reference to the given NullableTime and assigns it to the WhenPartnerDevicesWillBeRemovedDateTime field.
func (o *DeviceManagementPartner) SetWhenPartnerDevicesWillBeRemovedDateTime(v time.Time) {
	o.WhenPartnerDevicesWillBeRemovedDateTime.Set(&v)
}
// SetWhenPartnerDevicesWillBeRemovedDateTimeNil sets the value for WhenPartnerDevicesWillBeRemovedDateTime to be an explicit nil
func (o *DeviceManagementPartner) SetWhenPartnerDevicesWillBeRemovedDateTimeNil() {
	o.WhenPartnerDevicesWillBeRemovedDateTime.Set(nil)
}

// UnsetWhenPartnerDevicesWillBeRemovedDateTime ensures that no value is present for WhenPartnerDevicesWillBeRemovedDateTime, not even an explicit nil
func (o *DeviceManagementPartner) UnsetWhenPartnerDevicesWillBeRemovedDateTime() {
	o.WhenPartnerDevicesWillBeRemovedDateTime.Unset()
}

func (o DeviceManagementPartner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.IsConfigured != nil {
		toSerialize["isConfigured"] = o.IsConfigured
	}
	if o.LastHeartbeatDateTime != nil {
		toSerialize["lastHeartbeatDateTime"] = o.LastHeartbeatDateTime
	}
	if o.PartnerAppType != nil {
		toSerialize["partnerAppType"] = o.PartnerAppType
	}
	if o.PartnerState != nil {
		toSerialize["partnerState"] = o.PartnerState
	}
	if o.SingleTenantAppId.IsSet() {
		toSerialize["singleTenantAppId"] = o.SingleTenantAppId.Get()
	}
	if o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.IsSet() {
		toSerialize["whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime"] = o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.Get()
	}
	if o.WhenPartnerDevicesWillBeRemovedDateTime.IsSet() {
		toSerialize["whenPartnerDevicesWillBeRemovedDateTime"] = o.WhenPartnerDevicesWillBeRemovedDateTime.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceManagementPartner struct {
	value *DeviceManagementPartner
	isSet bool
}

func (v NullableDeviceManagementPartner) Get() *DeviceManagementPartner {
	return v.value
}

func (v *NullableDeviceManagementPartner) Set(val *DeviceManagementPartner) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceManagementPartner) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceManagementPartner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceManagementPartner(val *DeviceManagementPartner) *NullableDeviceManagementPartner {
	return &NullableDeviceManagementPartner{value: val, isSet: true}
}

func (v NullableDeviceManagementPartner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceManagementPartner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


