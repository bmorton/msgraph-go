/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ChatsTeamsTabApiService ChatsTeamsTabApi service
type ChatsTeamsTabApiService service

type ApiChatsCreateTabsRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsTabApiService
	chatId string
	microsoftGraphTeamsTab *MicrosoftGraphTeamsTab
}

// New navigation property
func (r ApiChatsCreateTabsRequest) MicrosoftGraphTeamsTab(microsoftGraphTeamsTab MicrosoftGraphTeamsTab) ApiChatsCreateTabsRequest {
	r.microsoftGraphTeamsTab = &microsoftGraphTeamsTab
	return r
}

func (r ApiChatsCreateTabsRequest) Execute() (MicrosoftGraphTeamsTab, *_nethttp.Response, error) {
	return r.ApiService.ChatsCreateTabsExecute(r)
}

/*
ChatsCreateTabs Create new navigation property to tabs for chats

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @return ApiChatsCreateTabsRequest
*/
func (a *ChatsTeamsTabApiService) ChatsCreateTabs(ctx _context.Context, chatId string) ApiChatsCreateTabsRequest {
	return ApiChatsCreateTabsRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamsTab
func (a *ChatsTeamsTabApiService) ChatsCreateTabsExecute(r ApiChatsCreateTabsRequest) (MicrosoftGraphTeamsTab, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamsTab
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsTabApiService.ChatsCreateTabs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/tabs"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTeamsTab == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphTeamsTab is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTeamsTab
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatsDeleteTabsRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsTabApiService
	chatId string
	teamsTabId string
	ifMatch *string
}

// ETag
func (r ApiChatsDeleteTabsRequest) IfMatch(ifMatch string) ApiChatsDeleteTabsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiChatsDeleteTabsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ChatsDeleteTabsExecute(r)
}

/*
ChatsDeleteTabs Delete navigation property tabs for chats

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsTabId key: id of teamsTab
 @return ApiChatsDeleteTabsRequest
*/
func (a *ChatsTeamsTabApiService) ChatsDeleteTabs(ctx _context.Context, chatId string, teamsTabId string) ApiChatsDeleteTabsRequest {
	return ApiChatsDeleteTabsRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsTabId: teamsTabId,
	}
}

// Execute executes the request
func (a *ChatsTeamsTabApiService) ChatsDeleteTabsExecute(r ApiChatsDeleteTabsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsTabApiService.ChatsDeleteTabs")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/tabs/{teamsTab-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsTab-id"+"}", _neturl.PathEscape(parameterToString(r.teamsTabId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChatsGetTabsRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsTabApiService
	chatId string
	teamsTabId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiChatsGetTabsRequest) Select_(select_ []string) ApiChatsGetTabsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiChatsGetTabsRequest) Expand(expand []string) ApiChatsGetTabsRequest {
	r.expand = &expand
	return r
}

func (r ApiChatsGetTabsRequest) Execute() (MicrosoftGraphTeamsTab, *_nethttp.Response, error) {
	return r.ApiService.ChatsGetTabsExecute(r)
}

/*
ChatsGetTabs Get tabs from chats

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsTabId key: id of teamsTab
 @return ApiChatsGetTabsRequest
*/
func (a *ChatsTeamsTabApiService) ChatsGetTabs(ctx _context.Context, chatId string, teamsTabId string) ApiChatsGetTabsRequest {
	return ApiChatsGetTabsRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsTabId: teamsTabId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamsTab
func (a *ChatsTeamsTabApiService) ChatsGetTabsExecute(r ApiChatsGetTabsRequest) (MicrosoftGraphTeamsTab, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamsTab
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsTabApiService.ChatsGetTabs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/tabs/{teamsTab-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsTab-id"+"}", _neturl.PathEscape(parameterToString(r.teamsTabId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatsListTabsRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsTabApiService
	chatId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiChatsListTabsRequest) Top(top int32) ApiChatsListTabsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiChatsListTabsRequest) Skip(skip int32) ApiChatsListTabsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiChatsListTabsRequest) Search(search string) ApiChatsListTabsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiChatsListTabsRequest) Filter(filter string) ApiChatsListTabsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiChatsListTabsRequest) Count(count bool) ApiChatsListTabsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiChatsListTabsRequest) Orderby(orderby []string) ApiChatsListTabsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiChatsListTabsRequest) Select_(select_ []string) ApiChatsListTabsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiChatsListTabsRequest) Expand(expand []string) ApiChatsListTabsRequest {
	r.expand = &expand
	return r
}

func (r ApiChatsListTabsRequest) Execute() (CollectionOfTeamsTab, *_nethttp.Response, error) {
	return r.ApiService.ChatsListTabsExecute(r)
}

/*
ChatsListTabs Get tabs from chats

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @return ApiChatsListTabsRequest
*/
func (a *ChatsTeamsTabApiService) ChatsListTabs(ctx _context.Context, chatId string) ApiChatsListTabsRequest {
	return ApiChatsListTabsRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
	}
}

// Execute executes the request
//  @return CollectionOfTeamsTab
func (a *ChatsTeamsTabApiService) ChatsListTabsExecute(r ApiChatsListTabsRequest) (CollectionOfTeamsTab, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfTeamsTab
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsTabApiService.ChatsListTabs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/tabs"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatsTabsDeleteRefTeamsAppRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsTabApiService
	chatId string
	teamsTabId string
	ifMatch *string
}

// ETag
func (r ApiChatsTabsDeleteRefTeamsAppRequest) IfMatch(ifMatch string) ApiChatsTabsDeleteRefTeamsAppRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiChatsTabsDeleteRefTeamsAppRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ChatsTabsDeleteRefTeamsAppExecute(r)
}

/*
ChatsTabsDeleteRefTeamsApp Delete ref of navigation property teamsApp for chats

The application that is linked to the tab. This cannot be changed after tab creation.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsTabId key: id of teamsTab
 @return ApiChatsTabsDeleteRefTeamsAppRequest
*/
func (a *ChatsTeamsTabApiService) ChatsTabsDeleteRefTeamsApp(ctx _context.Context, chatId string, teamsTabId string) ApiChatsTabsDeleteRefTeamsAppRequest {
	return ApiChatsTabsDeleteRefTeamsAppRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsTabId: teamsTabId,
	}
}

// Execute executes the request
func (a *ChatsTeamsTabApiService) ChatsTabsDeleteRefTeamsAppExecute(r ApiChatsTabsDeleteRefTeamsAppRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsTabApiService.ChatsTabsDeleteRefTeamsApp")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/tabs/{teamsTab-id}/teamsApp/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsTab-id"+"}", _neturl.PathEscape(parameterToString(r.teamsTabId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChatsTabsGetRefTeamsAppRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsTabApiService
	chatId string
	teamsTabId string
}


func (r ApiChatsTabsGetRefTeamsAppRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ChatsTabsGetRefTeamsAppExecute(r)
}

/*
ChatsTabsGetRefTeamsApp Get ref of teamsApp from chats

The application that is linked to the tab. This cannot be changed after tab creation.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsTabId key: id of teamsTab
 @return ApiChatsTabsGetRefTeamsAppRequest
*/
func (a *ChatsTeamsTabApiService) ChatsTabsGetRefTeamsApp(ctx _context.Context, chatId string, teamsTabId string) ApiChatsTabsGetRefTeamsAppRequest {
	return ApiChatsTabsGetRefTeamsAppRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsTabId: teamsTabId,
	}
}

// Execute executes the request
//  @return string
func (a *ChatsTeamsTabApiService) ChatsTabsGetRefTeamsAppExecute(r ApiChatsTabsGetRefTeamsAppRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsTabApiService.ChatsTabsGetRefTeamsApp")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/tabs/{teamsTab-id}/teamsApp/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsTab-id"+"}", _neturl.PathEscape(parameterToString(r.teamsTabId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatsTabsGetTeamsAppRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsTabApiService
	chatId string
	teamsTabId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiChatsTabsGetTeamsAppRequest) Select_(select_ []string) ApiChatsTabsGetTeamsAppRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiChatsTabsGetTeamsAppRequest) Expand(expand []string) ApiChatsTabsGetTeamsAppRequest {
	r.expand = &expand
	return r
}

func (r ApiChatsTabsGetTeamsAppRequest) Execute() (MicrosoftGraphTeamsApp, *_nethttp.Response, error) {
	return r.ApiService.ChatsTabsGetTeamsAppExecute(r)
}

/*
ChatsTabsGetTeamsApp Get teamsApp from chats

The application that is linked to the tab. This cannot be changed after tab creation.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsTabId key: id of teamsTab
 @return ApiChatsTabsGetTeamsAppRequest
*/
func (a *ChatsTeamsTabApiService) ChatsTabsGetTeamsApp(ctx _context.Context, chatId string, teamsTabId string) ApiChatsTabsGetTeamsAppRequest {
	return ApiChatsTabsGetTeamsAppRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsTabId: teamsTabId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamsApp
func (a *ChatsTeamsTabApiService) ChatsTabsGetTeamsAppExecute(r ApiChatsTabsGetTeamsAppRequest) (MicrosoftGraphTeamsApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamsApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsTabApiService.ChatsTabsGetTeamsApp")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/tabs/{teamsTab-id}/teamsApp"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsTab-id"+"}", _neturl.PathEscape(parameterToString(r.teamsTabId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatsTabsUpdateRefTeamsAppRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsTabApiService
	chatId string
	teamsTabId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref values
func (r ApiChatsTabsUpdateRefTeamsAppRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiChatsTabsUpdateRefTeamsAppRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiChatsTabsUpdateRefTeamsAppRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ChatsTabsUpdateRefTeamsAppExecute(r)
}

/*
ChatsTabsUpdateRefTeamsApp Update the ref of navigation property teamsApp in chats

The application that is linked to the tab. This cannot be changed after tab creation.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsTabId key: id of teamsTab
 @return ApiChatsTabsUpdateRefTeamsAppRequest
*/
func (a *ChatsTeamsTabApiService) ChatsTabsUpdateRefTeamsApp(ctx _context.Context, chatId string, teamsTabId string) ApiChatsTabsUpdateRefTeamsAppRequest {
	return ApiChatsTabsUpdateRefTeamsAppRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsTabId: teamsTabId,
	}
}

// Execute executes the request
func (a *ChatsTeamsTabApiService) ChatsTabsUpdateRefTeamsAppExecute(r ApiChatsTabsUpdateRefTeamsAppRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsTabApiService.ChatsTabsUpdateRefTeamsApp")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/tabs/{teamsTab-id}/teamsApp/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsTab-id"+"}", _neturl.PathEscape(parameterToString(r.teamsTabId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChatsUpdateTabsRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsTabApiService
	chatId string
	teamsTabId string
	microsoftGraphTeamsTab *MicrosoftGraphTeamsTab
}

// New navigation property values
func (r ApiChatsUpdateTabsRequest) MicrosoftGraphTeamsTab(microsoftGraphTeamsTab MicrosoftGraphTeamsTab) ApiChatsUpdateTabsRequest {
	r.microsoftGraphTeamsTab = &microsoftGraphTeamsTab
	return r
}

func (r ApiChatsUpdateTabsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ChatsUpdateTabsExecute(r)
}

/*
ChatsUpdateTabs Update the navigation property tabs in chats

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsTabId key: id of teamsTab
 @return ApiChatsUpdateTabsRequest
*/
func (a *ChatsTeamsTabApiService) ChatsUpdateTabs(ctx _context.Context, chatId string, teamsTabId string) ApiChatsUpdateTabsRequest {
	return ApiChatsUpdateTabsRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsTabId: teamsTabId,
	}
}

// Execute executes the request
func (a *ChatsTeamsTabApiService) ChatsUpdateTabsExecute(r ApiChatsUpdateTabsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsTabApiService.ChatsUpdateTabs")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/tabs/{teamsTab-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsTab-id"+"}", _neturl.PathEscape(parameterToString(r.teamsTabId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTeamsTab == nil {
		return nil, reportError("microsoftGraphTeamsTab is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTeamsTab
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
