/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DetectedApp A managed or unmanaged app that is installed on a managed device. Unmanaged apps will only appear for devices marked as corporate owned.
type DetectedApp struct {
	// The number of devices that have installed this application
	DeviceCount *int32 `json:"deviceCount,omitempty"`
	// Name of the discovered application. Read-only
	DisplayName NullableString `json:"displayName,omitempty"`
	// Discovered application size in bytes. Read-only
	SizeInByte *int64 `json:"sizeInByte,omitempty"`
	// Version of the discovered application. Read-only
	Version NullableString `json:"version,omitempty"`
	// The devices that have the discovered application installed
	ManagedDevices *[]MicrosoftGraphManagedDevice `json:"managedDevices,omitempty"`
}

// NewDetectedApp instantiates a new DetectedApp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetectedApp() *DetectedApp {
	this := DetectedApp{}
	return &this
}

// NewDetectedAppWithDefaults instantiates a new DetectedApp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetectedAppWithDefaults() *DetectedApp {
	this := DetectedApp{}
	return &this
}

// GetDeviceCount returns the DeviceCount field value if set, zero value otherwise.
func (o *DetectedApp) GetDeviceCount() int32 {
	if o == nil || o.DeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.DeviceCount
}

// GetDeviceCountOk returns a tuple with the DeviceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedApp) GetDeviceCountOk() (*int32, bool) {
	if o == nil || o.DeviceCount == nil {
		return nil, false
	}
	return o.DeviceCount, true
}

// HasDeviceCount returns a boolean if a field has been set.
func (o *DetectedApp) HasDeviceCount() bool {
	if o != nil && o.DeviceCount != nil {
		return true
	}

	return false
}

// SetDeviceCount gets a reference to the given int32 and assigns it to the DeviceCount field.
func (o *DetectedApp) SetDeviceCount(v int32) {
	o.DeviceCount = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DetectedApp) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DetectedApp) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DetectedApp) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *DetectedApp) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *DetectedApp) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *DetectedApp) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetSizeInByte returns the SizeInByte field value if set, zero value otherwise.
func (o *DetectedApp) GetSizeInByte() int64 {
	if o == nil || o.SizeInByte == nil {
		var ret int64
		return ret
	}
	return *o.SizeInByte
}

// GetSizeInByteOk returns a tuple with the SizeInByte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedApp) GetSizeInByteOk() (*int64, bool) {
	if o == nil || o.SizeInByte == nil {
		return nil, false
	}
	return o.SizeInByte, true
}

// HasSizeInByte returns a boolean if a field has been set.
func (o *DetectedApp) HasSizeInByte() bool {
	if o != nil && o.SizeInByte != nil {
		return true
	}

	return false
}

// SetSizeInByte gets a reference to the given int64 and assigns it to the SizeInByte field.
func (o *DetectedApp) SetSizeInByte(v int64) {
	o.SizeInByte = &v
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DetectedApp) GetVersion() string {
	if o == nil || o.Version.Get() == nil {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DetectedApp) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *DetectedApp) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *DetectedApp) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *DetectedApp) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *DetectedApp) UnsetVersion() {
	o.Version.Unset()
}

// GetManagedDevices returns the ManagedDevices field value if set, zero value otherwise.
func (o *DetectedApp) GetManagedDevices() []MicrosoftGraphManagedDevice {
	if o == nil || o.ManagedDevices == nil {
		var ret []MicrosoftGraphManagedDevice
		return ret
	}
	return *o.ManagedDevices
}

// GetManagedDevicesOk returns a tuple with the ManagedDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedApp) GetManagedDevicesOk() (*[]MicrosoftGraphManagedDevice, bool) {
	if o == nil || o.ManagedDevices == nil {
		return nil, false
	}
	return o.ManagedDevices, true
}

// HasManagedDevices returns a boolean if a field has been set.
func (o *DetectedApp) HasManagedDevices() bool {
	if o != nil && o.ManagedDevices != nil {
		return true
	}

	return false
}

// SetManagedDevices gets a reference to the given []MicrosoftGraphManagedDevice and assigns it to the ManagedDevices field.
func (o *DetectedApp) SetManagedDevices(v []MicrosoftGraphManagedDevice) {
	o.ManagedDevices = &v
}

func (o DetectedApp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceCount != nil {
		toSerialize["deviceCount"] = o.DeviceCount
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.SizeInByte != nil {
		toSerialize["sizeInByte"] = o.SizeInByte
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.ManagedDevices != nil {
		toSerialize["managedDevices"] = o.ManagedDevices
	}
	return json.Marshal(toSerialize)
}

type NullableDetectedApp struct {
	value *DetectedApp
	isSet bool
}

func (v NullableDetectedApp) Get() *DetectedApp {
	return v.value
}

func (v *NullableDetectedApp) Set(val *DetectedApp) {
	v.value = val
	v.isSet = true
}

func (v NullableDetectedApp) IsSet() bool {
	return v.isSet
}

func (v *NullableDetectedApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetectedApp(val *DetectedApp) *NullableDetectedApp {
	return &NullableDetectedApp{value: val, isSet: true}
}

func (v NullableDetectedApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetectedApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


