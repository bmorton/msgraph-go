/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AgreementsAgreementApiService AgreementsAgreementApi service
type AgreementsAgreementApiService service

type ApiAgreementsAgreementCreateAgreementRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementApiService
	microsoftGraphAgreement *MicrosoftGraphAgreement
}

// New entity
func (r ApiAgreementsAgreementCreateAgreementRequest) MicrosoftGraphAgreement(microsoftGraphAgreement MicrosoftGraphAgreement) ApiAgreementsAgreementCreateAgreementRequest {
	r.microsoftGraphAgreement = &microsoftGraphAgreement
	return r
}

func (r ApiAgreementsAgreementCreateAgreementRequest) Execute() (MicrosoftGraphAgreement, *_nethttp.Response, error) {
	return r.ApiService.AgreementsAgreementCreateAgreementExecute(r)
}

/*
AgreementsAgreementCreateAgreement Add new entity to agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAgreementsAgreementCreateAgreementRequest
*/
func (a *AgreementsAgreementApiService) AgreementsAgreementCreateAgreement(ctx _context.Context) ApiAgreementsAgreementCreateAgreementRequest {
	return ApiAgreementsAgreementCreateAgreementRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAgreement
func (a *AgreementsAgreementApiService) AgreementsAgreementCreateAgreementExecute(r ApiAgreementsAgreementCreateAgreementRequest) (MicrosoftGraphAgreement, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAgreement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementApiService.AgreementsAgreementCreateAgreement")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAgreement == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAgreement is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAgreement
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsAgreementDeleteAgreementRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementApiService
	agreementId string
	ifMatch *string
}

// ETag
func (r ApiAgreementsAgreementDeleteAgreementRequest) IfMatch(ifMatch string) ApiAgreementsAgreementDeleteAgreementRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiAgreementsAgreementDeleteAgreementRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AgreementsAgreementDeleteAgreementExecute(r)
}

/*
AgreementsAgreementDeleteAgreement Delete entity from agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @return ApiAgreementsAgreementDeleteAgreementRequest
*/
func (a *AgreementsAgreementApiService) AgreementsAgreementDeleteAgreement(ctx _context.Context, agreementId string) ApiAgreementsAgreementDeleteAgreementRequest {
	return ApiAgreementsAgreementDeleteAgreementRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
	}
}

// Execute executes the request
func (a *AgreementsAgreementApiService) AgreementsAgreementDeleteAgreementExecute(r ApiAgreementsAgreementDeleteAgreementRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementApiService.AgreementsAgreementDeleteAgreement")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAgreementsAgreementGetAgreementRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementApiService
	agreementId string
	select_ *[]string
}

// Select properties to be returned
func (r ApiAgreementsAgreementGetAgreementRequest) Select_(select_ []string) ApiAgreementsAgreementGetAgreementRequest {
	r.select_ = &select_
	return r
}

func (r ApiAgreementsAgreementGetAgreementRequest) Execute() (MicrosoftGraphAgreement, *_nethttp.Response, error) {
	return r.ApiService.AgreementsAgreementGetAgreementExecute(r)
}

/*
AgreementsAgreementGetAgreement Get entity from agreements by key

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @return ApiAgreementsAgreementGetAgreementRequest
*/
func (a *AgreementsAgreementApiService) AgreementsAgreementGetAgreement(ctx _context.Context, agreementId string) ApiAgreementsAgreementGetAgreementRequest {
	return ApiAgreementsAgreementGetAgreementRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAgreement
func (a *AgreementsAgreementApiService) AgreementsAgreementGetAgreementExecute(r ApiAgreementsAgreementGetAgreementRequest) (MicrosoftGraphAgreement, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAgreement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementApiService.AgreementsAgreementGetAgreement")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsAgreementListAgreementRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementApiService
	search *string
	select_ *[]string
}

// Search items by search phrases
func (r ApiAgreementsAgreementListAgreementRequest) Search(search string) ApiAgreementsAgreementListAgreementRequest {
	r.search = &search
	return r
}
// Select properties to be returned
func (r ApiAgreementsAgreementListAgreementRequest) Select_(select_ []string) ApiAgreementsAgreementListAgreementRequest {
	r.select_ = &select_
	return r
}

func (r ApiAgreementsAgreementListAgreementRequest) Execute() (CollectionOfAgreement, *_nethttp.Response, error) {
	return r.ApiService.AgreementsAgreementListAgreementExecute(r)
}

/*
AgreementsAgreementListAgreement Get entities from agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAgreementsAgreementListAgreementRequest
*/
func (a *AgreementsAgreementApiService) AgreementsAgreementListAgreement(ctx _context.Context) ApiAgreementsAgreementListAgreementRequest {
	return ApiAgreementsAgreementListAgreementRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfAgreement
func (a *AgreementsAgreementApiService) AgreementsAgreementListAgreementExecute(r ApiAgreementsAgreementListAgreementRequest) (CollectionOfAgreement, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAgreement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementApiService.AgreementsAgreementListAgreement")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsAgreementUpdateAgreementRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementApiService
	agreementId string
	microsoftGraphAgreement *MicrosoftGraphAgreement
}

// New property values
func (r ApiAgreementsAgreementUpdateAgreementRequest) MicrosoftGraphAgreement(microsoftGraphAgreement MicrosoftGraphAgreement) ApiAgreementsAgreementUpdateAgreementRequest {
	r.microsoftGraphAgreement = &microsoftGraphAgreement
	return r
}

func (r ApiAgreementsAgreementUpdateAgreementRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AgreementsAgreementUpdateAgreementExecute(r)
}

/*
AgreementsAgreementUpdateAgreement Update entity in agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @return ApiAgreementsAgreementUpdateAgreementRequest
*/
func (a *AgreementsAgreementApiService) AgreementsAgreementUpdateAgreement(ctx _context.Context, agreementId string) ApiAgreementsAgreementUpdateAgreementRequest {
	return ApiAgreementsAgreementUpdateAgreementRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
	}
}

// Execute executes the request
func (a *AgreementsAgreementApiService) AgreementsAgreementUpdateAgreementExecute(r ApiAgreementsAgreementUpdateAgreementRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementApiService.AgreementsAgreementUpdateAgreement")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAgreement == nil {
		return nil, reportError("microsoftGraphAgreement is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAgreement
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
