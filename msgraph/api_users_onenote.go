/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
)

// Linger please
var (
	_ _context.Context
)

// UsersOnenoteApiService UsersOnenoteApi service
type UsersOnenoteApiService service

type ApiUsersDeleteOnenoteRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	ifMatch *string
}

// ETag
func (r ApiUsersDeleteOnenoteRequest) IfMatch(ifMatch string) ApiUsersDeleteOnenoteRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersDeleteOnenoteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersDeleteOnenoteExecute(r)
}

/*
UsersDeleteOnenote Delete navigation property onenote for users

Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersDeleteOnenoteRequest
*/
func (a *UsersOnenoteApiService) UsersDeleteOnenote(ctx _context.Context, userId string) ApiUsersDeleteOnenoteRequest {
	return ApiUsersDeleteOnenoteRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersDeleteOnenoteExecute(r ApiUsersDeleteOnenoteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersDeleteOnenote")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersGetOnenoteRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersGetOnenoteRequest) Select_(select_ []string) ApiUsersGetOnenoteRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersGetOnenoteRequest) Expand(expand []string) ApiUsersGetOnenoteRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersGetOnenoteRequest) Execute() (MicrosoftGraphOnenote, *_nethttp.Response, error) {
	return r.ApiService.UsersGetOnenoteExecute(r)
}

/*
UsersGetOnenote Get onenote from users

Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersGetOnenoteRequest
*/
func (a *UsersOnenoteApiService) UsersGetOnenote(ctx _context.Context, userId string) ApiUsersGetOnenoteRequest {
	return ApiUsersGetOnenoteRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenote
func (a *UsersOnenoteApiService) UsersGetOnenoteExecute(r ApiUsersGetOnenoteRequest) (MicrosoftGraphOnenote, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersGetOnenote")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteCreateNotebooksRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property
func (r ApiUsersOnenoteCreateNotebooksRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteCreateNotebooksRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteCreateNotebooksRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteCreateNotebooksExecute(r)
}

/*
UsersOnenoteCreateNotebooks Create new navigation property to notebooks for users

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersOnenoteCreateNotebooksRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteCreateNotebooks(ctx _context.Context, userId string) ApiUsersOnenoteCreateNotebooksRequest {
	return ApiUsersOnenoteCreateNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteCreateNotebooksExecute(r ApiUsersOnenoteCreateNotebooksRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteCreateNotebooks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteCreateOperationsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	microsoftGraphOnenoteOperation *MicrosoftGraphOnenoteOperation
}

// New navigation property
func (r ApiUsersOnenoteCreateOperationsRequest) MicrosoftGraphOnenoteOperation(microsoftGraphOnenoteOperation MicrosoftGraphOnenoteOperation) ApiUsersOnenoteCreateOperationsRequest {
	r.microsoftGraphOnenoteOperation = &microsoftGraphOnenoteOperation
	return r
}

func (r ApiUsersOnenoteCreateOperationsRequest) Execute() (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteCreateOperationsExecute(r)
}

/*
UsersOnenoteCreateOperations Create new navigation property to operations for users

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersOnenoteCreateOperationsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteCreateOperations(ctx _context.Context, userId string) ApiUsersOnenoteCreateOperationsRequest {
	return ApiUsersOnenoteCreateOperationsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteOperation
func (a *UsersOnenoteApiService) UsersOnenoteCreateOperationsExecute(r ApiUsersOnenoteCreateOperationsRequest) (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteCreateOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/operations"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteOperation == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteCreatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiUsersOnenoteCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenoteCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenoteCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteCreatePagesExecute(r)
}

/*
UsersOnenoteCreatePages Create new navigation property to pages for users

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersOnenoteCreatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteCreatePages(ctx _context.Context, userId string) ApiUsersOnenoteCreatePagesRequest {
	return ApiUsersOnenoteCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteCreatePagesExecute(r ApiUsersOnenoteCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteCreateResourcesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	microsoftGraphOnenoteResource *MicrosoftGraphOnenoteResource
}

// New navigation property
func (r ApiUsersOnenoteCreateResourcesRequest) MicrosoftGraphOnenoteResource(microsoftGraphOnenoteResource MicrosoftGraphOnenoteResource) ApiUsersOnenoteCreateResourcesRequest {
	r.microsoftGraphOnenoteResource = &microsoftGraphOnenoteResource
	return r
}

func (r ApiUsersOnenoteCreateResourcesRequest) Execute() (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteCreateResourcesExecute(r)
}

/*
UsersOnenoteCreateResources Create new navigation property to resources for users

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersOnenoteCreateResourcesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteCreateResources(ctx _context.Context, userId string) ApiUsersOnenoteCreateResourcesRequest {
	return ApiUsersOnenoteCreateResourcesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteResource
func (a *UsersOnenoteApiService) UsersOnenoteCreateResourcesExecute(r ApiUsersOnenoteCreateResourcesRequest) (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteCreateResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteResource == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenoteCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteCreateSectionGroupsExecute(r)
}

/*
UsersOnenoteCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersOnenoteCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteCreateSectionGroups(ctx _context.Context, userId string) ApiUsersOnenoteCreateSectionGroupsRequest {
	return ApiUsersOnenoteCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteCreateSectionGroupsExecute(r ApiUsersOnenoteCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenoteCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteCreateSectionsExecute(r)
}

/*
UsersOnenoteCreateSections Create new navigation property to sections for users

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersOnenoteCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteCreateSections(ctx _context.Context, userId string) ApiUsersOnenoteCreateSectionsRequest {
	return ApiUsersOnenoteCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteCreateSectionsExecute(r ApiUsersOnenoteCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteDeleteNotebooksRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteDeleteNotebooksRequest) IfMatch(ifMatch string) ApiUsersOnenoteDeleteNotebooksRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteDeleteNotebooksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteDeleteNotebooksExecute(r)
}

/*
UsersOnenoteDeleteNotebooks Delete navigation property notebooks for users

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @return ApiUsersOnenoteDeleteNotebooksRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteDeleteNotebooks(ctx _context.Context, userId string, notebookId string) ApiUsersOnenoteDeleteNotebooksRequest {
	return ApiUsersOnenoteDeleteNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteDeleteNotebooksExecute(r ApiUsersOnenoteDeleteNotebooksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteDeleteNotebooks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteDeleteOperationsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteOperationId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteDeleteOperationsRequest) IfMatch(ifMatch string) ApiUsersOnenoteDeleteOperationsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteDeleteOperationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteDeleteOperationsExecute(r)
}

/*
UsersOnenoteDeleteOperations Delete navigation property operations for users

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteOperationId key: id of onenoteOperation
 @return ApiUsersOnenoteDeleteOperationsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteDeleteOperations(ctx _context.Context, userId string, onenoteOperationId string) ApiUsersOnenoteDeleteOperationsRequest {
	return ApiUsersOnenoteDeleteOperationsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteOperationId: onenoteOperationId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteDeleteOperationsExecute(r ApiUsersOnenoteDeleteOperationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteDeleteOperations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/operations/{onenoteOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteOperation-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteDeletePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteDeletePagesRequest) IfMatch(ifMatch string) ApiUsersOnenoteDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteDeletePagesExecute(r)
}

/*
UsersOnenoteDeletePages Delete navigation property pages for users

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteDeletePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteDeletePages(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenoteDeletePagesRequest {
	return ApiUsersOnenoteDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteDeletePagesExecute(r ApiUsersOnenoteDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteDeleteResourcesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteResourceId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteDeleteResourcesRequest) IfMatch(ifMatch string) ApiUsersOnenoteDeleteResourcesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteDeleteResourcesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteDeleteResourcesExecute(r)
}

/*
UsersOnenoteDeleteResources Delete navigation property resources for users

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteResourceId key: id of onenoteResource
 @return ApiUsersOnenoteDeleteResourcesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteDeleteResources(ctx _context.Context, userId string, onenoteResourceId string) ApiUsersOnenoteDeleteResourcesRequest {
	return ApiUsersOnenoteDeleteResourcesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteDeleteResourcesExecute(r ApiUsersOnenoteDeleteResourcesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteDeleteResources")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/resources/{onenoteResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenoteDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteDeleteSectionGroupsExecute(r)
}

/*
UsersOnenoteDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteDeleteSectionGroups(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteDeleteSectionGroupsRequest {
	return ApiUsersOnenoteDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteDeleteSectionGroupsExecute(r ApiUsersOnenoteDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenoteDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteDeleteSectionsExecute(r)
}

/*
UsersOnenoteDeleteSections Delete navigation property sections for users

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteDeleteSections(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteDeleteSectionsRequest {
	return ApiUsersOnenoteDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteDeleteSectionsExecute(r ApiUsersOnenoteDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteGetNotebooksRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteGetNotebooksRequest) Select_(select_ []string) ApiUsersOnenoteGetNotebooksRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteGetNotebooksRequest) Expand(expand []string) ApiUsersOnenoteGetNotebooksRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteGetNotebooksRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteGetNotebooksExecute(r)
}

/*
UsersOnenoteGetNotebooks Get notebooks from users

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @return ApiUsersOnenoteGetNotebooksRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteGetNotebooks(ctx _context.Context, userId string, notebookId string) ApiUsersOnenoteGetNotebooksRequest {
	return ApiUsersOnenoteGetNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteGetNotebooksExecute(r ApiUsersOnenoteGetNotebooksRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteGetNotebooks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteGetOperationsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteOperationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteGetOperationsRequest) Select_(select_ []string) ApiUsersOnenoteGetOperationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteGetOperationsRequest) Expand(expand []string) ApiUsersOnenoteGetOperationsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteGetOperationsRequest) Execute() (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteGetOperationsExecute(r)
}

/*
UsersOnenoteGetOperations Get operations from users

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteOperationId key: id of onenoteOperation
 @return ApiUsersOnenoteGetOperationsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteGetOperations(ctx _context.Context, userId string, onenoteOperationId string) ApiUsersOnenoteGetOperationsRequest {
	return ApiUsersOnenoteGetOperationsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteOperationId: onenoteOperationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteOperation
func (a *UsersOnenoteApiService) UsersOnenoteGetOperationsExecute(r ApiUsersOnenoteGetOperationsRequest) (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteGetOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/operations/{onenoteOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteOperation-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteGetPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteGetPagesRequest) Select_(select_ []string) ApiUsersOnenoteGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteGetPagesRequest) Expand(expand []string) ApiUsersOnenoteGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteGetPagesExecute(r)
}

/*
UsersOnenoteGetPages Get pages from users

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteGetPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteGetPages(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenoteGetPagesRequest {
	return ApiUsersOnenoteGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteGetPagesExecute(r ApiUsersOnenoteGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
}


func (r ApiUsersOnenoteGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteGetPagesContentExecute(r)
}

/*
UsersOnenoteGetPagesContent Get media content for the navigation property pages from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteGetPagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteGetPagesContent(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenoteGetPagesContentRequest {
	return ApiUsersOnenoteGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *UsersOnenoteApiService) UsersOnenoteGetPagesContentExecute(r ApiUsersOnenoteGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteGetResourcesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteResourceId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteGetResourcesRequest) Select_(select_ []string) ApiUsersOnenoteGetResourcesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteGetResourcesRequest) Expand(expand []string) ApiUsersOnenoteGetResourcesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteGetResourcesRequest) Execute() (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteGetResourcesExecute(r)
}

/*
UsersOnenoteGetResources Get resources from users

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteResourceId key: id of onenoteResource
 @return ApiUsersOnenoteGetResourcesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteGetResources(ctx _context.Context, userId string, onenoteResourceId string) ApiUsersOnenoteGetResourcesRequest {
	return ApiUsersOnenoteGetResourcesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteResource
func (a *UsersOnenoteApiService) UsersOnenoteGetResourcesExecute(r ApiUsersOnenoteGetResourcesRequest) (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteGetResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/resources/{onenoteResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteGetResourcesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteResourceId string
}


func (r ApiUsersOnenoteGetResourcesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteGetResourcesContentExecute(r)
}

/*
UsersOnenoteGetResourcesContent Get media content for the navigation property resources from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteResourceId key: id of onenoteResource
 @return ApiUsersOnenoteGetResourcesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteGetResourcesContent(ctx _context.Context, userId string, onenoteResourceId string) ApiUsersOnenoteGetResourcesContentRequest {
	return ApiUsersOnenoteGetResourcesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *UsersOnenoteApiService) UsersOnenoteGetResourcesContentExecute(r ApiUsersOnenoteGetResourcesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteGetResourcesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/resources/{onenoteResource-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteGetSectionGroupsExecute(r)
}

/*
UsersOnenoteGetSectionGroups Get sectionGroups from users

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteGetSectionGroups(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteGetSectionGroupsRequest {
	return ApiUsersOnenoteGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteGetSectionGroupsExecute(r ApiUsersOnenoteGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteGetSectionsRequest) Select_(select_ []string) ApiUsersOnenoteGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteGetSectionsRequest) Expand(expand []string) ApiUsersOnenoteGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteGetSectionsExecute(r)
}

/*
UsersOnenoteGetSections Get sections from users

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteGetSections(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteGetSectionsRequest {
	return ApiUsersOnenoteGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteGetSectionsExecute(r ApiUsersOnenoteGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteListNotebooksRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteListNotebooksRequest) Top(top int32) ApiUsersOnenoteListNotebooksRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteListNotebooksRequest) Skip(skip int32) ApiUsersOnenoteListNotebooksRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteListNotebooksRequest) Search(search string) ApiUsersOnenoteListNotebooksRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteListNotebooksRequest) Filter(filter string) ApiUsersOnenoteListNotebooksRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteListNotebooksRequest) Count(count bool) ApiUsersOnenoteListNotebooksRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteListNotebooksRequest) Orderby(orderby []string) ApiUsersOnenoteListNotebooksRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteListNotebooksRequest) Select_(select_ []string) ApiUsersOnenoteListNotebooksRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteListNotebooksRequest) Expand(expand []string) ApiUsersOnenoteListNotebooksRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteListNotebooksRequest) Execute() (CollectionOfNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteListNotebooksExecute(r)
}

/*
UsersOnenoteListNotebooks Get notebooks from users

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersOnenoteListNotebooksRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteListNotebooks(ctx _context.Context, userId string) ApiUsersOnenoteListNotebooksRequest {
	return ApiUsersOnenoteListNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfNotebook
func (a *UsersOnenoteApiService) UsersOnenoteListNotebooksExecute(r ApiUsersOnenoteListNotebooksRequest) (CollectionOfNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteListNotebooks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteListOperationsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteListOperationsRequest) Top(top int32) ApiUsersOnenoteListOperationsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteListOperationsRequest) Skip(skip int32) ApiUsersOnenoteListOperationsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteListOperationsRequest) Search(search string) ApiUsersOnenoteListOperationsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteListOperationsRequest) Filter(filter string) ApiUsersOnenoteListOperationsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteListOperationsRequest) Count(count bool) ApiUsersOnenoteListOperationsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteListOperationsRequest) Orderby(orderby []string) ApiUsersOnenoteListOperationsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteListOperationsRequest) Select_(select_ []string) ApiUsersOnenoteListOperationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteListOperationsRequest) Expand(expand []string) ApiUsersOnenoteListOperationsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteListOperationsRequest) Execute() (CollectionOfOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteListOperationsExecute(r)
}

/*
UsersOnenoteListOperations Get operations from users

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersOnenoteListOperationsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteListOperations(ctx _context.Context, userId string) ApiUsersOnenoteListOperationsRequest {
	return ApiUsersOnenoteListOperationsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteOperation
func (a *UsersOnenoteApiService) UsersOnenoteListOperationsExecute(r ApiUsersOnenoteListOperationsRequest) (CollectionOfOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteListOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/operations"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteListPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteListPagesRequest) Top(top int32) ApiUsersOnenoteListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteListPagesRequest) Skip(skip int32) ApiUsersOnenoteListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteListPagesRequest) Search(search string) ApiUsersOnenoteListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteListPagesRequest) Filter(filter string) ApiUsersOnenoteListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteListPagesRequest) Count(count bool) ApiUsersOnenoteListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteListPagesRequest) Orderby(orderby []string) ApiUsersOnenoteListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteListPagesRequest) Select_(select_ []string) ApiUsersOnenoteListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteListPagesRequest) Expand(expand []string) ApiUsersOnenoteListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteListPagesExecute(r)
}

/*
UsersOnenoteListPages Get pages from users

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersOnenoteListPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteListPages(ctx _context.Context, userId string) ApiUsersOnenoteListPagesRequest {
	return ApiUsersOnenoteListPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteListPagesExecute(r ApiUsersOnenoteListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteListResourcesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteListResourcesRequest) Top(top int32) ApiUsersOnenoteListResourcesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteListResourcesRequest) Skip(skip int32) ApiUsersOnenoteListResourcesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteListResourcesRequest) Search(search string) ApiUsersOnenoteListResourcesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteListResourcesRequest) Filter(filter string) ApiUsersOnenoteListResourcesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteListResourcesRequest) Count(count bool) ApiUsersOnenoteListResourcesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteListResourcesRequest) Orderby(orderby []string) ApiUsersOnenoteListResourcesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteListResourcesRequest) Select_(select_ []string) ApiUsersOnenoteListResourcesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteListResourcesRequest) Expand(expand []string) ApiUsersOnenoteListResourcesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteListResourcesRequest) Execute() (CollectionOfOnenoteResource, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteListResourcesExecute(r)
}

/*
UsersOnenoteListResources Get resources from users

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersOnenoteListResourcesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteListResources(ctx _context.Context, userId string) ApiUsersOnenoteListResourcesRequest {
	return ApiUsersOnenoteListResourcesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteResource
func (a *UsersOnenoteApiService) UsersOnenoteListResourcesExecute(r ApiUsersOnenoteListResourcesRequest) (CollectionOfOnenoteResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteListResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteListSectionGroupsRequest) Top(top int32) ApiUsersOnenoteListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenoteListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteListSectionGroupsRequest) Search(search string) ApiUsersOnenoteListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteListSectionGroupsRequest) Filter(filter string) ApiUsersOnenoteListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteListSectionGroupsRequest) Count(count bool) ApiUsersOnenoteListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenoteListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteListSectionGroupsExecute(r)
}

/*
UsersOnenoteListSectionGroups Get sectionGroups from users

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersOnenoteListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteListSectionGroups(ctx _context.Context, userId string) ApiUsersOnenoteListSectionGroupsRequest {
	return ApiUsersOnenoteListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteListSectionGroupsExecute(r ApiUsersOnenoteListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteListSectionsRequest) Top(top int32) ApiUsersOnenoteListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteListSectionsRequest) Skip(skip int32) ApiUsersOnenoteListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteListSectionsRequest) Search(search string) ApiUsersOnenoteListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteListSectionsRequest) Filter(filter string) ApiUsersOnenoteListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteListSectionsRequest) Count(count bool) ApiUsersOnenoteListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteListSectionsRequest) Orderby(orderby []string) ApiUsersOnenoteListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteListSectionsRequest) Select_(select_ []string) ApiUsersOnenoteListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteListSectionsRequest) Expand(expand []string) ApiUsersOnenoteListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteListSectionsExecute(r)
}

/*
UsersOnenoteListSections Get sections from users

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersOnenoteListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteListSections(ctx _context.Context, userId string) ApiUsersOnenoteListSectionsRequest {
	return ApiUsersOnenoteListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteListSectionsExecute(r ApiUsersOnenoteListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenoteNotebooksCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteNotebooksCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteNotebooksCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksCreateSectionGroupsExecute(r)
}

/*
UsersOnenoteNotebooksCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @return ApiUsersOnenoteNotebooksCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksCreateSectionGroups(ctx _context.Context, userId string, notebookId string) ApiUsersOnenoteNotebooksCreateSectionGroupsRequest {
	return ApiUsersOnenoteNotebooksCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksCreateSectionGroupsExecute(r ApiUsersOnenoteNotebooksCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenoteNotebooksCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteNotebooksCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteNotebooksCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksCreateSectionsExecute(r)
}

/*
UsersOnenoteNotebooksCreateSections Create new navigation property to sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @return ApiUsersOnenoteNotebooksCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksCreateSections(ctx _context.Context, userId string, notebookId string) ApiUsersOnenoteNotebooksCreateSectionsRequest {
	return ApiUsersOnenoteNotebooksCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksCreateSectionsExecute(r ApiUsersOnenoteNotebooksCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksDeleteSectionGroupsExecute(r)
}

/*
UsersOnenoteNotebooksDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksDeleteSectionGroups(ctx _context.Context, userId string, notebookId string, sectionGroupId string) ApiUsersOnenoteNotebooksDeleteSectionGroupsRequest {
	return ApiUsersOnenoteNotebooksDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksDeleteSectionGroupsExecute(r ApiUsersOnenoteNotebooksDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksDeleteSectionsExecute(r)
}

/*
UsersOnenoteNotebooksDeleteSections Delete navigation property sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksDeleteSections(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksDeleteSectionsRequest {
	return ApiUsersOnenoteNotebooksDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksDeleteSectionsExecute(r ApiUsersOnenoteNotebooksDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteNotebooksGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksGetSectionGroupsExecute(r)
}

/*
UsersOnenoteNotebooksGetSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksGetSectionGroups(ctx _context.Context, userId string, notebookId string, sectionGroupId string) ApiUsersOnenoteNotebooksGetSectionGroupsRequest {
	return ApiUsersOnenoteNotebooksGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksGetSectionGroupsExecute(r ApiUsersOnenoteNotebooksGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksGetSectionsRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksGetSectionsRequest) Expand(expand []string) ApiUsersOnenoteNotebooksGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksGetSectionsExecute(r)
}

/*
UsersOnenoteNotebooksGetSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksGetSections(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksGetSectionsRequest {
	return ApiUsersOnenoteNotebooksGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksGetSectionsExecute(r ApiUsersOnenoteNotebooksGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteNotebooksListSectionGroupsRequest) Top(top int32) ApiUsersOnenoteNotebooksListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteNotebooksListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenoteNotebooksListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteNotebooksListSectionGroupsRequest) Search(search string) ApiUsersOnenoteNotebooksListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteNotebooksListSectionGroupsRequest) Filter(filter string) ApiUsersOnenoteNotebooksListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteNotebooksListSectionGroupsRequest) Count(count bool) ApiUsersOnenoteNotebooksListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteNotebooksListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenoteNotebooksListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteNotebooksListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteNotebooksListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksListSectionGroupsExecute(r)
}

/*
UsersOnenoteNotebooksListSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @return ApiUsersOnenoteNotebooksListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksListSectionGroups(ctx _context.Context, userId string, notebookId string) ApiUsersOnenoteNotebooksListSectionGroupsRequest {
	return ApiUsersOnenoteNotebooksListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksListSectionGroupsExecute(r ApiUsersOnenoteNotebooksListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteNotebooksListSectionsRequest) Top(top int32) ApiUsersOnenoteNotebooksListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteNotebooksListSectionsRequest) Skip(skip int32) ApiUsersOnenoteNotebooksListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteNotebooksListSectionsRequest) Search(search string) ApiUsersOnenoteNotebooksListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteNotebooksListSectionsRequest) Filter(filter string) ApiUsersOnenoteNotebooksListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteNotebooksListSectionsRequest) Count(count bool) ApiUsersOnenoteNotebooksListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteNotebooksListSectionsRequest) Orderby(orderby []string) ApiUsersOnenoteNotebooksListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteNotebooksListSectionsRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksListSectionsRequest) Expand(expand []string) ApiUsersOnenoteNotebooksListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksListSectionsExecute(r)
}

/*
UsersOnenoteNotebooksListSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @return ApiUsersOnenoteNotebooksListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksListSections(ctx _context.Context, userId string, notebookId string) ApiUsersOnenoteNotebooksListSectionsRequest {
	return ApiUsersOnenoteNotebooksListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksListSectionsExecute(r ApiUsersOnenoteNotebooksListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsCreateSectionGroupsExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsCreateSectionGroups(ctx _context.Context, userId string, notebookId string, sectionGroupId string) ApiUsersOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsCreateSectionGroupsExecute(r ApiUsersOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenoteNotebooksSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteNotebooksSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsCreateSectionsExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsCreateSections Create new navigation property to sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionGroupsCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsCreateSections(ctx _context.Context, userId string, notebookId string, sectionGroupId string) ApiUsersOnenoteNotebooksSectionGroupsCreateSectionsRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsCreateSectionsExecute(r ApiUsersOnenoteNotebooksSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsDeleteParentNotebook(ctx _context.Context, userId string, notebookId string, sectionGroupId string) ApiUsersOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsDeleteParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsDeleteParentSectionGroup(ctx _context.Context, userId string, notebookId string, sectionGroupId string) ApiUsersOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsDeleteParentSectionGroupExecute(r ApiUsersOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsDeleteSectionGroups(ctx _context.Context, userId string, notebookId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsDeleteSectionGroupsExecute(r ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsDeleteSectionsExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsDeleteSections Delete navigation property sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsDeleteSections(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionsRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsDeleteSectionsExecute(r ApiUsersOnenoteNotebooksSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsGetParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsGetParentNotebook Get parentNotebook from users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionGroupsGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsGetParentNotebook(ctx _context.Context, userId string, notebookId string, sectionGroupId string) ApiUsersOnenoteNotebooksSectionGroupsGetParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsGetParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsGetParentSectionGroupExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsGetParentSectionGroup(ctx _context.Context, userId string, notebookId string, sectionGroupId string) ApiUsersOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsGetParentSectionGroupExecute(r ApiUsersOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsGetSectionGroupsExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsGetSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionGroupsGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsGetSectionGroups(ctx _context.Context, userId string, notebookId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenoteNotebooksSectionGroupsGetSectionGroupsRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsGetSectionGroupsExecute(r ApiUsersOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionGroupsGetSectionsRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsGetSectionsExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsGetSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionGroupsGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsGetSections(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionGroupsGetSectionsRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsGetSectionsExecute(r ApiUsersOnenoteNotebooksSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Top(top int32) ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Search(search string) ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Count(count bool) ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsListSectionGroupsExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsListSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsListSectionGroups(ctx _context.Context, userId string, notebookId string, sectionGroupId string) ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsListSectionGroupsExecute(r ApiUsersOnenoteNotebooksSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest) Top(top int32) ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest) Skip(skip int32) ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest) Search(search string) ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest) Filter(filter string) ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest) Count(count bool) ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsListSectionsExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsListSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsListSections(ctx _context.Context, userId string, notebookId string, sectionGroupId string) ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsListSectionsExecute(r ApiUsersOnenoteNotebooksSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsCreatePagesExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsCreatePages Create new navigation property to pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsCreatePages(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsCreatePagesExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsDeletePagesExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsDeletePages Delete navigation property pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsDeletePages(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsDeletePagesExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebook(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroup(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsGetPagesExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsGetPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsGetPages(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsGetPagesExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsGetPagesContentExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsGetPagesContent Get media content for the navigation property pages from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsGetPagesContent(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsGetPagesContentExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsGetParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsGetParentNotebook Get parentNotebook from users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsGetParentNotebook(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsGetParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroup(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Top(top int32) ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Skip(skip int32) ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Search(search string) ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Filter(filter string) ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Count(count bool) ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Orderby(orderby []string) ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsListPagesExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsListPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsListPages(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsListPagesExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebook(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSection Delete navigation property parentSection for users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSection(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebook Get parentNotebook from users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebook(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentSection Get parentSection from users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentSection(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebook(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSection Update the navigation property parentSection in users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSection(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsUpdatePages Update the navigation property pages in users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsUpdatePages(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest) Body(body *os.File) ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesContent Update media content for the navigation property pages in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesContent(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebook(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroup(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupExecute(r ApiUsersOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsUpdateParentNotebook(ctx _context.Context, userId string, notebookId string, sectionGroupId string) ApiUsersOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsUpdateParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsUpdateParentSectionGroup(ctx _context.Context, userId string, notebookId string, sectionGroupId string) ApiUsersOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsUpdateParentSectionGroupExecute(r ApiUsersOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsUpdateSectionGroups(ctx _context.Context, userId string, notebookId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsUpdateSectionGroupsExecute(r ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionGroupsUpdateSectionsExecute(r)
}

/*
UsersOnenoteNotebooksSectionGroupsUpdateSections Update the navigation property sections in users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsUpdateSections(ctx _context.Context, userId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionsRequest {
	return ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionGroupsUpdateSectionsExecute(r ApiUsersOnenoteNotebooksSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiUsersOnenoteNotebooksSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenoteNotebooksSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsCreatePagesExecute(r)
}

/*
UsersOnenoteNotebooksSectionsCreatePages Create new navigation property to pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsCreatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsCreatePages(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsCreatePagesRequest {
	return ApiUsersOnenoteNotebooksSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsCreatePagesExecute(r ApiUsersOnenoteNotebooksSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsDeletePagesExecute(r)
}

/*
UsersOnenoteNotebooksSectionsDeletePages Delete navigation property pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionsDeletePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsDeletePages(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionsDeletePagesRequest {
	return ApiUsersOnenoteNotebooksSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsDeletePagesExecute(r ApiUsersOnenoteNotebooksSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionsDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsDeleteParentNotebook(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsDeleteParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsDeleteParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenoteNotebooksSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsDeleteParentSectionGroup(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsDeleteParentSectionGroupRequest {
	return ApiUsersOnenoteNotebooksSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsDeleteParentSectionGroupExecute(r ApiUsersOnenoteNotebooksSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionsGetPagesRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionsGetPagesRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsGetPagesExecute(r)
}

/*
UsersOnenoteNotebooksSectionsGetPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionsGetPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsGetPages(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionsGetPagesRequest {
	return ApiUsersOnenoteNotebooksSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsGetPagesExecute(r ApiUsersOnenoteNotebooksSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiUsersOnenoteNotebooksSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsGetPagesContentExecute(r)
}

/*
UsersOnenoteNotebooksSectionsGetPagesContent Get media content for the navigation property pages from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionsGetPagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsGetPagesContent(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionsGetPagesContentRequest {
	return ApiUsersOnenoteNotebooksSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsGetPagesContentExecute(r ApiUsersOnenoteNotebooksSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionsGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionsGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsGetParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionsGetParentNotebook Get parentNotebook from users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsGetParentNotebook(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsGetParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsGetParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsGetParentSectionGroupExecute(r)
}

/*
UsersOnenoteNotebooksSectionsGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsGetParentSectionGroup(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsGetParentSectionGroupRequest {
	return ApiUsersOnenoteNotebooksSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsGetParentSectionGroupExecute(r ApiUsersOnenoteNotebooksSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteNotebooksSectionsListPagesRequest) Top(top int32) ApiUsersOnenoteNotebooksSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteNotebooksSectionsListPagesRequest) Skip(skip int32) ApiUsersOnenoteNotebooksSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteNotebooksSectionsListPagesRequest) Search(search string) ApiUsersOnenoteNotebooksSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteNotebooksSectionsListPagesRequest) Filter(filter string) ApiUsersOnenoteNotebooksSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteNotebooksSectionsListPagesRequest) Count(count bool) ApiUsersOnenoteNotebooksSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteNotebooksSectionsListPagesRequest) Orderby(orderby []string) ApiUsersOnenoteNotebooksSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionsListPagesRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionsListPagesRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsListPagesExecute(r)
}

/*
UsersOnenoteNotebooksSectionsListPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsListPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsListPages(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsListPagesRequest {
	return ApiUsersOnenoteNotebooksSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsListPagesExecute(r ApiUsersOnenoteNotebooksSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsPagesDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsPagesDeleteParentNotebook(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsPagesDeleteParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsPagesDeleteParentSectionExecute(r)
}

/*
UsersOnenoteNotebooksSectionsPagesDeleteParentSection Delete navigation property parentSection for users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionsPagesDeleteParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsPagesDeleteParentSection(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionsPagesDeleteParentSectionRequest {
	return ApiUsersOnenoteNotebooksSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsPagesDeleteParentSectionExecute(r ApiUsersOnenoteNotebooksSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsPagesGetParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionsPagesGetParentNotebook Get parentNotebook from users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionsPagesGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsPagesGetParentNotebook(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionsPagesGetParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsPagesGetParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsPagesGetParentSectionExecute(r)
}

/*
UsersOnenoteNotebooksSectionsPagesGetParentSection Get parentSection from users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionsPagesGetParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsPagesGetParentSection(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionsPagesGetParentSectionRequest {
	return ApiUsersOnenoteNotebooksSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsPagesGetParentSectionExecute(r ApiUsersOnenoteNotebooksSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsPagesUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsPagesUpdateParentNotebook(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsPagesUpdateParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteNotebooksSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsPagesUpdateParentSectionExecute(r)
}

/*
UsersOnenoteNotebooksSectionsPagesUpdateParentSection Update the navigation property parentSection in users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionsPagesUpdateParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsPagesUpdateParentSection(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionsPagesUpdateParentSectionRequest {
	return ApiUsersOnenoteNotebooksSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsPagesUpdateParentSectionExecute(r ApiUsersOnenoteNotebooksSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroups(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionsExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupCreateSections Create new navigation property to sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupCreateSections(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionsExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebook(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroups(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupDeleteSections Delete navigation property sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupDeleteSections(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupGetParentNotebook Get parentNotebook from users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupGetParentNotebook(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroup(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupGetSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupGetSectionGroups(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupGetSectionsExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupGetSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupGetSections(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupGetSectionsExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Search(search string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroups(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Top(top int32) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Skip(skip int32) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Search(search string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Filter(filter string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Count(count bool) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Expand(expand []string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupListSectionsExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupListSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupListSections(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupListSectionsExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebook(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroups(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsExecute(r)
}

/*
UsersOnenoteNotebooksSectionsParentSectionGroupUpdateSections Update the navigation property sections in users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupUpdateSections(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest {
	return ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsExecute(r ApiUsersOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenoteNotebooksSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsUpdatePagesExecute(r)
}

/*
UsersOnenoteNotebooksSectionsUpdatePages Update the navigation property pages in users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionsUpdatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsUpdatePages(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionsUpdatePagesRequest {
	return ApiUsersOnenoteNotebooksSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsUpdatePagesExecute(r ApiUsersOnenoteNotebooksSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiUsersOnenoteNotebooksSectionsUpdatePagesContentRequest) Body(body *os.File) ApiUsersOnenoteNotebooksSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsUpdatePagesContentExecute(r)
}

/*
UsersOnenoteNotebooksSectionsUpdatePagesContent Update media content for the navigation property pages in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteNotebooksSectionsUpdatePagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsUpdatePagesContent(ctx _context.Context, userId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteNotebooksSectionsUpdatePagesContentRequest {
	return ApiUsersOnenoteNotebooksSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsUpdatePagesContentExecute(r ApiUsersOnenoteNotebooksSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteNotebooksSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteNotebooksSectionsUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsUpdateParentNotebook(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsUpdateParentNotebookRequest {
	return ApiUsersOnenoteNotebooksSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsUpdateParentNotebookExecute(r ApiUsersOnenoteNotebooksSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteNotebooksSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteNotebooksSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksSectionsUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenoteNotebooksSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksSectionsUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsUpdateParentSectionGroup(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksSectionsUpdateParentSectionGroupRequest {
	return ApiUsersOnenoteNotebooksSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksSectionsUpdateParentSectionGroupExecute(r ApiUsersOnenoteNotebooksSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteNotebooksUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteNotebooksUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksUpdateSectionGroupsExecute(r)
}

/*
UsersOnenoteNotebooksUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteNotebooksUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksUpdateSectionGroups(ctx _context.Context, userId string, notebookId string, sectionGroupId string) ApiUsersOnenoteNotebooksUpdateSectionGroupsRequest {
	return ApiUsersOnenoteNotebooksUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksUpdateSectionGroupsExecute(r ApiUsersOnenoteNotebooksUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteNotebooksUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteNotebooksUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteNotebooksUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteNotebooksUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteNotebooksUpdateSectionsExecute(r)
}

/*
UsersOnenoteNotebooksUpdateSections Update the navigation property sections in users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteNotebooksUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksUpdateSections(ctx _context.Context, userId string, notebookId string, onenoteSectionId string) ApiUsersOnenoteNotebooksUpdateSectionsRequest {
	return ApiUsersOnenoteNotebooksUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteNotebooksUpdateSectionsExecute(r ApiUsersOnenoteNotebooksUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteNotebooksUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesDeleteParentNotebookExecute(r)
}

/*
UsersOnenotePagesDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesDeleteParentNotebook(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesDeleteParentNotebookRequest {
	return ApiUsersOnenotePagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesDeleteParentNotebookExecute(r ApiUsersOnenotePagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesDeleteParentSectionExecute(r)
}

/*
UsersOnenotePagesDeleteParentSection Delete navigation property parentSection for users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesDeleteParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesDeleteParentSection(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesDeleteParentSectionRequest {
	return ApiUsersOnenotePagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesDeleteParentSectionExecute(r ApiUsersOnenotePagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenotePagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenotePagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesGetParentNotebookExecute(r)
}

/*
UsersOnenotePagesGetParentNotebook Get parentNotebook from users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesGetParentNotebook(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesGetParentNotebookRequest {
	return ApiUsersOnenotePagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenotePagesGetParentNotebookExecute(r ApiUsersOnenotePagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesGetParentSectionRequest) Select_(select_ []string) ApiUsersOnenotePagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesGetParentSectionRequest) Expand(expand []string) ApiUsersOnenotePagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesGetParentSectionExecute(r)
}

/*
UsersOnenotePagesGetParentSection Get parentSection from users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesGetParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesGetParentSection(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesGetParentSectionRequest {
	return ApiUsersOnenotePagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesGetParentSectionExecute(r ApiUsersOnenotePagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenotePagesParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookCreateSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentNotebookCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookCreateSectionGroups(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentNotebookCreateSectionGroupsRequest {
	return ApiUsersOnenotePagesParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookCreateSectionGroupsExecute(r ApiUsersOnenotePagesParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenotePagesParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenotePagesParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenotePagesParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookCreateSectionsExecute(r)
}

/*
UsersOnenotePagesParentNotebookCreateSections Create new navigation property to sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentNotebookCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookCreateSections(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentNotebookCreateSectionsRequest {
	return ApiUsersOnenotePagesParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookCreateSectionsExecute(r ApiUsersOnenotePagesParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookDeleteSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookDeleteSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookDeleteSectionGroupsRequest {
	return ApiUsersOnenotePagesParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookDeleteSectionGroupsExecute(r ApiUsersOnenotePagesParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookDeleteSectionsExecute(r)
}

/*
UsersOnenotePagesParentNotebookDeleteSections Delete navigation property sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookDeleteSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookDeleteSectionsRequest {
	return ApiUsersOnenotePagesParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookDeleteSectionsExecute(r ApiUsersOnenotePagesParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookGetSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentNotebookGetSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookGetSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookGetSectionGroupsRequest {
	return ApiUsersOnenotePagesParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookGetSectionGroupsExecute(r ApiUsersOnenotePagesParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookGetSectionsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookGetSectionsRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookGetSectionsExecute(r)
}

/*
UsersOnenotePagesParentNotebookGetSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookGetSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookGetSectionsRequest {
	return ApiUsersOnenotePagesParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookGetSectionsExecute(r ApiUsersOnenotePagesParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest) Top(top int32) ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest) Search(search string) ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest) Filter(filter string) ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest) Count(count bool) ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookListSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentNotebookListSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookListSectionGroups(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest {
	return ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookListSectionGroupsExecute(r ApiUsersOnenotePagesParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentNotebookListSectionsRequest) Top(top int32) ApiUsersOnenotePagesParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentNotebookListSectionsRequest) Skip(skip int32) ApiUsersOnenotePagesParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentNotebookListSectionsRequest) Search(search string) ApiUsersOnenotePagesParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentNotebookListSectionsRequest) Filter(filter string) ApiUsersOnenotePagesParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentNotebookListSectionsRequest) Count(count bool) ApiUsersOnenotePagesParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentNotebookListSectionsRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookListSectionsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookListSectionsRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookListSectionsExecute(r)
}

/*
UsersOnenotePagesParentNotebookListSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentNotebookListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookListSections(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentNotebookListSectionsRequest {
	return ApiUsersOnenotePagesParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookListSectionsExecute(r ApiUsersOnenotePagesParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsCreateSections Create new navigation property to sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsCreateSections(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsCreateSectionsExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsDeleteSections Delete navigation property sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsDeleteSections(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsDeleteSectionsExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsGetParentNotebookExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsGetSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsGetSections(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsGetSectionsExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsListSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsListSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsListSections(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsListSectionsExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsSectionsCreatePages Create new navigation property to pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsCreatePages(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsSectionsDeletePages Delete navigation property pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsDeletePages(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebook(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroup(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsGetPagesExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsSectionsGetPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsGetPages(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsGetPagesExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebook Get parentNotebook from users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebook(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroup(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Top(top int32) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Skip(skip int32) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Search(search string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Filter(filter string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Count(count bool) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsSectionsListPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsListPages(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsSectionsUpdatePages Update the navigation property pages in users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsUpdatePages(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebook(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroup(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionGroupsUpdateSections Update the navigation property sections in users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsUpdateSections(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionGroupsUpdateSectionsExecute(r ApiUsersOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiUsersOnenotePagesParentNotebookSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenotePagesParentNotebookSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsCreatePagesExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsCreatePages Create new navigation property to pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsCreatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsCreatePages(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsCreatePagesRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsCreatePagesExecute(r ApiUsersOnenotePagesParentNotebookSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsDeletePagesExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsDeletePages Delete navigation property pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersOnenotePagesParentNotebookSectionsDeletePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsDeletePages(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiUsersOnenotePagesParentNotebookSectionsDeletePagesRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsDeletePagesExecute(r ApiUsersOnenotePagesParentNotebookSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsDeleteParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsDeleteParentNotebook(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsDeleteParentNotebookExecute(r ApiUsersOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsDeleteParentSectionGroup(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsDeleteParentSectionGroupExecute(r ApiUsersOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionsGetPagesRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionsGetPagesRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsGetPagesExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsGetPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersOnenotePagesParentNotebookSectionsGetPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsGetPages(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiUsersOnenotePagesParentNotebookSectionsGetPagesRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsGetPagesExecute(r ApiUsersOnenotePagesParentNotebookSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionsGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionsGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsGetParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsGetParentNotebook Get parentNotebook from users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsGetParentNotebook(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsGetParentNotebookRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsGetParentNotebookExecute(r ApiUsersOnenotePagesParentNotebookSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsGetParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsGetParentSectionGroup(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsGetParentSectionGroupExecute(r ApiUsersOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest) Top(top int32) ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest) Skip(skip int32) ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest) Search(search string) ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest) Filter(filter string) ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest) Count(count bool) ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsListPagesExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsListPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsListPages(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsListPagesExecute(r ApiUsersOnenotePagesParentNotebookSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroups(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSections Create new navigation property to sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebook(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroups(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSections Delete navigation property sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebook Get parentNotebook from users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebook(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroup(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroups(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Search(search string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroups(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Top(top int32) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Skip(skip int32) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Search(search string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Filter(filter string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Count(count bool) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Expand(expand []string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupListSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupListSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebook(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroups(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSections Update the navigation property sections in users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsExecute(r ApiUsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenotePagesParentNotebookSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsUpdatePagesExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsUpdatePages Update the navigation property pages in users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersOnenotePagesParentNotebookSectionsUpdatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsUpdatePages(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiUsersOnenotePagesParentNotebookSectionsUpdatePagesRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsUpdatePagesExecute(r ApiUsersOnenotePagesParentNotebookSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsUpdateParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsUpdateParentNotebook(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsUpdateParentNotebookExecute(r ApiUsersOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookSectionsUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentNotebookSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsUpdateParentSectionGroup(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookSectionsUpdateParentSectionGroupExecute(r ApiUsersOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookUpdateSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentNotebookUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookUpdateSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentNotebookUpdateSectionGroupsRequest {
	return ApiUsersOnenotePagesParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookUpdateSectionGroupsExecute(r ApiUsersOnenotePagesParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenotePagesParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenotePagesParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenotePagesParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentNotebookUpdateSectionsExecute(r)
}

/*
UsersOnenotePagesParentNotebookUpdateSections Update the navigation property sections in users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentNotebookUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookUpdateSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentNotebookUpdateSectionsRequest {
	return ApiUsersOnenotePagesParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentNotebookUpdateSectionsExecute(r ApiUsersOnenotePagesParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionCreatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiUsersOnenotePagesParentSectionCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenotePagesParentSectionCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenotePagesParentSectionCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionCreatePagesExecute(r)
}

/*
UsersOnenotePagesParentSectionCreatePages Create new navigation property to pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionCreatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionCreatePages(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionCreatePagesRequest {
	return ApiUsersOnenotePagesParentSectionCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionCreatePagesExecute(r ApiUsersOnenotePagesParentSectionCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionDeletePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenotePageId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentSectionDeletePagesRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentSectionDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentSectionDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionDeletePagesExecute(r)
}

/*
UsersOnenotePagesParentSectionDeletePages Delete navigation property pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionDeletePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionDeletePages(ctx _context.Context, userId string, onenotePageId string, onenotePageId1 string) ApiUsersOnenotePagesParentSectionDeletePagesRequest {
	return ApiUsersOnenotePagesParentSectionDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionDeletePagesExecute(r ApiUsersOnenotePagesParentSectionDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentSectionDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentSectionDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentSectionDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionDeleteParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentSectionDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionDeleteParentNotebook(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionDeleteParentNotebookRequest {
	return ApiUsersOnenotePagesParentSectionDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionDeleteParentNotebookExecute(r ApiUsersOnenotePagesParentSectionDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentSectionDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentSectionDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentSectionDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentSectionDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionDeleteParentSectionGroup(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionDeleteParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentSectionDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionDeleteParentSectionGroupExecute(r ApiUsersOnenotePagesParentSectionDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionGetPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenotePageId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionGetPagesRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionGetPagesRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionGetPagesExecute(r)
}

/*
UsersOnenotePagesParentSectionGetPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionGetPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionGetPages(ctx _context.Context, userId string, onenotePageId string, onenotePageId1 string) ApiUsersOnenotePagesParentSectionGetPagesRequest {
	return ApiUsersOnenotePagesParentSectionGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionGetPagesExecute(r ApiUsersOnenotePagesParentSectionGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionGetParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentSectionGetParentNotebook Get parentNotebook from users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionGetParentNotebook(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionGetParentNotebookRequest {
	return ApiUsersOnenotePagesParentSectionGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionGetParentNotebookExecute(r ApiUsersOnenotePagesParentSectionGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionGetParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentSectionGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionGetParentSectionGroup(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionGetParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentSectionGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionGetParentSectionGroupExecute(r ApiUsersOnenotePagesParentSectionGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionListPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentSectionListPagesRequest) Top(top int32) ApiUsersOnenotePagesParentSectionListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentSectionListPagesRequest) Skip(skip int32) ApiUsersOnenotePagesParentSectionListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentSectionListPagesRequest) Search(search string) ApiUsersOnenotePagesParentSectionListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentSectionListPagesRequest) Filter(filter string) ApiUsersOnenotePagesParentSectionListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentSectionListPagesRequest) Count(count bool) ApiUsersOnenotePagesParentSectionListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentSectionListPagesRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentSectionListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionListPagesRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionListPagesRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionListPagesExecute(r)
}

/*
UsersOnenotePagesParentSectionListPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionListPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionListPages(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionListPagesRequest {
	return ApiUsersOnenotePagesParentSectionListPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionListPagesExecute(r ApiUsersOnenotePagesParentSectionListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookCreateSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookCreateSectionGroups(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookCreateSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookCreateSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookCreateSections Create new navigation property to sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookCreateSections(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookCreateSectionsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookDeleteSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookDeleteSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookDeleteSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookDeleteSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookDeleteSections Delete navigation property sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookDeleteSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookDeleteSectionsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookGetSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookGetSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookGetSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookGetSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentNotebookGetSectionsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentNotebookGetSectionsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookGetSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookGetSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentSectionParentNotebookGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookGetSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentSectionParentNotebookGetSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookGetSectionsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Top(top int32) ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Search(search string) ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Filter(filter string) ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Count(count bool) ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookListSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookListSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookListSectionGroups(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookListSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest) Top(top int32) ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest) Skip(skip int32) ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest) Search(search string) ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest) Filter(filter string) ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest) Count(count bool) ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookListSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookListSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookListSections(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookListSectionsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSections Create new navigation property to sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSections(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSections Delete navigation property sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSections(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSections(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsListSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsListSections(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSections Update the navigation property sections in users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSections(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookUpdateSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookUpdateSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookUpdateSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentNotebookUpdateSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentNotebookUpdateSections Update the navigation property sections in users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookUpdateSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentNotebookUpdateSectionsExecute(r ApiUsersOnenotePagesParentSectionParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupCreateSectionGroups(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupCreateSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupCreateSections Create new navigation property to sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupCreateSections(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupCreateSectionsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupDeleteParentNotebook(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupDeleteSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupDeleteSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupDeleteSections Delete navigation property sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupDeleteSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupDeleteSectionsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupGetParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupGetParentNotebook Get parentNotebook from users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupGetParentNotebook(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupGetParentNotebookExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupGetParentSectionGroup(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupGetSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupGetSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupGetSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupGetSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupGetSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupGetSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupGetSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupGetSectionsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Search(search string) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupListSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupListSectionGroups(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Top(top int32) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Skip(skip int32) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Search(search string) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Filter(filter string) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Count(count bool) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupListSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupListSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupListSections(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupListSectionsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroups(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSections Create new navigation property to sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSections(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSections Delete navigation property sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Top(top int32) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Search(search string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Filter(filter string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Count(count bool) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroups(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Top(top int32) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Skip(skip int32) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Search(search string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Filter(filter string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Count(count bool) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Orderby(orderby []string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Select_(select_ []string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Expand(expand []string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSections(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSections Update the navigation property sections in users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupUpdateParentNotebook(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupUpdateSectionGroups(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string) ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionParentSectionGroupUpdateSectionsExecute(r)
}

/*
UsersOnenotePagesParentSectionParentSectionGroupUpdateSections Update the navigation property sections in users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupUpdateSections(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string) ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest {
	return ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionParentSectionGroupUpdateSectionsExecute(r ApiUsersOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenotePageId1 string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiUsersOnenotePagesParentSectionUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenotePagesParentSectionUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenotePagesParentSectionUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionUpdatePagesExecute(r)
}

/*
UsersOnenotePagesParentSectionUpdatePages Update the navigation property pages in users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionUpdatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionUpdatePages(ctx _context.Context, userId string, onenotePageId string, onenotePageId1 string) ApiUsersOnenotePagesParentSectionUpdatePagesRequest {
	return ApiUsersOnenotePagesParentSectionUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionUpdatePagesExecute(r ApiUsersOnenotePagesParentSectionUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenotePagesParentSectionUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenotePagesParentSectionUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenotePagesParentSectionUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionUpdateParentNotebookExecute(r)
}

/*
UsersOnenotePagesParentSectionUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionUpdateParentNotebook(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionUpdateParentNotebookRequest {
	return ApiUsersOnenotePagesParentSectionUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionUpdateParentNotebookExecute(r ApiUsersOnenotePagesParentSectionUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesParentSectionUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenotePagesParentSectionUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenotePagesParentSectionUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenotePagesParentSectionUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesParentSectionUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenotePagesParentSectionUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesParentSectionUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionUpdateParentSectionGroup(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesParentSectionUpdateParentSectionGroupRequest {
	return ApiUsersOnenotePagesParentSectionUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesParentSectionUpdateParentSectionGroupExecute(r ApiUsersOnenotePagesParentSectionUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesParentSectionUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenotePagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenotePagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenotePagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesUpdateParentNotebookExecute(r)
}

/*
UsersOnenotePagesUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesUpdateParentNotebook(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesUpdateParentNotebookRequest {
	return ApiUsersOnenotePagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesUpdateParentNotebookExecute(r ApiUsersOnenotePagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenotePagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenotePagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenotePagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenotePagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenotePagesUpdateParentSectionExecute(r)
}

/*
UsersOnenotePagesUpdateParentSection Update the navigation property parentSection in users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenotePagesUpdateParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenotePagesUpdateParentSection(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenotePagesUpdateParentSectionRequest {
	return ApiUsersOnenotePagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenotePagesUpdateParentSectionExecute(r ApiUsersOnenotePagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenotePagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
}


func (r ApiUsersOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentExecute(r)
}

/*
UsersOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContent Get media content for the navigation property pages from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContent(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiUsersOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest {
	return ApiUsersOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return *os.File
func (a *UsersOnenoteApiService) UsersOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentExecute(r ApiUsersOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	body **os.File
}

// New media content.
func (r ApiUsersOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest) Body(body *os.File) ApiUsersOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiUsersOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentExecute(r)
}

/*
UsersOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContent Update media content for the navigation property pages in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContent(ctx _context.Context, userId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiUsersOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest {
	return ApiUsersOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentExecute(r ApiUsersOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteParentNotebookSectionsPagesGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
}


func (r ApiUsersOnenoteParentNotebookSectionsPagesGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteParentNotebookSectionsPagesGetPagesContentExecute(r)
}

/*
UsersOnenoteParentNotebookSectionsPagesGetPagesContent Get media content for the navigation property pages from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersOnenoteParentNotebookSectionsPagesGetPagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteParentNotebookSectionsPagesGetPagesContent(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiUsersOnenoteParentNotebookSectionsPagesGetPagesContentRequest {
	return ApiUsersOnenoteParentNotebookSectionsPagesGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return *os.File
func (a *UsersOnenoteApiService) UsersOnenoteParentNotebookSectionsPagesGetPagesContentExecute(r ApiUsersOnenoteParentNotebookSectionsPagesGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteParentNotebookSectionsPagesGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	body **os.File
}

// New media content.
func (r ApiUsersOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest) Body(body *os.File) ApiUsersOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiUsersOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteParentNotebookSectionsPagesUpdatePagesContentExecute(r)
}

/*
UsersOnenoteParentNotebookSectionsPagesUpdatePagesContent Update media content for the navigation property pages in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteParentNotebookSectionsPagesUpdatePagesContent(ctx _context.Context, userId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiUsersOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest {
	return ApiUsersOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteParentNotebookSectionsPagesUpdatePagesContentExecute(r ApiUsersOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteParentNotebookSectionsPagesUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteParentSectionPagesGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenotePageId1 string
}


func (r ApiUsersOnenoteParentSectionPagesGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteParentSectionPagesGetPagesContentExecute(r)
}

/*
UsersOnenoteParentSectionPagesGetPagesContent Get media content for the navigation property pages from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersOnenoteParentSectionPagesGetPagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteParentSectionPagesGetPagesContent(ctx _context.Context, userId string, onenotePageId string, onenotePageId1 string) ApiUsersOnenoteParentSectionPagesGetPagesContentRequest {
	return ApiUsersOnenoteParentSectionPagesGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return *os.File
func (a *UsersOnenoteApiService) UsersOnenoteParentSectionPagesGetPagesContentExecute(r ApiUsersOnenoteParentSectionPagesGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteParentSectionPagesGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteParentSectionPagesUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	onenotePageId1 string
	body **os.File
}

// New media content.
func (r ApiUsersOnenoteParentSectionPagesUpdatePagesContentRequest) Body(body *os.File) ApiUsersOnenoteParentSectionPagesUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiUsersOnenoteParentSectionPagesUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteParentSectionPagesUpdatePagesContentExecute(r)
}

/*
UsersOnenoteParentSectionPagesUpdatePagesContent Update media content for the navigation property pages in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiUsersOnenoteParentSectionPagesUpdatePagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteParentSectionPagesUpdatePagesContent(ctx _context.Context, userId string, onenotePageId string, onenotePageId1 string) ApiUsersOnenoteParentSectionPagesUpdatePagesContentRequest {
	return ApiUsersOnenoteParentSectionPagesUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteParentSectionPagesUpdatePagesContentExecute(r ApiUsersOnenoteParentSectionPagesUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteParentSectionPagesUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenoteSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsCreateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsCreateSectionGroups(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteSectionGroupsCreateSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsCreateSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenoteSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsCreateSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsCreateSections Create new navigation property to sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsCreateSections(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteSectionGroupsCreateSectionsRequest {
	return ApiUsersOnenoteSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsCreateSectionsExecute(r ApiUsersOnenoteSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsDeleteParentNotebook(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteSectionGroupsDeleteParentNotebookRequest {
	return ApiUsersOnenoteSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsDeleteParentNotebookExecute(r ApiUsersOnenoteSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsDeleteParentSectionGroup(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteSectionGroupsDeleteParentSectionGroupRequest {
	return ApiUsersOnenoteSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsDeleteParentSectionGroupExecute(r ApiUsersOnenoteSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsDeleteSectionGroups(ctx _context.Context, userId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenoteSectionGroupsDeleteSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsDeleteSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsDeleteSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsDeleteSections Delete navigation property sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsDeleteSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsDeleteSectionsRequest {
	return ApiUsersOnenoteSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsDeleteSectionsExecute(r ApiUsersOnenoteSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsGetParentNotebookExecute(r)
}

/*
UsersOnenoteSectionGroupsGetParentNotebook Get parentNotebook from users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsGetParentNotebook(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteSectionGroupsGetParentNotebookRequest {
	return ApiUsersOnenoteSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsGetParentNotebookExecute(r ApiUsersOnenoteSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsGetParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionGroupsGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsGetParentSectionGroup(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteSectionGroupsGetParentSectionGroupRequest {
	return ApiUsersOnenoteSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsGetParentSectionGroupExecute(r ApiUsersOnenoteSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsGetSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsGetSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsGetSectionGroups(ctx _context.Context, userId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenoteSectionGroupsGetSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsGetSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsGetSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsGetSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsGetSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsGetSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsGetSectionsRequest {
	return ApiUsersOnenoteSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsGetSectionsExecute(r ApiUsersOnenoteSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionGroupsListSectionGroupsRequest) Top(top int32) ApiUsersOnenoteSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenoteSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionGroupsListSectionGroupsRequest) Search(search string) ApiUsersOnenoteSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiUsersOnenoteSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionGroupsListSectionGroupsRequest) Count(count bool) ApiUsersOnenoteSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsListSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsListSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsListSectionGroups(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteSectionGroupsListSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsListSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionGroupsListSectionsRequest) Top(top int32) ApiUsersOnenoteSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionGroupsListSectionsRequest) Skip(skip int32) ApiUsersOnenoteSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionGroupsListSectionsRequest) Search(search string) ApiUsersOnenoteSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionGroupsListSectionsRequest) Filter(filter string) ApiUsersOnenoteSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionGroupsListSectionsRequest) Count(count bool) ApiUsersOnenoteSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsListSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsListSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsListSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsListSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsListSections(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteSectionGroupsListSectionsRequest {
	return ApiUsersOnenoteSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsListSectionsExecute(r ApiUsersOnenoteSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookCreateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookCreateSectionGroups(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookCreateSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookCreateSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookCreateSections Create new navigation property to sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookCreateSections(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionsRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookCreateSectionsExecute(r ApiUsersOnenoteSectionGroupsParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookDeleteSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookDeleteSectionGroups(ctx _context.Context, userId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookDeleteSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookDeleteSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookDeleteSections Delete navigation property sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookDeleteSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionsRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookDeleteSectionsExecute(r ApiUsersOnenoteSectionGroupsParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookGetSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookGetSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookGetSectionGroups(ctx _context.Context, userId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookGetSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsParentNotebookGetSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsParentNotebookGetSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookGetSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookGetSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsParentNotebookGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookGetSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsParentNotebookGetSectionsRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookGetSectionsExecute(r ApiUsersOnenoteSectionGroupsParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Top(top int32) ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Search(search string) ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Filter(filter string) ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Count(count bool) ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookListSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookListSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookListSectionGroups(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookListSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest) Top(top int32) ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest) Skip(skip int32) ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest) Search(search string) ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest) Filter(filter string) ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest) Count(count bool) ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookListSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookListSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookListSections(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookListSectionsExecute(r ApiUsersOnenoteSectionGroupsParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsCreatePagesExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsCreatePages Create new navigation property to pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsCreatePages(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsCreatePagesExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsDeletePagesExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsDeletePages Delete navigation property pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsDeletePages(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsDeletePagesExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebook(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroup(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsGetPagesExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsGetPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsGetPages(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsGetPagesExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsGetPagesContentExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsGetPagesContent Get media content for the navigation property pages from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsGetPagesContent(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsGetPagesContentExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsGetParentNotebook Get parentNotebook from users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsGetParentNotebook(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroup(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Top(top int32) ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Skip(skip int32) ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Search(search string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Filter(filter string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Count(count bool) ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Orderby(orderby []string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsListPagesExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsListPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsListPages(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsListPagesExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebook(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSection Delete navigation property parentSection for users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSection(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebook Get parentNotebook from users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebook(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSection Get parentSection from users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSection(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebook(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSection Update the navigation property parentSection in users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSection(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsUpdatePages Update the navigation property pages in users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsUpdatePages(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest) Body(body *os.File) ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContent Update media content for the navigation property pages in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContent(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebook(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroup(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupExecute(r ApiUsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookUpdateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookUpdateSectionGroups(ctx _context.Context, userId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookUpdateSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsParentNotebookUpdateSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsParentNotebookUpdateSections Update the navigation property sections in users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookUpdateSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionsRequest {
	return ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsParentNotebookUpdateSectionsExecute(r ApiUsersOnenoteSectionGroupsParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiUsersOnenoteSectionGroupsSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenoteSectionGroupsSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsCreatePagesExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsCreatePages Create new navigation property to pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsCreatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsCreatePages(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsSectionsCreatePagesRequest {
	return ApiUsersOnenoteSectionGroupsSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsCreatePagesExecute(r ApiUsersOnenoteSectionGroupsSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsDeletePagesExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsDeletePages Delete navigation property pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsSectionsDeletePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsDeletePages(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsSectionsDeletePagesRequest {
	return ApiUsersOnenoteSectionGroupsSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsDeletePagesExecute(r ApiUsersOnenoteSectionGroupsSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsDeleteParentNotebook(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsSectionsDeleteParentNotebookRequest {
	return ApiUsersOnenoteSectionGroupsSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsDeleteParentNotebookExecute(r ApiUsersOnenoteSectionGroupsSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsDeleteParentSectionGroup(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest {
	return ApiUsersOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsDeleteParentSectionGroupExecute(r ApiUsersOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsSectionsGetPagesRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsSectionsGetPagesRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsGetPagesExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsGetPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsSectionsGetPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsGetPages(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsSectionsGetPagesRequest {
	return ApiUsersOnenoteSectionGroupsSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsGetPagesExecute(r ApiUsersOnenoteSectionGroupsSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiUsersOnenoteSectionGroupsSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsGetPagesContentExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsGetPagesContent Get media content for the navigation property pages from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsSectionsGetPagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsGetPagesContent(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsSectionsGetPagesContentRequest {
	return ApiUsersOnenoteSectionGroupsSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsGetPagesContentExecute(r ApiUsersOnenoteSectionGroupsSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsSectionsGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsSectionsGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsGetParentNotebookExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsGetParentNotebook Get parentNotebook from users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsGetParentNotebook(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsSectionsGetParentNotebookRequest {
	return ApiUsersOnenoteSectionGroupsSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsGetParentNotebookExecute(r ApiUsersOnenoteSectionGroupsSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsGetParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsGetParentSectionGroup(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsSectionsGetParentSectionGroupRequest {
	return ApiUsersOnenoteSectionGroupsSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsGetParentSectionGroupExecute(r ApiUsersOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionGroupsSectionsListPagesRequest) Top(top int32) ApiUsersOnenoteSectionGroupsSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionGroupsSectionsListPagesRequest) Skip(skip int32) ApiUsersOnenoteSectionGroupsSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionGroupsSectionsListPagesRequest) Search(search string) ApiUsersOnenoteSectionGroupsSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionGroupsSectionsListPagesRequest) Filter(filter string) ApiUsersOnenoteSectionGroupsSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionGroupsSectionsListPagesRequest) Count(count bool) ApiUsersOnenoteSectionGroupsSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionGroupsSectionsListPagesRequest) Orderby(orderby []string) ApiUsersOnenoteSectionGroupsSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsSectionsListPagesRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsSectionsListPagesRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsListPagesExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsListPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsListPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsListPages(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsSectionsListPagesRequest {
	return ApiUsersOnenoteSectionGroupsSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsListPagesExecute(r ApiUsersOnenoteSectionGroupsSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesDeleteParentNotebook(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesDeleteParentNotebookExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesDeleteParentSectionExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesDeleteParentSection Delete navigation property parentSection for users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesDeleteParentSection(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesDeleteParentSectionExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesGetParentNotebookExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesGetParentNotebook Get parentNotebook from users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesGetParentNotebook(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesGetParentNotebookExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesGetParentSectionExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesGetParentSection Get parentSection from users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsSectionsPagesGetParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesGetParentSection(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsSectionsPagesGetParentSectionRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesGetParentSectionExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroups(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSections Create new navigation property to sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroups(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, sectionGroupId1 string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSections Delete navigation property sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroups(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, sectionGroupId1 string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Top(top int32) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Search(search string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Filter(filter string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Count(count bool) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroups(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Top(top int32) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Skip(skip int32) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Search(search string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Filter(filter string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Count(count bool) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesParentNotebookListSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookListSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroups(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, sectionGroupId1 string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSections Update the navigation property sections in users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesUpdateParentNotebook(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesUpdateParentNotebookExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsPagesUpdateParentSectionExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsPagesUpdateParentSection Update the navigation property parentSection in users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesUpdateParentSection(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest {
	return ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsPagesUpdateParentSectionExecute(r ApiUsersOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroups(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsParentNotebookCreateSections Create new navigation property to sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookCreateSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionsExecute(r ApiUsersOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroups(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, sectionGroupId1 string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsParentNotebookDeleteSections Delete navigation property sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookDeleteSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsExecute(r ApiUsersOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsParentNotebookGetSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookGetSectionGroups(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, sectionGroupId1 string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsParentNotebookGetSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsParentNotebookGetSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookGetSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookGetSectionsExecute(r ApiUsersOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Top(top int32) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Search(search string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Filter(filter string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Count(count bool) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroups(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Top(top int32) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Skip(skip int32) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Search(search string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Filter(filter string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Count(count bool) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsParentNotebookListSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsParentNotebookListSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookListSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookListSectionsExecute(r ApiUsersOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroups(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, sectionGroupId1 string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsParentNotebookUpdateSections Update the navigation property sections in users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookUpdateSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest {
	return ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsExecute(r ApiUsersOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenoteSectionGroupsSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsUpdatePagesExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsUpdatePages Update the navigation property pages in users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsSectionsUpdatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsUpdatePages(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsSectionsUpdatePagesRequest {
	return ApiUsersOnenoteSectionGroupsSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsUpdatePagesExecute(r ApiUsersOnenoteSectionGroupsSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiUsersOnenoteSectionGroupsSectionsUpdatePagesContentRequest) Body(body *os.File) ApiUsersOnenoteSectionGroupsSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsUpdatePagesContentExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsUpdatePagesContent Update media content for the navigation property pages in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionGroupsSectionsUpdatePagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsUpdatePagesContent(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionGroupsSectionsUpdatePagesContentRequest {
	return ApiUsersOnenoteSectionGroupsSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsUpdatePagesContentExecute(r ApiUsersOnenoteSectionGroupsSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteSectionGroupsSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsUpdateParentNotebook(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsSectionsUpdateParentNotebookRequest {
	return ApiUsersOnenoteSectionGroupsSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsUpdateParentNotebookExecute(r ApiUsersOnenoteSectionGroupsSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsSectionsUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionGroupsSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsUpdateParentSectionGroup(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest {
	return ApiUsersOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsSectionsUpdateParentSectionGroupExecute(r ApiUsersOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsUpdateParentNotebook(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteSectionGroupsUpdateParentNotebookRequest {
	return ApiUsersOnenoteSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsUpdateParentNotebookExecute(r ApiUsersOnenoteSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsUpdateParentSectionGroup(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteSectionGroupsUpdateParentSectionGroupRequest {
	return ApiUsersOnenoteSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsUpdateParentSectionGroupExecute(r ApiUsersOnenoteSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionGroupsUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsUpdateSectionGroups(ctx _context.Context, userId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenoteSectionGroupsUpdateSectionGroupsRequest {
	return ApiUsersOnenoteSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsUpdateSectionGroupsExecute(r ApiUsersOnenoteSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionGroupsUpdateSectionsExecute(r)
}

/*
UsersOnenoteSectionGroupsUpdateSections Update the navigation property sections in users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionGroupsUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsUpdateSections(ctx _context.Context, userId string, sectionGroupId string, onenoteSectionId string) ApiUsersOnenoteSectionGroupsUpdateSectionsRequest {
	return ApiUsersOnenoteSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionGroupsUpdateSectionsExecute(r ApiUsersOnenoteSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiUsersOnenoteSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenoteSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenoteSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsCreatePagesExecute(r)
}

/*
UsersOnenoteSectionsCreatePages Create new navigation property to pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsCreatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsCreatePages(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsCreatePagesRequest {
	return ApiUsersOnenoteSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteSectionsCreatePagesExecute(r ApiUsersOnenoteSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsDeletePagesExecute(r)
}

/*
UsersOnenoteSectionsDeletePages Delete navigation property pages for users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionsDeletePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsDeletePages(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionsDeletePagesRequest {
	return ApiUsersOnenoteSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsDeletePagesExecute(r ApiUsersOnenoteSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteSectionsDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsDeleteParentNotebook(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsDeleteParentNotebookRequest {
	return ApiUsersOnenoteSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsDeleteParentNotebookExecute(r ApiUsersOnenoteSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsDeleteParentSectionGroup(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsDeleteParentSectionGroupRequest {
	return ApiUsersOnenoteSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsDeleteParentSectionGroupExecute(r ApiUsersOnenoteSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsGetPagesRequest) Select_(select_ []string) ApiUsersOnenoteSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsGetPagesRequest) Expand(expand []string) ApiUsersOnenoteSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsGetPagesExecute(r)
}

/*
UsersOnenoteSectionsGetPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionsGetPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsGetPages(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionsGetPagesRequest {
	return ApiUsersOnenoteSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteSectionsGetPagesExecute(r ApiUsersOnenoteSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiUsersOnenoteSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsGetPagesContentExecute(r)
}

/*
UsersOnenoteSectionsGetPagesContent Get media content for the navigation property pages from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionsGetPagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsGetPagesContent(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionsGetPagesContentRequest {
	return ApiUsersOnenoteSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *UsersOnenoteApiService) UsersOnenoteSectionsGetPagesContentExecute(r ApiUsersOnenoteSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsGetParentNotebookExecute(r)
}

/*
UsersOnenoteSectionsGetParentNotebook Get parentNotebook from users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsGetParentNotebook(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsGetParentNotebookRequest {
	return ApiUsersOnenoteSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteSectionsGetParentNotebookExecute(r ApiUsersOnenoteSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenoteSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenoteSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsGetParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionsGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsGetParentSectionGroup(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsGetParentSectionGroupRequest {
	return ApiUsersOnenoteSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsGetParentSectionGroupExecute(r ApiUsersOnenoteSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionsListPagesRequest) Top(top int32) ApiUsersOnenoteSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionsListPagesRequest) Skip(skip int32) ApiUsersOnenoteSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionsListPagesRequest) Search(search string) ApiUsersOnenoteSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionsListPagesRequest) Filter(filter string) ApiUsersOnenoteSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionsListPagesRequest) Count(count bool) ApiUsersOnenoteSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionsListPagesRequest) Orderby(orderby []string) ApiUsersOnenoteSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionsListPagesRequest) Select_(select_ []string) ApiUsersOnenoteSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsListPagesRequest) Expand(expand []string) ApiUsersOnenoteSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsListPagesExecute(r)
}

/*
UsersOnenoteSectionsListPages Get pages from users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsListPagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsListPages(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsListPagesRequest {
	return ApiUsersOnenoteSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *UsersOnenoteApiService) UsersOnenoteSectionsListPagesExecute(r ApiUsersOnenoteSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionsPagesDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesDeleteParentNotebook(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionsPagesDeleteParentNotebookRequest {
	return ApiUsersOnenoteSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesDeleteParentNotebookExecute(r ApiUsersOnenoteSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesDeleteParentSectionExecute(r)
}

/*
UsersOnenoteSectionsPagesDeleteParentSection Delete navigation property parentSection for users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionsPagesDeleteParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesDeleteParentSection(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionsPagesDeleteParentSectionRequest {
	return ApiUsersOnenoteSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesDeleteParentSectionExecute(r ApiUsersOnenoteSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesGetParentNotebookExecute(r)
}

/*
UsersOnenoteSectionsPagesGetParentNotebook Get parentNotebook from users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionsPagesGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesGetParentNotebook(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionsPagesGetParentNotebookRequest {
	return ApiUsersOnenoteSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesGetParentNotebookExecute(r ApiUsersOnenoteSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiUsersOnenoteSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiUsersOnenoteSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesGetParentSectionExecute(r)
}

/*
UsersOnenoteSectionsPagesGetParentSection Get parentSection from users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionsPagesGetParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesGetParentSection(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionsPagesGetParentSectionRequest {
	return ApiUsersOnenoteSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesGetParentSectionExecute(r ApiUsersOnenoteSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookCreateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookCreateSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookCreateSectionGroupsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookCreateSectionsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookCreateSections Create new navigation property to sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookCreateSections(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookCreateSectionsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookDeleteSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookDeleteSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookDeleteSectionGroupsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookDeleteSectionsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookDeleteSections Delete navigation property sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookDeleteSections(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookDeleteSectionsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookGetSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookGetSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookGetSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiUsersOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookGetSectionGroupsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsPagesParentNotebookGetSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsPagesParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsPagesParentNotebookGetSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionsPagesParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookGetSectionsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookGetSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsPagesParentNotebookGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookGetSections(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsPagesParentNotebookGetSectionsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookGetSectionsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Top(top int32) ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Search(search string) ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Filter(filter string) ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Count(count bool) ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookListSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookListSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookListSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookListSectionGroupsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest) Top(top int32) ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest) Skip(skip int32) ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest) Search(search string) ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest) Filter(filter string) ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest) Count(count bool) ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookListSectionsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookListSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookListSections(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookListSectionsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSections Create new navigation property to sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSections(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSections Delete navigation property sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSections(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSections(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsListSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsListSections(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSections Update the navigation property sections in users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSections(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookUpdateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookUpdateSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookUpdateSectionGroupsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesParentNotebookUpdateSectionsExecute(r)
}

/*
UsersOnenoteSectionsPagesParentNotebookUpdateSections Update the navigation property sections in users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookUpdateSections(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionsRequest {
	return ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesParentNotebookUpdateSectionsExecute(r ApiUsersOnenoteSectionsPagesParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionsPagesUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesUpdateParentNotebook(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionsPagesUpdateParentNotebookRequest {
	return ApiUsersOnenoteSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesUpdateParentNotebookExecute(r ApiUsersOnenoteSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsPagesUpdateParentSectionExecute(r)
}

/*
UsersOnenoteSectionsPagesUpdateParentSection Update the navigation property parentSection in users

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionsPagesUpdateParentSectionRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesUpdateParentSection(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionsPagesUpdateParentSectionRequest {
	return ApiUsersOnenoteSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsPagesUpdateParentSectionExecute(r ApiUsersOnenoteSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenoteSectionsParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookCreateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentNotebookCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookCreateSectionGroups(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentNotebookCreateSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookCreateSectionGroupsExecute(r ApiUsersOnenoteSectionsParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenoteSectionsParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionsParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookCreateSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookCreateSections Create new navigation property to sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentNotebookCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookCreateSections(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentNotebookCreateSectionsRequest {
	return ApiUsersOnenoteSectionsParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookCreateSectionsExecute(r ApiUsersOnenoteSectionsParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookDeleteSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookDeleteSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentNotebookDeleteSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookDeleteSectionGroupsExecute(r ApiUsersOnenoteSectionsParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookDeleteSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookDeleteSections Delete navigation property sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentNotebookDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookDeleteSections(ctx _context.Context, userId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsParentNotebookDeleteSectionsRequest {
	return ApiUsersOnenoteSectionsParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookDeleteSectionsExecute(r ApiUsersOnenoteSectionsParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookGetSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookGetSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookGetSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentNotebookGetSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookGetSectionGroupsExecute(r ApiUsersOnenoteSectionsParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentNotebookGetSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentNotebookGetSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookGetSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookGetSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentNotebookGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookGetSections(ctx _context.Context, userId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsParentNotebookGetSectionsRequest {
	return ApiUsersOnenoteSectionsParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookGetSectionsExecute(r ApiUsersOnenoteSectionsParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest) Top(top int32) ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest) Search(search string) ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest) Filter(filter string) ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest) Count(count bool) ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookListSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookListSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookListSectionGroups(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookListSectionGroupsExecute(r ApiUsersOnenoteSectionsParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionsParentNotebookListSectionsRequest) Top(top int32) ApiUsersOnenoteSectionsParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionsParentNotebookListSectionsRequest) Skip(skip int32) ApiUsersOnenoteSectionsParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionsParentNotebookListSectionsRequest) Search(search string) ApiUsersOnenoteSectionsParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionsParentNotebookListSectionsRequest) Filter(filter string) ApiUsersOnenoteSectionsParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionsParentNotebookListSectionsRequest) Count(count bool) ApiUsersOnenoteSectionsParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionsParentNotebookListSectionsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionsParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentNotebookListSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentNotebookListSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookListSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookListSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentNotebookListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookListSections(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentNotebookListSectionsRequest {
	return ApiUsersOnenoteSectionsParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookListSectionsExecute(r ApiUsersOnenoteSectionsParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsCreateSections Create new navigation property to sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsCreateSections(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionsExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsDeleteSections Delete navigation property sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsDeleteSections(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsGetSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsGetSections(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsGetSectionsExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsListSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsListSections(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsListSectionsExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string, sectionGroupId1 string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookSectionGroupsUpdateSections Update the navigation property sections in users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsUpdateSections(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsExecute(r ApiUsersOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionsParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookUpdateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentNotebookUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookUpdateSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentNotebookUpdateSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookUpdateSectionGroupsExecute(r ApiUsersOnenoteSectionsParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteSectionsParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionsParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionsParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentNotebookUpdateSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentNotebookUpdateSections Update the navigation property sections in users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentNotebookUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookUpdateSections(ctx _context.Context, userId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsParentNotebookUpdateSectionsRequest {
	return ApiUsersOnenoteSectionsParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentNotebookUpdateSectionsExecute(r ApiUsersOnenoteSectionsParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupCreateSectionGroups(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupCreateSectionGroupsExecute(r ApiUsersOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenoteSectionsParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionsParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupCreateSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupCreateSections Create new navigation property to sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupCreateSections(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentSectionGroupCreateSectionsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupCreateSectionsExecute(r ApiUsersOnenoteSectionsParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupDeleteParentNotebook(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupDeleteParentNotebookExecute(r ApiUsersOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupDeleteParentSectionGroupExecute(r ApiUsersOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupDeleteSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupDeleteSectionGroupsExecute(r ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupDeleteSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupDeleteSections Delete navigation property sections for users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupDeleteSections(ctx _context.Context, userId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupDeleteSectionsExecute(r ApiUsersOnenoteSectionsParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupGetParentNotebookExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupGetParentNotebook Get parentNotebook from users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupGetParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupGetParentNotebook(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentSectionGroupGetParentNotebookRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupGetParentNotebookExecute(r ApiUsersOnenoteSectionsParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupGetParentSectionGroup Get parentSectionGroup from users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupGetParentSectionGroup(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupGetParentSectionGroupExecute(r ApiUsersOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupGetSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupGetSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentSectionGroupGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupGetSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentSectionGroupGetSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupGetSectionGroupsExecute(r ApiUsersOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupGetSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupGetSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupGetSections(ctx _context.Context, userId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsParentSectionGroupGetSectionsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupGetSectionsExecute(r ApiUsersOnenoteSectionsParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Search(search string) ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupListSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupListSectionGroups Get sectionGroups from users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupListSectionGroups(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupListSectionGroupsExecute(r ApiUsersOnenoteSectionsParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest) Top(top int32) ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest) Skip(skip int32) ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest) Search(search string) ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest) Filter(filter string) ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest) Count(count bool) ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupListSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupListSections Get sections from users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupListSections(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupListSectionsExecute(r ApiUsersOnenoteSectionsParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroups(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsExecute(r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupParentNotebookCreateSections Create new navigation property to sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookCreateSections(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsExecute(r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSections Delete navigation property sections for users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSections(ctx _context.Context, userId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsExecute(r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsExecute(r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupParentNotebookGetSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookGetSections(ctx _context.Context, userId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionsExecute(r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Top(top int32) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Search(search string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Filter(filter string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Count(count bool) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroups Get sectionGroups from users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroups(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsExecute(r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Top(top int32) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Skip(skip int32) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Search(search string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Filter(filter string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Count(count bool) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Orderby(orderby []string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Select_(select_ []string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Expand(expand []string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupParentNotebookListSections Get sections from users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookListSections(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsExecute(r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSections Update the navigation property sections in users

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSections(ctx _context.Context, userId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsExecute(r ApiUsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupUpdateParentNotebook(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupUpdateParentNotebookExecute(r ApiUsersOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupUpdateParentSectionGroupExecute(r ApiUsersOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupUpdateSectionGroups(ctx _context.Context, userId string, onenoteSectionId string, sectionGroupId string) ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupUpdateSectionGroupsExecute(r ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsParentSectionGroupUpdateSectionsExecute(r)
}

/*
UsersOnenoteSectionsParentSectionGroupUpdateSections Update the navigation property sections in users

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupUpdateSections(ctx _context.Context, userId string, onenoteSectionId string, onenoteSectionId1 string) ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionsRequest {
	return ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsParentSectionGroupUpdateSectionsExecute(r ApiUsersOnenoteSectionsParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiUsersOnenoteSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenoteSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenoteSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsUpdatePagesExecute(r)
}

/*
UsersOnenoteSectionsUpdatePages Update the navigation property pages in users

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionsUpdatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsUpdatePages(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionsUpdatePagesRequest {
	return ApiUsersOnenoteSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsUpdatePagesExecute(r ApiUsersOnenoteSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiUsersOnenoteSectionsUpdatePagesContentRequest) Body(body *os.File) ApiUsersOnenoteSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiUsersOnenoteSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsUpdatePagesContentExecute(r)
}

/*
UsersOnenoteSectionsUpdatePagesContent Update media content for the navigation property pages in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteSectionsUpdatePagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsUpdatePagesContent(ctx _context.Context, userId string, onenoteSectionId string, onenotePageId string) ApiUsersOnenoteSectionsUpdatePagesContentRequest {
	return ApiUsersOnenoteSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsUpdatePagesContentExecute(r ApiUsersOnenoteSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsUpdateParentNotebookExecute(r)
}

/*
UsersOnenoteSectionsUpdateParentNotebook Update the navigation property parentNotebook in users

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsUpdateParentNotebookRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsUpdateParentNotebook(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsUpdateParentNotebookRequest {
	return ApiUsersOnenoteSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsUpdateParentNotebookExecute(r ApiUsersOnenoteSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteSectionsUpdateParentSectionGroupExecute(r)
}

/*
UsersOnenoteSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in users

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteSectionsUpdateParentSectionGroupRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteSectionsUpdateParentSectionGroup(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteSectionsUpdateParentSectionGroupRequest {
	return ApiUsersOnenoteSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteSectionsUpdateParentSectionGroupExecute(r ApiUsersOnenoteSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteUpdateNotebooksRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	notebookId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiUsersOnenoteUpdateNotebooksRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiUsersOnenoteUpdateNotebooksRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiUsersOnenoteUpdateNotebooksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteUpdateNotebooksExecute(r)
}

/*
UsersOnenoteUpdateNotebooks Update the navigation property notebooks in users

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param notebookId key: id of notebook
 @return ApiUsersOnenoteUpdateNotebooksRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteUpdateNotebooks(ctx _context.Context, userId string, notebookId string) ApiUsersOnenoteUpdateNotebooksRequest {
	return ApiUsersOnenoteUpdateNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		notebookId: notebookId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteUpdateNotebooksExecute(r ApiUsersOnenoteUpdateNotebooksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteUpdateNotebooks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/notebooks/{notebook-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteUpdateOperationsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteOperationId string
	microsoftGraphOnenoteOperation *MicrosoftGraphOnenoteOperation
}

// New navigation property values
func (r ApiUsersOnenoteUpdateOperationsRequest) MicrosoftGraphOnenoteOperation(microsoftGraphOnenoteOperation MicrosoftGraphOnenoteOperation) ApiUsersOnenoteUpdateOperationsRequest {
	r.microsoftGraphOnenoteOperation = &microsoftGraphOnenoteOperation
	return r
}

func (r ApiUsersOnenoteUpdateOperationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteUpdateOperationsExecute(r)
}

/*
UsersOnenoteUpdateOperations Update the navigation property operations in users

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteOperationId key: id of onenoteOperation
 @return ApiUsersOnenoteUpdateOperationsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteUpdateOperations(ctx _context.Context, userId string, onenoteOperationId string) ApiUsersOnenoteUpdateOperationsRequest {
	return ApiUsersOnenoteUpdateOperationsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteOperationId: onenoteOperationId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteUpdateOperationsExecute(r ApiUsersOnenoteUpdateOperationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteUpdateOperations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/operations/{onenoteOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteOperation-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteOperation == nil {
		return nil, reportError("microsoftGraphOnenoteOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiUsersOnenoteUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiUsersOnenoteUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiUsersOnenoteUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteUpdatePagesExecute(r)
}

/*
UsersOnenoteUpdatePages Update the navigation property pages in users

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteUpdatePagesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteUpdatePages(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenoteUpdatePagesRequest {
	return ApiUsersOnenoteUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteUpdatePagesExecute(r ApiUsersOnenoteUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiUsersOnenoteUpdatePagesContentRequest) Body(body *os.File) ApiUsersOnenoteUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiUsersOnenoteUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteUpdatePagesContentExecute(r)
}

/*
UsersOnenoteUpdatePagesContent Update media content for the navigation property pages in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenotePageId key: id of onenotePage
 @return ApiUsersOnenoteUpdatePagesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteUpdatePagesContent(ctx _context.Context, userId string, onenotePageId string) ApiUsersOnenoteUpdatePagesContentRequest {
	return ApiUsersOnenoteUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteUpdatePagesContentExecute(r ApiUsersOnenoteUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteUpdateResourcesRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteResourceId string
	microsoftGraphOnenoteResource *MicrosoftGraphOnenoteResource
}

// New navigation property values
func (r ApiUsersOnenoteUpdateResourcesRequest) MicrosoftGraphOnenoteResource(microsoftGraphOnenoteResource MicrosoftGraphOnenoteResource) ApiUsersOnenoteUpdateResourcesRequest {
	r.microsoftGraphOnenoteResource = &microsoftGraphOnenoteResource
	return r
}

func (r ApiUsersOnenoteUpdateResourcesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteUpdateResourcesExecute(r)
}

/*
UsersOnenoteUpdateResources Update the navigation property resources in users

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteResourceId key: id of onenoteResource
 @return ApiUsersOnenoteUpdateResourcesRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteUpdateResources(ctx _context.Context, userId string, onenoteResourceId string) ApiUsersOnenoteUpdateResourcesRequest {
	return ApiUsersOnenoteUpdateResourcesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteUpdateResourcesExecute(r ApiUsersOnenoteUpdateResourcesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteUpdateResources")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/resources/{onenoteResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteResource == nil {
		return nil, reportError("microsoftGraphOnenoteResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteUpdateResourcesContentRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteResourceId string
	body **os.File
}

// New media content.
func (r ApiUsersOnenoteUpdateResourcesContentRequest) Body(body *os.File) ApiUsersOnenoteUpdateResourcesContentRequest {
	r.body = &body
	return r
}

func (r ApiUsersOnenoteUpdateResourcesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteUpdateResourcesContentExecute(r)
}

/*
UsersOnenoteUpdateResourcesContent Update media content for the navigation property resources in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteResourceId key: id of onenoteResource
 @return ApiUsersOnenoteUpdateResourcesContentRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteUpdateResourcesContent(ctx _context.Context, userId string, onenoteResourceId string) ApiUsersOnenoteUpdateResourcesContentRequest {
	return ApiUsersOnenoteUpdateResourcesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteUpdateResourcesContentExecute(r ApiUsersOnenoteUpdateResourcesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteUpdateResourcesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/resources/{onenoteResource-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiUsersOnenoteUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiUsersOnenoteUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiUsersOnenoteUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteUpdateSectionGroupsExecute(r)
}

/*
UsersOnenoteUpdateSectionGroups Update the navigation property sectionGroups in users

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param sectionGroupId key: id of sectionGroup
 @return ApiUsersOnenoteUpdateSectionGroupsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteUpdateSectionGroups(ctx _context.Context, userId string, sectionGroupId string) ApiUsersOnenoteUpdateSectionGroupsRequest {
	return ApiUsersOnenoteUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteUpdateSectionGroupsExecute(r ApiUsersOnenoteUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersOnenoteUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiUsersOnenoteUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiUsersOnenoteUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiUsersOnenoteUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersOnenoteUpdateSectionsExecute(r)
}

/*
UsersOnenoteUpdateSections Update the navigation property sections in users

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param onenoteSectionId key: id of onenoteSection
 @return ApiUsersOnenoteUpdateSectionsRequest
*/
func (a *UsersOnenoteApiService) UsersOnenoteUpdateSections(ctx _context.Context, userId string, onenoteSectionId string) ApiUsersOnenoteUpdateSectionsRequest {
	return ApiUsersOnenoteUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersOnenoteUpdateSectionsExecute(r ApiUsersOnenoteUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersOnenoteUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersUpdateOnenoteRequest struct {
	ctx _context.Context
	ApiService *UsersOnenoteApiService
	userId string
	microsoftGraphOnenote *MicrosoftGraphOnenote
}

// New navigation property values
func (r ApiUsersUpdateOnenoteRequest) MicrosoftGraphOnenote(microsoftGraphOnenote MicrosoftGraphOnenote) ApiUsersUpdateOnenoteRequest {
	r.microsoftGraphOnenote = &microsoftGraphOnenote
	return r
}

func (r ApiUsersUpdateOnenoteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersUpdateOnenoteExecute(r)
}

/*
UsersUpdateOnenote Update the navigation property onenote in users

Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUpdateOnenoteRequest
*/
func (a *UsersOnenoteApiService) UsersUpdateOnenote(ctx _context.Context, userId string) ApiUsersUpdateOnenoteRequest {
	return ApiUsersUpdateOnenoteRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
func (a *UsersOnenoteApiService) UsersUpdateOnenoteExecute(r ApiUsersUpdateOnenoteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersOnenoteApiService.UsersUpdateOnenote")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/onenote"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenote == nil {
		return nil, reportError("microsoftGraphOnenote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
