/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphSubjectRightsRequestType the model 'MicrosoftGraphSubjectRightsRequestType'
type MicrosoftGraphSubjectRightsRequestType string

// List of microsoft.graph.subjectRightsRequestType
const (
	EXPORT MicrosoftGraphSubjectRightsRequestType = "export"
	DELETE MicrosoftGraphSubjectRightsRequestType = "delete"
	ACCESS MicrosoftGraphSubjectRightsRequestType = "access"
	TAG_FOR_ACTION MicrosoftGraphSubjectRightsRequestType = "tagForAction"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphSubjectRightsRequestType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphSubjectRightsRequestType enum
var AllowedMicrosoftGraphSubjectRightsRequestTypeEnumValues = []MicrosoftGraphSubjectRightsRequestType{
	"export",
	"delete",
	"access",
	"tagForAction",
	"unknownFutureValue",
}

func (v *MicrosoftGraphSubjectRightsRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphSubjectRightsRequestType(value)
	for _, existing := range AllowedMicrosoftGraphSubjectRightsRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphSubjectRightsRequestType", value)
}

// NewMicrosoftGraphSubjectRightsRequestTypeFromValue returns a pointer to a valid MicrosoftGraphSubjectRightsRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphSubjectRightsRequestTypeFromValue(v string) (*MicrosoftGraphSubjectRightsRequestType, error) {
	ev := MicrosoftGraphSubjectRightsRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphSubjectRightsRequestType: valid values are %v", v, AllowedMicrosoftGraphSubjectRightsRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphSubjectRightsRequestType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphSubjectRightsRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.subjectRightsRequestType value
func (v MicrosoftGraphSubjectRightsRequestType) Ptr() *MicrosoftGraphSubjectRightsRequestType {
	return &v
}

type NullableMicrosoftGraphSubjectRightsRequestType struct {
	value *MicrosoftGraphSubjectRightsRequestType
	isSet bool
}

func (v NullableMicrosoftGraphSubjectRightsRequestType) Get() *MicrosoftGraphSubjectRightsRequestType {
	return v.value
}

func (v *NullableMicrosoftGraphSubjectRightsRequestType) Set(val *MicrosoftGraphSubjectRightsRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphSubjectRightsRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphSubjectRightsRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphSubjectRightsRequestType(val *MicrosoftGraphSubjectRightsRequestType) *NullableMicrosoftGraphSubjectRightsRequestType {
	return &NullableMicrosoftGraphSubjectRightsRequestType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphSubjectRightsRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphSubjectRightsRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

