/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject1420 struct for InlineObject1420
type InlineObject1420 struct {
	LookupValue AnyOfobject `json:"lookupValue,omitempty"`
	LookupArray AnyOfobject `json:"lookupArray,omitempty"`
	MatchType AnyOfobject `json:"matchType,omitempty"`
}

// NewInlineObject1420 instantiates a new InlineObject1420 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1420() *InlineObject1420 {
	this := InlineObject1420{}
	return &this
}

// NewInlineObject1420WithDefaults instantiates a new InlineObject1420 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1420WithDefaults() *InlineObject1420 {
	this := InlineObject1420{}
	return &this
}

// GetLookupValue returns the LookupValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1420) GetLookupValue() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.LookupValue
}

// GetLookupValueOk returns a tuple with the LookupValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1420) GetLookupValueOk() (*AnyOfobject, bool) {
	if o == nil || o.LookupValue == nil {
		return nil, false
	}
	return &o.LookupValue, true
}

// HasLookupValue returns a boolean if a field has been set.
func (o *InlineObject1420) HasLookupValue() bool {
	if o != nil && o.LookupValue != nil {
		return true
	}

	return false
}

// SetLookupValue gets a reference to the given AnyOfobject and assigns it to the LookupValue field.
func (o *InlineObject1420) SetLookupValue(v AnyOfobject) {
	o.LookupValue = v
}

// GetLookupArray returns the LookupArray field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1420) GetLookupArray() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.LookupArray
}

// GetLookupArrayOk returns a tuple with the LookupArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1420) GetLookupArrayOk() (*AnyOfobject, bool) {
	if o == nil || o.LookupArray == nil {
		return nil, false
	}
	return &o.LookupArray, true
}

// HasLookupArray returns a boolean if a field has been set.
func (o *InlineObject1420) HasLookupArray() bool {
	if o != nil && o.LookupArray != nil {
		return true
	}

	return false
}

// SetLookupArray gets a reference to the given AnyOfobject and assigns it to the LookupArray field.
func (o *InlineObject1420) SetLookupArray(v AnyOfobject) {
	o.LookupArray = v
}

// GetMatchType returns the MatchType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1420) GetMatchType() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.MatchType
}

// GetMatchTypeOk returns a tuple with the MatchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1420) GetMatchTypeOk() (*AnyOfobject, bool) {
	if o == nil || o.MatchType == nil {
		return nil, false
	}
	return &o.MatchType, true
}

// HasMatchType returns a boolean if a field has been set.
func (o *InlineObject1420) HasMatchType() bool {
	if o != nil && o.MatchType != nil {
		return true
	}

	return false
}

// SetMatchType gets a reference to the given AnyOfobject and assigns it to the MatchType field.
func (o *InlineObject1420) SetMatchType(v AnyOfobject) {
	o.MatchType = v
}

func (o InlineObject1420) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LookupValue != nil {
		toSerialize["lookupValue"] = o.LookupValue
	}
	if o.LookupArray != nil {
		toSerialize["lookupArray"] = o.LookupArray
	}
	if o.MatchType != nil {
		toSerialize["matchType"] = o.MatchType
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1420 struct {
	value *InlineObject1420
	isSet bool
}

func (v NullableInlineObject1420) Get() *InlineObject1420 {
	return v.value
}

func (v *NullableInlineObject1420) Set(val *InlineObject1420) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1420) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1420) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1420(val *InlineObject1420) *NullableInlineObject1420 {
	return &NullableInlineObject1420{value: val, isSet: true}
}

func (v NullableInlineObject1420) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1420) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


