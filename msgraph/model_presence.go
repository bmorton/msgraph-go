/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Presence struct for Presence
type Presence struct {
	// The supplemental information to a user's availability. Possible values are Available, Away, BeRightBack, Busy, DoNotDisturb, InACall, InAConferenceCall, Inactive, InAMeeting, Offline, OffWork, OutOfOffice, PresenceUnknown, Presenting, UrgentInterruptionsOnly.
	Activity NullableString `json:"activity,omitempty"`
	// The base presence information for a user. Possible values are Available, AvailableIdle,  Away, BeRightBack, Busy, BusyIdle, DoNotDisturb, Offline, PresenceUnknown
	Availability NullableString `json:"availability,omitempty"`
}

// NewPresence instantiates a new Presence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPresence() *Presence {
	this := Presence{}
	return &this
}

// NewPresenceWithDefaults instantiates a new Presence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPresenceWithDefaults() *Presence {
	this := Presence{}
	return &this
}

// GetActivity returns the Activity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Presence) GetActivity() string {
	if o == nil || o.Activity.Get() == nil {
		var ret string
		return ret
	}
	return *o.Activity.Get()
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Presence) GetActivityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Activity.Get(), o.Activity.IsSet()
}

// HasActivity returns a boolean if a field has been set.
func (o *Presence) HasActivity() bool {
	if o != nil && o.Activity.IsSet() {
		return true
	}

	return false
}

// SetActivity gets a reference to the given NullableString and assigns it to the Activity field.
func (o *Presence) SetActivity(v string) {
	o.Activity.Set(&v)
}
// SetActivityNil sets the value for Activity to be an explicit nil
func (o *Presence) SetActivityNil() {
	o.Activity.Set(nil)
}

// UnsetActivity ensures that no value is present for Activity, not even an explicit nil
func (o *Presence) UnsetActivity() {
	o.Activity.Unset()
}

// GetAvailability returns the Availability field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Presence) GetAvailability() string {
	if o == nil || o.Availability.Get() == nil {
		var ret string
		return ret
	}
	return *o.Availability.Get()
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Presence) GetAvailabilityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Availability.Get(), o.Availability.IsSet()
}

// HasAvailability returns a boolean if a field has been set.
func (o *Presence) HasAvailability() bool {
	if o != nil && o.Availability.IsSet() {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given NullableString and assigns it to the Availability field.
func (o *Presence) SetAvailability(v string) {
	o.Availability.Set(&v)
}
// SetAvailabilityNil sets the value for Availability to be an explicit nil
func (o *Presence) SetAvailabilityNil() {
	o.Availability.Set(nil)
}

// UnsetAvailability ensures that no value is present for Availability, not even an explicit nil
func (o *Presence) UnsetAvailability() {
	o.Availability.Unset()
}

func (o Presence) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Activity.IsSet() {
		toSerialize["activity"] = o.Activity.Get()
	}
	if o.Availability.IsSet() {
		toSerialize["availability"] = o.Availability.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePresence struct {
	value *Presence
	isSet bool
}

func (v NullablePresence) Get() *Presence {
	return v.value
}

func (v *NullablePresence) Set(val *Presence) {
	v.value = val
	v.isSet = true
}

func (v NullablePresence) IsSet() bool {
	return v.isSet
}

func (v *NullablePresence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePresence(val *Presence) *NullablePresence {
	return &NullablePresence{value: val, isSet: true}
}

func (v NullablePresence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePresence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


