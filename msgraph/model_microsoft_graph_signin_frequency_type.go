/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphSigninFrequencyType the model 'MicrosoftGraphSigninFrequencyType'
type MicrosoftGraphSigninFrequencyType string

// List of microsoft.graph.signinFrequencyType
const (
	DAYS MicrosoftGraphSigninFrequencyType = "days"
	HOURS MicrosoftGraphSigninFrequencyType = "hours"
)

// All allowed values of MicrosoftGraphSigninFrequencyType enum
var AllowedMicrosoftGraphSigninFrequencyTypeEnumValues = []MicrosoftGraphSigninFrequencyType{
	"days",
	"hours",
}

func (v *MicrosoftGraphSigninFrequencyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphSigninFrequencyType(value)
	for _, existing := range AllowedMicrosoftGraphSigninFrequencyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphSigninFrequencyType", value)
}

// NewMicrosoftGraphSigninFrequencyTypeFromValue returns a pointer to a valid MicrosoftGraphSigninFrequencyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphSigninFrequencyTypeFromValue(v string) (*MicrosoftGraphSigninFrequencyType, error) {
	ev := MicrosoftGraphSigninFrequencyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphSigninFrequencyType: valid values are %v", v, AllowedMicrosoftGraphSigninFrequencyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphSigninFrequencyType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphSigninFrequencyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.signinFrequencyType value
func (v MicrosoftGraphSigninFrequencyType) Ptr() *MicrosoftGraphSigninFrequencyType {
	return &v
}

type NullableMicrosoftGraphSigninFrequencyType struct {
	value *MicrosoftGraphSigninFrequencyType
	isSet bool
}

func (v NullableMicrosoftGraphSigninFrequencyType) Get() *MicrosoftGraphSigninFrequencyType {
	return v.value
}

func (v *NullableMicrosoftGraphSigninFrequencyType) Set(val *MicrosoftGraphSigninFrequencyType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphSigninFrequencyType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphSigninFrequencyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphSigninFrequencyType(val *MicrosoftGraphSigninFrequencyType) *NullableMicrosoftGraphSigninFrequencyType {
	return &NullableMicrosoftGraphSigninFrequencyType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphSigninFrequencyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphSigninFrequencyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

