/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphEnrollmentState the model 'MicrosoftGraphEnrollmentState'
type MicrosoftGraphEnrollmentState string

// List of microsoft.graph.enrollmentState
const (
	UNKNOWN MicrosoftGraphEnrollmentState = "unknown"
	ENROLLED MicrosoftGraphEnrollmentState = "enrolled"
	PENDING_RESET MicrosoftGraphEnrollmentState = "pendingReset"
	FAILED MicrosoftGraphEnrollmentState = "failed"
	NOT_CONTACTED MicrosoftGraphEnrollmentState = "notContacted"
)

// All allowed values of MicrosoftGraphEnrollmentState enum
var AllowedMicrosoftGraphEnrollmentStateEnumValues = []MicrosoftGraphEnrollmentState{
	"unknown",
	"enrolled",
	"pendingReset",
	"failed",
	"notContacted",
}

func (v *MicrosoftGraphEnrollmentState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphEnrollmentState(value)
	for _, existing := range AllowedMicrosoftGraphEnrollmentStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphEnrollmentState", value)
}

// NewMicrosoftGraphEnrollmentStateFromValue returns a pointer to a valid MicrosoftGraphEnrollmentState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphEnrollmentStateFromValue(v string) (*MicrosoftGraphEnrollmentState, error) {
	ev := MicrosoftGraphEnrollmentState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphEnrollmentState: valid values are %v", v, AllowedMicrosoftGraphEnrollmentStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphEnrollmentState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphEnrollmentStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.enrollmentState value
func (v MicrosoftGraphEnrollmentState) Ptr() *MicrosoftGraphEnrollmentState {
	return &v
}

type NullableMicrosoftGraphEnrollmentState struct {
	value *MicrosoftGraphEnrollmentState
	isSet bool
}

func (v NullableMicrosoftGraphEnrollmentState) Get() *MicrosoftGraphEnrollmentState {
	return v.value
}

func (v *NullableMicrosoftGraphEnrollmentState) Set(val *MicrosoftGraphEnrollmentState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphEnrollmentState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphEnrollmentState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphEnrollmentState(val *MicrosoftGraphEnrollmentState) *NullableMicrosoftGraphEnrollmentState {
	return &NullableMicrosoftGraphEnrollmentState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphEnrollmentState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphEnrollmentState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

