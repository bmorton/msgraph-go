/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ReportsPrintUsageByUserApiService ReportsPrintUsageByUserApi service
type ReportsPrintUsageByUserApiService service

type ApiReportsCreateDailyPrintUsageByUserRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByUserApiService
	microsoftGraphPrintUsageByUser *MicrosoftGraphPrintUsageByUser
}

// New navigation property
func (r ApiReportsCreateDailyPrintUsageByUserRequest) MicrosoftGraphPrintUsageByUser(microsoftGraphPrintUsageByUser MicrosoftGraphPrintUsageByUser) ApiReportsCreateDailyPrintUsageByUserRequest {
	r.microsoftGraphPrintUsageByUser = &microsoftGraphPrintUsageByUser
	return r
}

func (r ApiReportsCreateDailyPrintUsageByUserRequest) Execute() (MicrosoftGraphPrintUsageByUser, *_nethttp.Response, error) {
	return r.ApiService.ReportsCreateDailyPrintUsageByUserExecute(r)
}

/*
ReportsCreateDailyPrintUsageByUser Create new navigation property to dailyPrintUsageByUser for reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsCreateDailyPrintUsageByUserRequest
*/
func (a *ReportsPrintUsageByUserApiService) ReportsCreateDailyPrintUsageByUser(ctx _context.Context) ApiReportsCreateDailyPrintUsageByUserRequest {
	return ApiReportsCreateDailyPrintUsageByUserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintUsageByUser
func (a *ReportsPrintUsageByUserApiService) ReportsCreateDailyPrintUsageByUserExecute(r ApiReportsCreateDailyPrintUsageByUserRequest) (MicrosoftGraphPrintUsageByUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintUsageByUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByUserApiService.ReportsCreateDailyPrintUsageByUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/dailyPrintUsageByUser"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintUsageByUser == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphPrintUsageByUser is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintUsageByUser
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsCreateMonthlyPrintUsageByUserRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByUserApiService
	microsoftGraphPrintUsageByUser *MicrosoftGraphPrintUsageByUser
}

// New navigation property
func (r ApiReportsCreateMonthlyPrintUsageByUserRequest) MicrosoftGraphPrintUsageByUser(microsoftGraphPrintUsageByUser MicrosoftGraphPrintUsageByUser) ApiReportsCreateMonthlyPrintUsageByUserRequest {
	r.microsoftGraphPrintUsageByUser = &microsoftGraphPrintUsageByUser
	return r
}

func (r ApiReportsCreateMonthlyPrintUsageByUserRequest) Execute() (MicrosoftGraphPrintUsageByUser, *_nethttp.Response, error) {
	return r.ApiService.ReportsCreateMonthlyPrintUsageByUserExecute(r)
}

/*
ReportsCreateMonthlyPrintUsageByUser Create new navigation property to monthlyPrintUsageByUser for reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsCreateMonthlyPrintUsageByUserRequest
*/
func (a *ReportsPrintUsageByUserApiService) ReportsCreateMonthlyPrintUsageByUser(ctx _context.Context) ApiReportsCreateMonthlyPrintUsageByUserRequest {
	return ApiReportsCreateMonthlyPrintUsageByUserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintUsageByUser
func (a *ReportsPrintUsageByUserApiService) ReportsCreateMonthlyPrintUsageByUserExecute(r ApiReportsCreateMonthlyPrintUsageByUserRequest) (MicrosoftGraphPrintUsageByUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintUsageByUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByUserApiService.ReportsCreateMonthlyPrintUsageByUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/monthlyPrintUsageByUser"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintUsageByUser == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphPrintUsageByUser is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintUsageByUser
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsDeleteDailyPrintUsageByUserRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByUserApiService
	printUsageByUserId string
	ifMatch *string
}

// ETag
func (r ApiReportsDeleteDailyPrintUsageByUserRequest) IfMatch(ifMatch string) ApiReportsDeleteDailyPrintUsageByUserRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiReportsDeleteDailyPrintUsageByUserRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ReportsDeleteDailyPrintUsageByUserExecute(r)
}

/*
ReportsDeleteDailyPrintUsageByUser Delete navigation property dailyPrintUsageByUser for reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printUsageByUserId key: id of printUsageByUser
 @return ApiReportsDeleteDailyPrintUsageByUserRequest
*/
func (a *ReportsPrintUsageByUserApiService) ReportsDeleteDailyPrintUsageByUser(ctx _context.Context, printUsageByUserId string) ApiReportsDeleteDailyPrintUsageByUserRequest {
	return ApiReportsDeleteDailyPrintUsageByUserRequest{
		ApiService: a,
		ctx: ctx,
		printUsageByUserId: printUsageByUserId,
	}
}

// Execute executes the request
func (a *ReportsPrintUsageByUserApiService) ReportsDeleteDailyPrintUsageByUserExecute(r ApiReportsDeleteDailyPrintUsageByUserRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByUserApiService.ReportsDeleteDailyPrintUsageByUser")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/dailyPrintUsageByUser/{printUsageByUser-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printUsageByUser-id"+"}", _neturl.PathEscape(parameterToString(r.printUsageByUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReportsDeleteMonthlyPrintUsageByUserRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByUserApiService
	printUsageByUserId string
	ifMatch *string
}

// ETag
func (r ApiReportsDeleteMonthlyPrintUsageByUserRequest) IfMatch(ifMatch string) ApiReportsDeleteMonthlyPrintUsageByUserRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiReportsDeleteMonthlyPrintUsageByUserRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ReportsDeleteMonthlyPrintUsageByUserExecute(r)
}

/*
ReportsDeleteMonthlyPrintUsageByUser Delete navigation property monthlyPrintUsageByUser for reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printUsageByUserId key: id of printUsageByUser
 @return ApiReportsDeleteMonthlyPrintUsageByUserRequest
*/
func (a *ReportsPrintUsageByUserApiService) ReportsDeleteMonthlyPrintUsageByUser(ctx _context.Context, printUsageByUserId string) ApiReportsDeleteMonthlyPrintUsageByUserRequest {
	return ApiReportsDeleteMonthlyPrintUsageByUserRequest{
		ApiService: a,
		ctx: ctx,
		printUsageByUserId: printUsageByUserId,
	}
}

// Execute executes the request
func (a *ReportsPrintUsageByUserApiService) ReportsDeleteMonthlyPrintUsageByUserExecute(r ApiReportsDeleteMonthlyPrintUsageByUserRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByUserApiService.ReportsDeleteMonthlyPrintUsageByUser")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/monthlyPrintUsageByUser/{printUsageByUser-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printUsageByUser-id"+"}", _neturl.PathEscape(parameterToString(r.printUsageByUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReportsGetDailyPrintUsageByUserRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByUserApiService
	printUsageByUserId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiReportsGetDailyPrintUsageByUserRequest) Select_(select_ []string) ApiReportsGetDailyPrintUsageByUserRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiReportsGetDailyPrintUsageByUserRequest) Expand(expand []string) ApiReportsGetDailyPrintUsageByUserRequest {
	r.expand = &expand
	return r
}

func (r ApiReportsGetDailyPrintUsageByUserRequest) Execute() (MicrosoftGraphPrintUsageByUser, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetDailyPrintUsageByUserExecute(r)
}

/*
ReportsGetDailyPrintUsageByUser Get dailyPrintUsageByUser from reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printUsageByUserId key: id of printUsageByUser
 @return ApiReportsGetDailyPrintUsageByUserRequest
*/
func (a *ReportsPrintUsageByUserApiService) ReportsGetDailyPrintUsageByUser(ctx _context.Context, printUsageByUserId string) ApiReportsGetDailyPrintUsageByUserRequest {
	return ApiReportsGetDailyPrintUsageByUserRequest{
		ApiService: a,
		ctx: ctx,
		printUsageByUserId: printUsageByUserId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintUsageByUser
func (a *ReportsPrintUsageByUserApiService) ReportsGetDailyPrintUsageByUserExecute(r ApiReportsGetDailyPrintUsageByUserRequest) (MicrosoftGraphPrintUsageByUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintUsageByUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByUserApiService.ReportsGetDailyPrintUsageByUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/dailyPrintUsageByUser/{printUsageByUser-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printUsageByUser-id"+"}", _neturl.PathEscape(parameterToString(r.printUsageByUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetMonthlyPrintUsageByUserRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByUserApiService
	printUsageByUserId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiReportsGetMonthlyPrintUsageByUserRequest) Select_(select_ []string) ApiReportsGetMonthlyPrintUsageByUserRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiReportsGetMonthlyPrintUsageByUserRequest) Expand(expand []string) ApiReportsGetMonthlyPrintUsageByUserRequest {
	r.expand = &expand
	return r
}

func (r ApiReportsGetMonthlyPrintUsageByUserRequest) Execute() (MicrosoftGraphPrintUsageByUser, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetMonthlyPrintUsageByUserExecute(r)
}

/*
ReportsGetMonthlyPrintUsageByUser Get monthlyPrintUsageByUser from reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printUsageByUserId key: id of printUsageByUser
 @return ApiReportsGetMonthlyPrintUsageByUserRequest
*/
func (a *ReportsPrintUsageByUserApiService) ReportsGetMonthlyPrintUsageByUser(ctx _context.Context, printUsageByUserId string) ApiReportsGetMonthlyPrintUsageByUserRequest {
	return ApiReportsGetMonthlyPrintUsageByUserRequest{
		ApiService: a,
		ctx: ctx,
		printUsageByUserId: printUsageByUserId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintUsageByUser
func (a *ReportsPrintUsageByUserApiService) ReportsGetMonthlyPrintUsageByUserExecute(r ApiReportsGetMonthlyPrintUsageByUserRequest) (MicrosoftGraphPrintUsageByUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintUsageByUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByUserApiService.ReportsGetMonthlyPrintUsageByUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/monthlyPrintUsageByUser/{printUsageByUser-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printUsageByUser-id"+"}", _neturl.PathEscape(parameterToString(r.printUsageByUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsListDailyPrintUsageByUserRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByUserApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiReportsListDailyPrintUsageByUserRequest) Top(top int32) ApiReportsListDailyPrintUsageByUserRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiReportsListDailyPrintUsageByUserRequest) Skip(skip int32) ApiReportsListDailyPrintUsageByUserRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiReportsListDailyPrintUsageByUserRequest) Search(search string) ApiReportsListDailyPrintUsageByUserRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiReportsListDailyPrintUsageByUserRequest) Filter(filter string) ApiReportsListDailyPrintUsageByUserRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiReportsListDailyPrintUsageByUserRequest) Count(count bool) ApiReportsListDailyPrintUsageByUserRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiReportsListDailyPrintUsageByUserRequest) Orderby(orderby []string) ApiReportsListDailyPrintUsageByUserRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiReportsListDailyPrintUsageByUserRequest) Select_(select_ []string) ApiReportsListDailyPrintUsageByUserRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiReportsListDailyPrintUsageByUserRequest) Expand(expand []string) ApiReportsListDailyPrintUsageByUserRequest {
	r.expand = &expand
	return r
}

func (r ApiReportsListDailyPrintUsageByUserRequest) Execute() (CollectionOfPrintUsageByUser, *_nethttp.Response, error) {
	return r.ApiService.ReportsListDailyPrintUsageByUserExecute(r)
}

/*
ReportsListDailyPrintUsageByUser Get dailyPrintUsageByUser from reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsListDailyPrintUsageByUserRequest
*/
func (a *ReportsPrintUsageByUserApiService) ReportsListDailyPrintUsageByUser(ctx _context.Context) ApiReportsListDailyPrintUsageByUserRequest {
	return ApiReportsListDailyPrintUsageByUserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfPrintUsageByUser
func (a *ReportsPrintUsageByUserApiService) ReportsListDailyPrintUsageByUserExecute(r ApiReportsListDailyPrintUsageByUserRequest) (CollectionOfPrintUsageByUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfPrintUsageByUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByUserApiService.ReportsListDailyPrintUsageByUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/dailyPrintUsageByUser"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsListMonthlyPrintUsageByUserRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByUserApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiReportsListMonthlyPrintUsageByUserRequest) Top(top int32) ApiReportsListMonthlyPrintUsageByUserRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiReportsListMonthlyPrintUsageByUserRequest) Skip(skip int32) ApiReportsListMonthlyPrintUsageByUserRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiReportsListMonthlyPrintUsageByUserRequest) Search(search string) ApiReportsListMonthlyPrintUsageByUserRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiReportsListMonthlyPrintUsageByUserRequest) Filter(filter string) ApiReportsListMonthlyPrintUsageByUserRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiReportsListMonthlyPrintUsageByUserRequest) Count(count bool) ApiReportsListMonthlyPrintUsageByUserRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiReportsListMonthlyPrintUsageByUserRequest) Orderby(orderby []string) ApiReportsListMonthlyPrintUsageByUserRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiReportsListMonthlyPrintUsageByUserRequest) Select_(select_ []string) ApiReportsListMonthlyPrintUsageByUserRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiReportsListMonthlyPrintUsageByUserRequest) Expand(expand []string) ApiReportsListMonthlyPrintUsageByUserRequest {
	r.expand = &expand
	return r
}

func (r ApiReportsListMonthlyPrintUsageByUserRequest) Execute() (CollectionOfPrintUsageByUser, *_nethttp.Response, error) {
	return r.ApiService.ReportsListMonthlyPrintUsageByUserExecute(r)
}

/*
ReportsListMonthlyPrintUsageByUser Get monthlyPrintUsageByUser from reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsListMonthlyPrintUsageByUserRequest
*/
func (a *ReportsPrintUsageByUserApiService) ReportsListMonthlyPrintUsageByUser(ctx _context.Context) ApiReportsListMonthlyPrintUsageByUserRequest {
	return ApiReportsListMonthlyPrintUsageByUserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfPrintUsageByUser
func (a *ReportsPrintUsageByUserApiService) ReportsListMonthlyPrintUsageByUserExecute(r ApiReportsListMonthlyPrintUsageByUserRequest) (CollectionOfPrintUsageByUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfPrintUsageByUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByUserApiService.ReportsListMonthlyPrintUsageByUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/monthlyPrintUsageByUser"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsUpdateDailyPrintUsageByUserRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByUserApiService
	printUsageByUserId string
	microsoftGraphPrintUsageByUser *MicrosoftGraphPrintUsageByUser
}

// New navigation property values
func (r ApiReportsUpdateDailyPrintUsageByUserRequest) MicrosoftGraphPrintUsageByUser(microsoftGraphPrintUsageByUser MicrosoftGraphPrintUsageByUser) ApiReportsUpdateDailyPrintUsageByUserRequest {
	r.microsoftGraphPrintUsageByUser = &microsoftGraphPrintUsageByUser
	return r
}

func (r ApiReportsUpdateDailyPrintUsageByUserRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ReportsUpdateDailyPrintUsageByUserExecute(r)
}

/*
ReportsUpdateDailyPrintUsageByUser Update the navigation property dailyPrintUsageByUser in reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printUsageByUserId key: id of printUsageByUser
 @return ApiReportsUpdateDailyPrintUsageByUserRequest
*/
func (a *ReportsPrintUsageByUserApiService) ReportsUpdateDailyPrintUsageByUser(ctx _context.Context, printUsageByUserId string) ApiReportsUpdateDailyPrintUsageByUserRequest {
	return ApiReportsUpdateDailyPrintUsageByUserRequest{
		ApiService: a,
		ctx: ctx,
		printUsageByUserId: printUsageByUserId,
	}
}

// Execute executes the request
func (a *ReportsPrintUsageByUserApiService) ReportsUpdateDailyPrintUsageByUserExecute(r ApiReportsUpdateDailyPrintUsageByUserRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByUserApiService.ReportsUpdateDailyPrintUsageByUser")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/dailyPrintUsageByUser/{printUsageByUser-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printUsageByUser-id"+"}", _neturl.PathEscape(parameterToString(r.printUsageByUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintUsageByUser == nil {
		return nil, reportError("microsoftGraphPrintUsageByUser is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintUsageByUser
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReportsUpdateMonthlyPrintUsageByUserRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByUserApiService
	printUsageByUserId string
	microsoftGraphPrintUsageByUser *MicrosoftGraphPrintUsageByUser
}

// New navigation property values
func (r ApiReportsUpdateMonthlyPrintUsageByUserRequest) MicrosoftGraphPrintUsageByUser(microsoftGraphPrintUsageByUser MicrosoftGraphPrintUsageByUser) ApiReportsUpdateMonthlyPrintUsageByUserRequest {
	r.microsoftGraphPrintUsageByUser = &microsoftGraphPrintUsageByUser
	return r
}

func (r ApiReportsUpdateMonthlyPrintUsageByUserRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ReportsUpdateMonthlyPrintUsageByUserExecute(r)
}

/*
ReportsUpdateMonthlyPrintUsageByUser Update the navigation property monthlyPrintUsageByUser in reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printUsageByUserId key: id of printUsageByUser
 @return ApiReportsUpdateMonthlyPrintUsageByUserRequest
*/
func (a *ReportsPrintUsageByUserApiService) ReportsUpdateMonthlyPrintUsageByUser(ctx _context.Context, printUsageByUserId string) ApiReportsUpdateMonthlyPrintUsageByUserRequest {
	return ApiReportsUpdateMonthlyPrintUsageByUserRequest{
		ApiService: a,
		ctx: ctx,
		printUsageByUserId: printUsageByUserId,
	}
}

// Execute executes the request
func (a *ReportsPrintUsageByUserApiService) ReportsUpdateMonthlyPrintUsageByUserExecute(r ApiReportsUpdateMonthlyPrintUsageByUserRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByUserApiService.ReportsUpdateMonthlyPrintUsageByUser")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/monthlyPrintUsageByUser/{printUsageByUser-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printUsageByUser-id"+"}", _neturl.PathEscape(parameterToString(r.printUsageByUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintUsageByUser == nil {
		return nil, reportError("microsoftGraphPrintUsageByUser is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintUsageByUser
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
