/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ServicePrincipalsAppRoleAssignmentApiService ServicePrincipalsAppRoleAssignmentApi service
type ServicePrincipalsAppRoleAssignmentApiService service

type ApiServicePrincipalsCreateAppRoleAssignedToRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsAppRoleAssignmentApiService
	servicePrincipalId string
	microsoftGraphAppRoleAssignment *MicrosoftGraphAppRoleAssignment
}

// New navigation property
func (r ApiServicePrincipalsCreateAppRoleAssignedToRequest) MicrosoftGraphAppRoleAssignment(microsoftGraphAppRoleAssignment MicrosoftGraphAppRoleAssignment) ApiServicePrincipalsCreateAppRoleAssignedToRequest {
	r.microsoftGraphAppRoleAssignment = &microsoftGraphAppRoleAssignment
	return r
}

func (r ApiServicePrincipalsCreateAppRoleAssignedToRequest) Execute() (MicrosoftGraphAppRoleAssignment, *_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsCreateAppRoleAssignedToExecute(r)
}

/*
ServicePrincipalsCreateAppRoleAssignedTo Create new navigation property to appRoleAssignedTo for servicePrincipals

App role assignments for this app or service, granted to users, groups, and other service principals. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @return ApiServicePrincipalsCreateAppRoleAssignedToRequest
*/
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsCreateAppRoleAssignedTo(ctx _context.Context, servicePrincipalId string) ApiServicePrincipalsCreateAppRoleAssignedToRequest {
	return ApiServicePrincipalsCreateAppRoleAssignedToRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAppRoleAssignment
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsCreateAppRoleAssignedToExecute(r ApiServicePrincipalsCreateAppRoleAssignedToRequest) (MicrosoftGraphAppRoleAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAppRoleAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAppRoleAssignmentApiService.ServicePrincipalsCreateAppRoleAssignedTo")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/appRoleAssignedTo"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAppRoleAssignment == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAppRoleAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAppRoleAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServicePrincipalsCreateAppRoleAssignmentsRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsAppRoleAssignmentApiService
	servicePrincipalId string
	microsoftGraphAppRoleAssignment *MicrosoftGraphAppRoleAssignment
}

// New navigation property
func (r ApiServicePrincipalsCreateAppRoleAssignmentsRequest) MicrosoftGraphAppRoleAssignment(microsoftGraphAppRoleAssignment MicrosoftGraphAppRoleAssignment) ApiServicePrincipalsCreateAppRoleAssignmentsRequest {
	r.microsoftGraphAppRoleAssignment = &microsoftGraphAppRoleAssignment
	return r
}

func (r ApiServicePrincipalsCreateAppRoleAssignmentsRequest) Execute() (MicrosoftGraphAppRoleAssignment, *_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsCreateAppRoleAssignmentsExecute(r)
}

/*
ServicePrincipalsCreateAppRoleAssignments Create new navigation property to appRoleAssignments for servicePrincipals

App role assignment for another app or service, granted to this service principal. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @return ApiServicePrincipalsCreateAppRoleAssignmentsRequest
*/
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsCreateAppRoleAssignments(ctx _context.Context, servicePrincipalId string) ApiServicePrincipalsCreateAppRoleAssignmentsRequest {
	return ApiServicePrincipalsCreateAppRoleAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAppRoleAssignment
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsCreateAppRoleAssignmentsExecute(r ApiServicePrincipalsCreateAppRoleAssignmentsRequest) (MicrosoftGraphAppRoleAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAppRoleAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAppRoleAssignmentApiService.ServicePrincipalsCreateAppRoleAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/appRoleAssignments"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAppRoleAssignment == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAppRoleAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAppRoleAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServicePrincipalsDeleteAppRoleAssignedToRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsAppRoleAssignmentApiService
	servicePrincipalId string
	appRoleAssignmentId string
	ifMatch *string
}

// ETag
func (r ApiServicePrincipalsDeleteAppRoleAssignedToRequest) IfMatch(ifMatch string) ApiServicePrincipalsDeleteAppRoleAssignedToRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiServicePrincipalsDeleteAppRoleAssignedToRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsDeleteAppRoleAssignedToExecute(r)
}

/*
ServicePrincipalsDeleteAppRoleAssignedTo Delete navigation property appRoleAssignedTo for servicePrincipals

App role assignments for this app or service, granted to users, groups, and other service principals. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @param appRoleAssignmentId key: id of appRoleAssignment
 @return ApiServicePrincipalsDeleteAppRoleAssignedToRequest
*/
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsDeleteAppRoleAssignedTo(ctx _context.Context, servicePrincipalId string, appRoleAssignmentId string) ApiServicePrincipalsDeleteAppRoleAssignedToRequest {
	return ApiServicePrincipalsDeleteAppRoleAssignedToRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
		appRoleAssignmentId: appRoleAssignmentId,
	}
}

// Execute executes the request
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsDeleteAppRoleAssignedToExecute(r ApiServicePrincipalsDeleteAppRoleAssignedToRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAppRoleAssignmentApiService.ServicePrincipalsDeleteAppRoleAssignedTo")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/appRoleAssignedTo/{appRoleAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appRoleAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.appRoleAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiServicePrincipalsDeleteAppRoleAssignmentsRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsAppRoleAssignmentApiService
	servicePrincipalId string
	appRoleAssignmentId string
	ifMatch *string
}

// ETag
func (r ApiServicePrincipalsDeleteAppRoleAssignmentsRequest) IfMatch(ifMatch string) ApiServicePrincipalsDeleteAppRoleAssignmentsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiServicePrincipalsDeleteAppRoleAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsDeleteAppRoleAssignmentsExecute(r)
}

/*
ServicePrincipalsDeleteAppRoleAssignments Delete navigation property appRoleAssignments for servicePrincipals

App role assignment for another app or service, granted to this service principal. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @param appRoleAssignmentId key: id of appRoleAssignment
 @return ApiServicePrincipalsDeleteAppRoleAssignmentsRequest
*/
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsDeleteAppRoleAssignments(ctx _context.Context, servicePrincipalId string, appRoleAssignmentId string) ApiServicePrincipalsDeleteAppRoleAssignmentsRequest {
	return ApiServicePrincipalsDeleteAppRoleAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
		appRoleAssignmentId: appRoleAssignmentId,
	}
}

// Execute executes the request
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsDeleteAppRoleAssignmentsExecute(r ApiServicePrincipalsDeleteAppRoleAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAppRoleAssignmentApiService.ServicePrincipalsDeleteAppRoleAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/appRoleAssignments/{appRoleAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appRoleAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.appRoleAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiServicePrincipalsGetAppRoleAssignedToRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsAppRoleAssignmentApiService
	servicePrincipalId string
	appRoleAssignmentId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiServicePrincipalsGetAppRoleAssignedToRequest) Select_(select_ []string) ApiServicePrincipalsGetAppRoleAssignedToRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiServicePrincipalsGetAppRoleAssignedToRequest) Expand(expand []string) ApiServicePrincipalsGetAppRoleAssignedToRequest {
	r.expand = &expand
	return r
}

func (r ApiServicePrincipalsGetAppRoleAssignedToRequest) Execute() (MicrosoftGraphAppRoleAssignment, *_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsGetAppRoleAssignedToExecute(r)
}

/*
ServicePrincipalsGetAppRoleAssignedTo Get appRoleAssignedTo from servicePrincipals

App role assignments for this app or service, granted to users, groups, and other service principals. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @param appRoleAssignmentId key: id of appRoleAssignment
 @return ApiServicePrincipalsGetAppRoleAssignedToRequest
*/
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsGetAppRoleAssignedTo(ctx _context.Context, servicePrincipalId string, appRoleAssignmentId string) ApiServicePrincipalsGetAppRoleAssignedToRequest {
	return ApiServicePrincipalsGetAppRoleAssignedToRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
		appRoleAssignmentId: appRoleAssignmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAppRoleAssignment
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsGetAppRoleAssignedToExecute(r ApiServicePrincipalsGetAppRoleAssignedToRequest) (MicrosoftGraphAppRoleAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAppRoleAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAppRoleAssignmentApiService.ServicePrincipalsGetAppRoleAssignedTo")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/appRoleAssignedTo/{appRoleAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appRoleAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.appRoleAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServicePrincipalsGetAppRoleAssignmentsRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsAppRoleAssignmentApiService
	servicePrincipalId string
	appRoleAssignmentId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiServicePrincipalsGetAppRoleAssignmentsRequest) Select_(select_ []string) ApiServicePrincipalsGetAppRoleAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiServicePrincipalsGetAppRoleAssignmentsRequest) Expand(expand []string) ApiServicePrincipalsGetAppRoleAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiServicePrincipalsGetAppRoleAssignmentsRequest) Execute() (MicrosoftGraphAppRoleAssignment, *_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsGetAppRoleAssignmentsExecute(r)
}

/*
ServicePrincipalsGetAppRoleAssignments Get appRoleAssignments from servicePrincipals

App role assignment for another app or service, granted to this service principal. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @param appRoleAssignmentId key: id of appRoleAssignment
 @return ApiServicePrincipalsGetAppRoleAssignmentsRequest
*/
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsGetAppRoleAssignments(ctx _context.Context, servicePrincipalId string, appRoleAssignmentId string) ApiServicePrincipalsGetAppRoleAssignmentsRequest {
	return ApiServicePrincipalsGetAppRoleAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
		appRoleAssignmentId: appRoleAssignmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAppRoleAssignment
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsGetAppRoleAssignmentsExecute(r ApiServicePrincipalsGetAppRoleAssignmentsRequest) (MicrosoftGraphAppRoleAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAppRoleAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAppRoleAssignmentApiService.ServicePrincipalsGetAppRoleAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/appRoleAssignments/{appRoleAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appRoleAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.appRoleAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServicePrincipalsListAppRoleAssignedToRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsAppRoleAssignmentApiService
	servicePrincipalId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiServicePrincipalsListAppRoleAssignedToRequest) Top(top int32) ApiServicePrincipalsListAppRoleAssignedToRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiServicePrincipalsListAppRoleAssignedToRequest) Skip(skip int32) ApiServicePrincipalsListAppRoleAssignedToRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiServicePrincipalsListAppRoleAssignedToRequest) Search(search string) ApiServicePrincipalsListAppRoleAssignedToRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiServicePrincipalsListAppRoleAssignedToRequest) Filter(filter string) ApiServicePrincipalsListAppRoleAssignedToRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiServicePrincipalsListAppRoleAssignedToRequest) Count(count bool) ApiServicePrincipalsListAppRoleAssignedToRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiServicePrincipalsListAppRoleAssignedToRequest) Orderby(orderby []string) ApiServicePrincipalsListAppRoleAssignedToRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiServicePrincipalsListAppRoleAssignedToRequest) Select_(select_ []string) ApiServicePrincipalsListAppRoleAssignedToRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiServicePrincipalsListAppRoleAssignedToRequest) Expand(expand []string) ApiServicePrincipalsListAppRoleAssignedToRequest {
	r.expand = &expand
	return r
}

func (r ApiServicePrincipalsListAppRoleAssignedToRequest) Execute() (CollectionOfAppRoleAssignment, *_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsListAppRoleAssignedToExecute(r)
}

/*
ServicePrincipalsListAppRoleAssignedTo Get appRoleAssignedTo from servicePrincipals

App role assignments for this app or service, granted to users, groups, and other service principals. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @return ApiServicePrincipalsListAppRoleAssignedToRequest
*/
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsListAppRoleAssignedTo(ctx _context.Context, servicePrincipalId string) ApiServicePrincipalsListAppRoleAssignedToRequest {
	return ApiServicePrincipalsListAppRoleAssignedToRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
	}
}

// Execute executes the request
//  @return CollectionOfAppRoleAssignment
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsListAppRoleAssignedToExecute(r ApiServicePrincipalsListAppRoleAssignedToRequest) (CollectionOfAppRoleAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAppRoleAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAppRoleAssignmentApiService.ServicePrincipalsListAppRoleAssignedTo")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/appRoleAssignedTo"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServicePrincipalsListAppRoleAssignmentsRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsAppRoleAssignmentApiService
	servicePrincipalId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiServicePrincipalsListAppRoleAssignmentsRequest) Top(top int32) ApiServicePrincipalsListAppRoleAssignmentsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiServicePrincipalsListAppRoleAssignmentsRequest) Skip(skip int32) ApiServicePrincipalsListAppRoleAssignmentsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiServicePrincipalsListAppRoleAssignmentsRequest) Search(search string) ApiServicePrincipalsListAppRoleAssignmentsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiServicePrincipalsListAppRoleAssignmentsRequest) Filter(filter string) ApiServicePrincipalsListAppRoleAssignmentsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiServicePrincipalsListAppRoleAssignmentsRequest) Count(count bool) ApiServicePrincipalsListAppRoleAssignmentsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiServicePrincipalsListAppRoleAssignmentsRequest) Orderby(orderby []string) ApiServicePrincipalsListAppRoleAssignmentsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiServicePrincipalsListAppRoleAssignmentsRequest) Select_(select_ []string) ApiServicePrincipalsListAppRoleAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiServicePrincipalsListAppRoleAssignmentsRequest) Expand(expand []string) ApiServicePrincipalsListAppRoleAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiServicePrincipalsListAppRoleAssignmentsRequest) Execute() (CollectionOfAppRoleAssignment, *_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsListAppRoleAssignmentsExecute(r)
}

/*
ServicePrincipalsListAppRoleAssignments Get appRoleAssignments from servicePrincipals

App role assignment for another app or service, granted to this service principal. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @return ApiServicePrincipalsListAppRoleAssignmentsRequest
*/
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsListAppRoleAssignments(ctx _context.Context, servicePrincipalId string) ApiServicePrincipalsListAppRoleAssignmentsRequest {
	return ApiServicePrincipalsListAppRoleAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
	}
}

// Execute executes the request
//  @return CollectionOfAppRoleAssignment
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsListAppRoleAssignmentsExecute(r ApiServicePrincipalsListAppRoleAssignmentsRequest) (CollectionOfAppRoleAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAppRoleAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAppRoleAssignmentApiService.ServicePrincipalsListAppRoleAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/appRoleAssignments"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServicePrincipalsUpdateAppRoleAssignedToRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsAppRoleAssignmentApiService
	servicePrincipalId string
	appRoleAssignmentId string
	microsoftGraphAppRoleAssignment *MicrosoftGraphAppRoleAssignment
}

// New navigation property values
func (r ApiServicePrincipalsUpdateAppRoleAssignedToRequest) MicrosoftGraphAppRoleAssignment(microsoftGraphAppRoleAssignment MicrosoftGraphAppRoleAssignment) ApiServicePrincipalsUpdateAppRoleAssignedToRequest {
	r.microsoftGraphAppRoleAssignment = &microsoftGraphAppRoleAssignment
	return r
}

func (r ApiServicePrincipalsUpdateAppRoleAssignedToRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsUpdateAppRoleAssignedToExecute(r)
}

/*
ServicePrincipalsUpdateAppRoleAssignedTo Update the navigation property appRoleAssignedTo in servicePrincipals

App role assignments for this app or service, granted to users, groups, and other service principals. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @param appRoleAssignmentId key: id of appRoleAssignment
 @return ApiServicePrincipalsUpdateAppRoleAssignedToRequest
*/
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsUpdateAppRoleAssignedTo(ctx _context.Context, servicePrincipalId string, appRoleAssignmentId string) ApiServicePrincipalsUpdateAppRoleAssignedToRequest {
	return ApiServicePrincipalsUpdateAppRoleAssignedToRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
		appRoleAssignmentId: appRoleAssignmentId,
	}
}

// Execute executes the request
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsUpdateAppRoleAssignedToExecute(r ApiServicePrincipalsUpdateAppRoleAssignedToRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAppRoleAssignmentApiService.ServicePrincipalsUpdateAppRoleAssignedTo")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/appRoleAssignedTo/{appRoleAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appRoleAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.appRoleAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAppRoleAssignment == nil {
		return nil, reportError("microsoftGraphAppRoleAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAppRoleAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiServicePrincipalsUpdateAppRoleAssignmentsRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsAppRoleAssignmentApiService
	servicePrincipalId string
	appRoleAssignmentId string
	microsoftGraphAppRoleAssignment *MicrosoftGraphAppRoleAssignment
}

// New navigation property values
func (r ApiServicePrincipalsUpdateAppRoleAssignmentsRequest) MicrosoftGraphAppRoleAssignment(microsoftGraphAppRoleAssignment MicrosoftGraphAppRoleAssignment) ApiServicePrincipalsUpdateAppRoleAssignmentsRequest {
	r.microsoftGraphAppRoleAssignment = &microsoftGraphAppRoleAssignment
	return r
}

func (r ApiServicePrincipalsUpdateAppRoleAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsUpdateAppRoleAssignmentsExecute(r)
}

/*
ServicePrincipalsUpdateAppRoleAssignments Update the navigation property appRoleAssignments in servicePrincipals

App role assignment for another app or service, granted to this service principal. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @param appRoleAssignmentId key: id of appRoleAssignment
 @return ApiServicePrincipalsUpdateAppRoleAssignmentsRequest
*/
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsUpdateAppRoleAssignments(ctx _context.Context, servicePrincipalId string, appRoleAssignmentId string) ApiServicePrincipalsUpdateAppRoleAssignmentsRequest {
	return ApiServicePrincipalsUpdateAppRoleAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
		appRoleAssignmentId: appRoleAssignmentId,
	}
}

// Execute executes the request
func (a *ServicePrincipalsAppRoleAssignmentApiService) ServicePrincipalsUpdateAppRoleAssignmentsExecute(r ApiServicePrincipalsUpdateAppRoleAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAppRoleAssignmentApiService.ServicePrincipalsUpdateAppRoleAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/appRoleAssignments/{appRoleAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appRoleAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.appRoleAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAppRoleAssignment == nil {
		return nil, reportError("microsoftGraphAppRoleAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAppRoleAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
