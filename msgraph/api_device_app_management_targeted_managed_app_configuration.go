/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceAppManagementTargetedManagedAppConfigurationApiService DeviceAppManagementTargetedManagedAppConfigurationApi service
type DeviceAppManagementTargetedManagedAppConfigurationApiService service

type ApiDeviceAppManagementCreateTargetedManagedAppConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	microsoftGraphTargetedManagedAppConfiguration *MicrosoftGraphTargetedManagedAppConfiguration
}

// New navigation property
func (r ApiDeviceAppManagementCreateTargetedManagedAppConfigurationsRequest) MicrosoftGraphTargetedManagedAppConfiguration(microsoftGraphTargetedManagedAppConfiguration MicrosoftGraphTargetedManagedAppConfiguration) ApiDeviceAppManagementCreateTargetedManagedAppConfigurationsRequest {
	r.microsoftGraphTargetedManagedAppConfiguration = &microsoftGraphTargetedManagedAppConfiguration
	return r
}

func (r ApiDeviceAppManagementCreateTargetedManagedAppConfigurationsRequest) Execute() (MicrosoftGraphTargetedManagedAppConfiguration, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementCreateTargetedManagedAppConfigurationsExecute(r)
}

/*
DeviceAppManagementCreateTargetedManagedAppConfigurations Create new navigation property to targetedManagedAppConfigurations for deviceAppManagement

Targeted managed app configurations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementCreateTargetedManagedAppConfigurationsRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementCreateTargetedManagedAppConfigurations(ctx _context.Context) ApiDeviceAppManagementCreateTargetedManagedAppConfigurationsRequest {
	return ApiDeviceAppManagementCreateTargetedManagedAppConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTargetedManagedAppConfiguration
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementCreateTargetedManagedAppConfigurationsExecute(r ApiDeviceAppManagementCreateTargetedManagedAppConfigurationsRequest) (MicrosoftGraphTargetedManagedAppConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTargetedManagedAppConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementCreateTargetedManagedAppConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTargetedManagedAppConfiguration == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphTargetedManagedAppConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTargetedManagedAppConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDeleteTargetedManagedAppConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementDeleteTargetedManagedAppConfigurationsRequest) IfMatch(ifMatch string) ApiDeviceAppManagementDeleteTargetedManagedAppConfigurationsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementDeleteTargetedManagedAppConfigurationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDeleteTargetedManagedAppConfigurationsExecute(r)
}

/*
DeviceAppManagementDeleteTargetedManagedAppConfigurations Delete navigation property targetedManagedAppConfigurations for deviceAppManagement

Targeted managed app configurations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @return ApiDeviceAppManagementDeleteTargetedManagedAppConfigurationsRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementDeleteTargetedManagedAppConfigurations(ctx _context.Context, targetedManagedAppConfigurationId string) ApiDeviceAppManagementDeleteTargetedManagedAppConfigurationsRequest {
	return ApiDeviceAppManagementDeleteTargetedManagedAppConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementDeleteTargetedManagedAppConfigurationsExecute(r ApiDeviceAppManagementDeleteTargetedManagedAppConfigurationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementDeleteTargetedManagedAppConfigurations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementGetTargetedManagedAppConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementGetTargetedManagedAppConfigurationsRequest) Select_(select_ []string) ApiDeviceAppManagementGetTargetedManagedAppConfigurationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementGetTargetedManagedAppConfigurationsRequest) Expand(expand []string) ApiDeviceAppManagementGetTargetedManagedAppConfigurationsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementGetTargetedManagedAppConfigurationsRequest) Execute() (MicrosoftGraphTargetedManagedAppConfiguration, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementGetTargetedManagedAppConfigurationsExecute(r)
}

/*
DeviceAppManagementGetTargetedManagedAppConfigurations Get targetedManagedAppConfigurations from deviceAppManagement

Targeted managed app configurations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @return ApiDeviceAppManagementGetTargetedManagedAppConfigurationsRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementGetTargetedManagedAppConfigurations(ctx _context.Context, targetedManagedAppConfigurationId string) ApiDeviceAppManagementGetTargetedManagedAppConfigurationsRequest {
	return ApiDeviceAppManagementGetTargetedManagedAppConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTargetedManagedAppConfiguration
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementGetTargetedManagedAppConfigurationsExecute(r ApiDeviceAppManagementGetTargetedManagedAppConfigurationsRequest) (MicrosoftGraphTargetedManagedAppConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTargetedManagedAppConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementGetTargetedManagedAppConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest) Top(top int32) ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest) Skip(skip int32) ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest) Search(search string) ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest) Filter(filter string) ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest) Count(count bool) ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest) Orderby(orderby []string) ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest) Select_(select_ []string) ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest) Expand(expand []string) ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest) Execute() (CollectionOfTargetedManagedAppConfiguration, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementListTargetedManagedAppConfigurationsExecute(r)
}

/*
DeviceAppManagementListTargetedManagedAppConfigurations Get targetedManagedAppConfigurations from deviceAppManagement

Targeted managed app configurations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementListTargetedManagedAppConfigurations(ctx _context.Context) ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest {
	return ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfTargetedManagedAppConfiguration
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementListTargetedManagedAppConfigurationsExecute(r ApiDeviceAppManagementListTargetedManagedAppConfigurationsRequest) (CollectionOfTargetedManagedAppConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfTargetedManagedAppConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementListTargetedManagedAppConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	microsoftGraphManagedMobileApp *MicrosoftGraphManagedMobileApp
}

// New navigation property
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAppsRequest) MicrosoftGraphManagedMobileApp(microsoftGraphManagedMobileApp MicrosoftGraphManagedMobileApp) ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAppsRequest {
	r.microsoftGraphManagedMobileApp = &microsoftGraphManagedMobileApp
	return r
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAppsRequest) Execute() (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementTargetedManagedAppConfigurationsCreateAppsExecute(r)
}

/*
DeviceAppManagementTargetedManagedAppConfigurationsCreateApps Create new navigation property to apps for deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @return ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAppsRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsCreateApps(ctx _context.Context, targetedManagedAppConfigurationId string) ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAppsRequest {
	return ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAppsRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedMobileApp
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsCreateAppsExecute(r ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAppsRequest) (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedMobileApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementTargetedManagedAppConfigurationsCreateApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}/apps"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedMobileApp == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedMobileApp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedMobileApp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	microsoftGraphTargetedManagedAppPolicyAssignment *MicrosoftGraphTargetedManagedAppPolicyAssignment
}

// New navigation property
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAssignmentsRequest) MicrosoftGraphTargetedManagedAppPolicyAssignment(microsoftGraphTargetedManagedAppPolicyAssignment MicrosoftGraphTargetedManagedAppPolicyAssignment) ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAssignmentsRequest {
	r.microsoftGraphTargetedManagedAppPolicyAssignment = &microsoftGraphTargetedManagedAppPolicyAssignment
	return r
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAssignmentsRequest) Execute() (MicrosoftGraphTargetedManagedAppPolicyAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementTargetedManagedAppConfigurationsCreateAssignmentsExecute(r)
}

/*
DeviceAppManagementTargetedManagedAppConfigurationsCreateAssignments Create new navigation property to assignments for deviceAppManagement

Navigation property to list of inclusion and exclusion groups to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @return ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAssignmentsRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsCreateAssignments(ctx _context.Context, targetedManagedAppConfigurationId string) ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAssignmentsRequest {
	return ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTargetedManagedAppPolicyAssignment
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsCreateAssignmentsExecute(r ApiDeviceAppManagementTargetedManagedAppConfigurationsCreateAssignmentsRequest) (MicrosoftGraphTargetedManagedAppPolicyAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTargetedManagedAppPolicyAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementTargetedManagedAppConfigurationsCreateAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}/assignments"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTargetedManagedAppPolicyAssignment == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphTargetedManagedAppPolicyAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTargetedManagedAppPolicyAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	managedMobileAppId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAppsRequest) IfMatch(ifMatch string) ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAppsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementTargetedManagedAppConfigurationsDeleteAppsExecute(r)
}

/*
DeviceAppManagementTargetedManagedAppConfigurationsDeleteApps Delete navigation property apps for deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @param managedMobileAppId key: id of managedMobileApp
 @return ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAppsRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsDeleteApps(ctx _context.Context, targetedManagedAppConfigurationId string, managedMobileAppId string) ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAppsRequest {
	return ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAppsRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
		managedMobileAppId: managedMobileAppId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsDeleteAppsExecute(r ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementTargetedManagedAppConfigurationsDeleteApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}/apps/{managedMobileApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedMobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.managedMobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	targetedManagedAppPolicyAssignmentId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAssignmentsRequest) IfMatch(ifMatch string) ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAssignmentsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementTargetedManagedAppConfigurationsDeleteAssignmentsExecute(r)
}

/*
DeviceAppManagementTargetedManagedAppConfigurationsDeleteAssignments Delete navigation property assignments for deviceAppManagement

Navigation property to list of inclusion and exclusion groups to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @param targetedManagedAppPolicyAssignmentId key: id of targetedManagedAppPolicyAssignment
 @return ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAssignmentsRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsDeleteAssignments(ctx _context.Context, targetedManagedAppConfigurationId string, targetedManagedAppPolicyAssignmentId string) ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAssignmentsRequest {
	return ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
		targetedManagedAppPolicyAssignmentId: targetedManagedAppPolicyAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsDeleteAssignmentsExecute(r ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementTargetedManagedAppConfigurationsDeleteAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}/assignments/{targetedManagedAppPolicyAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppPolicyAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppPolicyAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteDeploymentSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteDeploymentSummaryRequest) IfMatch(ifMatch string) ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteDeploymentSummaryRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteDeploymentSummaryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementTargetedManagedAppConfigurationsDeleteDeploymentSummaryExecute(r)
}

/*
DeviceAppManagementTargetedManagedAppConfigurationsDeleteDeploymentSummary Delete navigation property deploymentSummary for deviceAppManagement

Navigation property to deployment summary of the configuration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @return ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteDeploymentSummaryRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsDeleteDeploymentSummary(ctx _context.Context, targetedManagedAppConfigurationId string) ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteDeploymentSummaryRequest {
	return ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteDeploymentSummaryRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsDeleteDeploymentSummaryExecute(r ApiDeviceAppManagementTargetedManagedAppConfigurationsDeleteDeploymentSummaryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementTargetedManagedAppConfigurationsDeleteDeploymentSummary")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}/deploymentSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	managedMobileAppId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAppsRequest) Select_(select_ []string) ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAppsRequest) Expand(expand []string) ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAppsRequest) Execute() (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementTargetedManagedAppConfigurationsGetAppsExecute(r)
}

/*
DeviceAppManagementTargetedManagedAppConfigurationsGetApps Get apps from deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @param managedMobileAppId key: id of managedMobileApp
 @return ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAppsRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsGetApps(ctx _context.Context, targetedManagedAppConfigurationId string, managedMobileAppId string) ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAppsRequest {
	return ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAppsRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
		managedMobileAppId: managedMobileAppId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedMobileApp
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsGetAppsExecute(r ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAppsRequest) (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedMobileApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementTargetedManagedAppConfigurationsGetApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}/apps/{managedMobileApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedMobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.managedMobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	targetedManagedAppPolicyAssignmentId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAssignmentsRequest) Select_(select_ []string) ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAssignmentsRequest) Expand(expand []string) ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAssignmentsRequest) Execute() (MicrosoftGraphTargetedManagedAppPolicyAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementTargetedManagedAppConfigurationsGetAssignmentsExecute(r)
}

/*
DeviceAppManagementTargetedManagedAppConfigurationsGetAssignments Get assignments from deviceAppManagement

Navigation property to list of inclusion and exclusion groups to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @param targetedManagedAppPolicyAssignmentId key: id of targetedManagedAppPolicyAssignment
 @return ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAssignmentsRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsGetAssignments(ctx _context.Context, targetedManagedAppConfigurationId string, targetedManagedAppPolicyAssignmentId string) ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAssignmentsRequest {
	return ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
		targetedManagedAppPolicyAssignmentId: targetedManagedAppPolicyAssignmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTargetedManagedAppPolicyAssignment
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsGetAssignmentsExecute(r ApiDeviceAppManagementTargetedManagedAppConfigurationsGetAssignmentsRequest) (MicrosoftGraphTargetedManagedAppPolicyAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTargetedManagedAppPolicyAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementTargetedManagedAppConfigurationsGetAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}/assignments/{targetedManagedAppPolicyAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppPolicyAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppPolicyAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementTargetedManagedAppConfigurationsGetDeploymentSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsGetDeploymentSummaryRequest) Select_(select_ []string) ApiDeviceAppManagementTargetedManagedAppConfigurationsGetDeploymentSummaryRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsGetDeploymentSummaryRequest) Expand(expand []string) ApiDeviceAppManagementTargetedManagedAppConfigurationsGetDeploymentSummaryRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsGetDeploymentSummaryRequest) Execute() (MicrosoftGraphManagedAppPolicyDeploymentSummary, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementTargetedManagedAppConfigurationsGetDeploymentSummaryExecute(r)
}

/*
DeviceAppManagementTargetedManagedAppConfigurationsGetDeploymentSummary Get deploymentSummary from deviceAppManagement

Navigation property to deployment summary of the configuration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @return ApiDeviceAppManagementTargetedManagedAppConfigurationsGetDeploymentSummaryRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsGetDeploymentSummary(ctx _context.Context, targetedManagedAppConfigurationId string) ApiDeviceAppManagementTargetedManagedAppConfigurationsGetDeploymentSummaryRequest {
	return ApiDeviceAppManagementTargetedManagedAppConfigurationsGetDeploymentSummaryRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedAppPolicyDeploymentSummary
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsGetDeploymentSummaryExecute(r ApiDeviceAppManagementTargetedManagedAppConfigurationsGetDeploymentSummaryRequest) (MicrosoftGraphManagedAppPolicyDeploymentSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedAppPolicyDeploymentSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementTargetedManagedAppConfigurationsGetDeploymentSummary")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}/deploymentSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest) Top(top int32) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest) Skip(skip int32) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest) Search(search string) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest) Filter(filter string) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest) Count(count bool) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest) Orderby(orderby []string) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest) Select_(select_ []string) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest) Expand(expand []string) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest) Execute() (CollectionOfManagedMobileApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementTargetedManagedAppConfigurationsListAppsExecute(r)
}

/*
DeviceAppManagementTargetedManagedAppConfigurationsListApps Get apps from deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @return ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsListApps(ctx _context.Context, targetedManagedAppConfigurationId string) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest {
	return ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
	}
}

// Execute executes the request
//  @return CollectionOfManagedMobileApp
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsListAppsExecute(r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAppsRequest) (CollectionOfManagedMobileApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedMobileApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementTargetedManagedAppConfigurationsListApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}/apps"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest) Top(top int32) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest) Skip(skip int32) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest) Search(search string) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest) Filter(filter string) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest) Count(count bool) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest) Orderby(orderby []string) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest) Select_(select_ []string) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest) Expand(expand []string) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest) Execute() (CollectionOfTargetedManagedAppPolicyAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsExecute(r)
}

/*
DeviceAppManagementTargetedManagedAppConfigurationsListAssignments Get assignments from deviceAppManagement

Navigation property to list of inclusion and exclusion groups to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @return ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsListAssignments(ctx _context.Context, targetedManagedAppConfigurationId string) ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest {
	return ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
	}
}

// Execute executes the request
//  @return CollectionOfTargetedManagedAppPolicyAssignment
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsExecute(r ApiDeviceAppManagementTargetedManagedAppConfigurationsListAssignmentsRequest) (CollectionOfTargetedManagedAppPolicyAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfTargetedManagedAppPolicyAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementTargetedManagedAppConfigurationsListAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}/assignments"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	managedMobileAppId string
	microsoftGraphManagedMobileApp *MicrosoftGraphManagedMobileApp
}

// New navigation property values
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAppsRequest) MicrosoftGraphManagedMobileApp(microsoftGraphManagedMobileApp MicrosoftGraphManagedMobileApp) ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAppsRequest {
	r.microsoftGraphManagedMobileApp = &microsoftGraphManagedMobileApp
	return r
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementTargetedManagedAppConfigurationsUpdateAppsExecute(r)
}

/*
DeviceAppManagementTargetedManagedAppConfigurationsUpdateApps Update the navigation property apps in deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @param managedMobileAppId key: id of managedMobileApp
 @return ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAppsRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsUpdateApps(ctx _context.Context, targetedManagedAppConfigurationId string, managedMobileAppId string) ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAppsRequest {
	return ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAppsRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
		managedMobileAppId: managedMobileAppId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsUpdateAppsExecute(r ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementTargetedManagedAppConfigurationsUpdateApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}/apps/{managedMobileApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedMobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.managedMobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedMobileApp == nil {
		return nil, reportError("microsoftGraphManagedMobileApp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedMobileApp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	targetedManagedAppPolicyAssignmentId string
	microsoftGraphTargetedManagedAppPolicyAssignment *MicrosoftGraphTargetedManagedAppPolicyAssignment
}

// New navigation property values
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAssignmentsRequest) MicrosoftGraphTargetedManagedAppPolicyAssignment(microsoftGraphTargetedManagedAppPolicyAssignment MicrosoftGraphTargetedManagedAppPolicyAssignment) ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAssignmentsRequest {
	r.microsoftGraphTargetedManagedAppPolicyAssignment = &microsoftGraphTargetedManagedAppPolicyAssignment
	return r
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementTargetedManagedAppConfigurationsUpdateAssignmentsExecute(r)
}

/*
DeviceAppManagementTargetedManagedAppConfigurationsUpdateAssignments Update the navigation property assignments in deviceAppManagement

Navigation property to list of inclusion and exclusion groups to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @param targetedManagedAppPolicyAssignmentId key: id of targetedManagedAppPolicyAssignment
 @return ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAssignmentsRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsUpdateAssignments(ctx _context.Context, targetedManagedAppConfigurationId string, targetedManagedAppPolicyAssignmentId string) ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAssignmentsRequest {
	return ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
		targetedManagedAppPolicyAssignmentId: targetedManagedAppPolicyAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsUpdateAssignmentsExecute(r ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementTargetedManagedAppConfigurationsUpdateAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}/assignments/{targetedManagedAppPolicyAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppPolicyAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppPolicyAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTargetedManagedAppPolicyAssignment == nil {
		return nil, reportError("microsoftGraphTargetedManagedAppPolicyAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTargetedManagedAppPolicyAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateDeploymentSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	microsoftGraphManagedAppPolicyDeploymentSummary *MicrosoftGraphManagedAppPolicyDeploymentSummary
}

// New navigation property values
func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateDeploymentSummaryRequest) MicrosoftGraphManagedAppPolicyDeploymentSummary(microsoftGraphManagedAppPolicyDeploymentSummary MicrosoftGraphManagedAppPolicyDeploymentSummary) ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateDeploymentSummaryRequest {
	r.microsoftGraphManagedAppPolicyDeploymentSummary = &microsoftGraphManagedAppPolicyDeploymentSummary
	return r
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateDeploymentSummaryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementTargetedManagedAppConfigurationsUpdateDeploymentSummaryExecute(r)
}

/*
DeviceAppManagementTargetedManagedAppConfigurationsUpdateDeploymentSummary Update the navigation property deploymentSummary in deviceAppManagement

Navigation property to deployment summary of the configuration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @return ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateDeploymentSummaryRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsUpdateDeploymentSummary(ctx _context.Context, targetedManagedAppConfigurationId string) ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateDeploymentSummaryRequest {
	return ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateDeploymentSummaryRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementTargetedManagedAppConfigurationsUpdateDeploymentSummaryExecute(r ApiDeviceAppManagementTargetedManagedAppConfigurationsUpdateDeploymentSummaryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementTargetedManagedAppConfigurationsUpdateDeploymentSummary")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}/deploymentSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedAppPolicyDeploymentSummary == nil {
		return nil, reportError("microsoftGraphManagedAppPolicyDeploymentSummary is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedAppPolicyDeploymentSummary
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementUpdateTargetedManagedAppConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementTargetedManagedAppConfigurationApiService
	targetedManagedAppConfigurationId string
	microsoftGraphTargetedManagedAppConfiguration *MicrosoftGraphTargetedManagedAppConfiguration
}

// New navigation property values
func (r ApiDeviceAppManagementUpdateTargetedManagedAppConfigurationsRequest) MicrosoftGraphTargetedManagedAppConfiguration(microsoftGraphTargetedManagedAppConfiguration MicrosoftGraphTargetedManagedAppConfiguration) ApiDeviceAppManagementUpdateTargetedManagedAppConfigurationsRequest {
	r.microsoftGraphTargetedManagedAppConfiguration = &microsoftGraphTargetedManagedAppConfiguration
	return r
}

func (r ApiDeviceAppManagementUpdateTargetedManagedAppConfigurationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementUpdateTargetedManagedAppConfigurationsExecute(r)
}

/*
DeviceAppManagementUpdateTargetedManagedAppConfigurations Update the navigation property targetedManagedAppConfigurations in deviceAppManagement

Targeted managed app configurations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @return ApiDeviceAppManagementUpdateTargetedManagedAppConfigurationsRequest
*/
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementUpdateTargetedManagedAppConfigurations(ctx _context.Context, targetedManagedAppConfigurationId string) ApiDeviceAppManagementUpdateTargetedManagedAppConfigurationsRequest {
	return ApiDeviceAppManagementUpdateTargetedManagedAppConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementTargetedManagedAppConfigurationApiService) DeviceAppManagementUpdateTargetedManagedAppConfigurationsExecute(r ApiDeviceAppManagementUpdateTargetedManagedAppConfigurationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementTargetedManagedAppConfigurationApiService.DeviceAppManagementUpdateTargetedManagedAppConfigurations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTargetedManagedAppConfiguration == nil {
		return nil, reportError("microsoftGraphTargetedManagedAppConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTargetedManagedAppConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
