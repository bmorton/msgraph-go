/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphPrintMultipageLayout the model 'MicrosoftGraphPrintMultipageLayout'
type MicrosoftGraphPrintMultipageLayout string

// List of microsoft.graph.printMultipageLayout
const (
	CLOCKWISE_FROM_TOP_LEFT MicrosoftGraphPrintMultipageLayout = "clockwiseFromTopLeft"
	COUNTERCLOCKWISE_FROM_TOP_LEFT MicrosoftGraphPrintMultipageLayout = "counterclockwiseFromTopLeft"
	COUNTERCLOCKWISE_FROM_TOP_RIGHT MicrosoftGraphPrintMultipageLayout = "counterclockwiseFromTopRight"
	CLOCKWISE_FROM_TOP_RIGHT MicrosoftGraphPrintMultipageLayout = "clockwiseFromTopRight"
	COUNTERCLOCKWISE_FROM_BOTTOM_LEFT MicrosoftGraphPrintMultipageLayout = "counterclockwiseFromBottomLeft"
	CLOCKWISE_FROM_BOTTOM_LEFT MicrosoftGraphPrintMultipageLayout = "clockwiseFromBottomLeft"
	COUNTERCLOCKWISE_FROM_BOTTOM_RIGHT MicrosoftGraphPrintMultipageLayout = "counterclockwiseFromBottomRight"
	CLOCKWISE_FROM_BOTTOM_RIGHT MicrosoftGraphPrintMultipageLayout = "clockwiseFromBottomRight"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphPrintMultipageLayout = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphPrintMultipageLayout enum
var AllowedMicrosoftGraphPrintMultipageLayoutEnumValues = []MicrosoftGraphPrintMultipageLayout{
	"clockwiseFromTopLeft",
	"counterclockwiseFromTopLeft",
	"counterclockwiseFromTopRight",
	"clockwiseFromTopRight",
	"counterclockwiseFromBottomLeft",
	"clockwiseFromBottomLeft",
	"counterclockwiseFromBottomRight",
	"clockwiseFromBottomRight",
	"unknownFutureValue",
}

func (v *MicrosoftGraphPrintMultipageLayout) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphPrintMultipageLayout(value)
	for _, existing := range AllowedMicrosoftGraphPrintMultipageLayoutEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphPrintMultipageLayout", value)
}

// NewMicrosoftGraphPrintMultipageLayoutFromValue returns a pointer to a valid MicrosoftGraphPrintMultipageLayout
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphPrintMultipageLayoutFromValue(v string) (*MicrosoftGraphPrintMultipageLayout, error) {
	ev := MicrosoftGraphPrintMultipageLayout(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphPrintMultipageLayout: valid values are %v", v, AllowedMicrosoftGraphPrintMultipageLayoutEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphPrintMultipageLayout) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphPrintMultipageLayoutEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.printMultipageLayout value
func (v MicrosoftGraphPrintMultipageLayout) Ptr() *MicrosoftGraphPrintMultipageLayout {
	return &v
}

type NullableMicrosoftGraphPrintMultipageLayout struct {
	value *MicrosoftGraphPrintMultipageLayout
	isSet bool
}

func (v NullableMicrosoftGraphPrintMultipageLayout) Get() *MicrosoftGraphPrintMultipageLayout {
	return v.value
}

func (v *NullableMicrosoftGraphPrintMultipageLayout) Set(val *MicrosoftGraphPrintMultipageLayout) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPrintMultipageLayout) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPrintMultipageLayout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPrintMultipageLayout(val *MicrosoftGraphPrintMultipageLayout) *NullableMicrosoftGraphPrintMultipageLayout {
	return &NullableMicrosoftGraphPrintMultipageLayout{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPrintMultipageLayout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPrintMultipageLayout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

