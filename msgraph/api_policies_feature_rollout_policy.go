/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// PoliciesFeatureRolloutPolicyApiService PoliciesFeatureRolloutPolicyApi service
type PoliciesFeatureRolloutPolicyApiService service

type ApiPoliciesCreateFeatureRolloutPoliciesRequest struct {
	ctx _context.Context
	ApiService *PoliciesFeatureRolloutPolicyApiService
	microsoftGraphFeatureRolloutPolicy *MicrosoftGraphFeatureRolloutPolicy
}

// New navigation property
func (r ApiPoliciesCreateFeatureRolloutPoliciesRequest) MicrosoftGraphFeatureRolloutPolicy(microsoftGraphFeatureRolloutPolicy MicrosoftGraphFeatureRolloutPolicy) ApiPoliciesCreateFeatureRolloutPoliciesRequest {
	r.microsoftGraphFeatureRolloutPolicy = &microsoftGraphFeatureRolloutPolicy
	return r
}

func (r ApiPoliciesCreateFeatureRolloutPoliciesRequest) Execute() (MicrosoftGraphFeatureRolloutPolicy, *_nethttp.Response, error) {
	return r.ApiService.PoliciesCreateFeatureRolloutPoliciesExecute(r)
}

/*
PoliciesCreateFeatureRolloutPolicies Create new navigation property to featureRolloutPolicies for policies

The feature rollout policy associated with a directory object.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPoliciesCreateFeatureRolloutPoliciesRequest
*/
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesCreateFeatureRolloutPolicies(ctx _context.Context) ApiPoliciesCreateFeatureRolloutPoliciesRequest {
	return ApiPoliciesCreateFeatureRolloutPoliciesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphFeatureRolloutPolicy
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesCreateFeatureRolloutPoliciesExecute(r ApiPoliciesCreateFeatureRolloutPoliciesRequest) (MicrosoftGraphFeatureRolloutPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphFeatureRolloutPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoliciesFeatureRolloutPolicyApiService.PoliciesCreateFeatureRolloutPolicies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policies/featureRolloutPolicies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphFeatureRolloutPolicy == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphFeatureRolloutPolicy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphFeatureRolloutPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPoliciesDeleteFeatureRolloutPoliciesRequest struct {
	ctx _context.Context
	ApiService *PoliciesFeatureRolloutPolicyApiService
	featureRolloutPolicyId string
	ifMatch *string
}

// ETag
func (r ApiPoliciesDeleteFeatureRolloutPoliciesRequest) IfMatch(ifMatch string) ApiPoliciesDeleteFeatureRolloutPoliciesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiPoliciesDeleteFeatureRolloutPoliciesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PoliciesDeleteFeatureRolloutPoliciesExecute(r)
}

/*
PoliciesDeleteFeatureRolloutPolicies Delete navigation property featureRolloutPolicies for policies

The feature rollout policy associated with a directory object.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param featureRolloutPolicyId key: id of featureRolloutPolicy
 @return ApiPoliciesDeleteFeatureRolloutPoliciesRequest
*/
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesDeleteFeatureRolloutPolicies(ctx _context.Context, featureRolloutPolicyId string) ApiPoliciesDeleteFeatureRolloutPoliciesRequest {
	return ApiPoliciesDeleteFeatureRolloutPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		featureRolloutPolicyId: featureRolloutPolicyId,
	}
}

// Execute executes the request
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesDeleteFeatureRolloutPoliciesExecute(r ApiPoliciesDeleteFeatureRolloutPoliciesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoliciesFeatureRolloutPolicyApiService.PoliciesDeleteFeatureRolloutPolicies")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policies/featureRolloutPolicies/{featureRolloutPolicy-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"featureRolloutPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.featureRolloutPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPoliciesFeatureRolloutPoliciesCreateAppliesToRequest struct {
	ctx _context.Context
	ApiService *PoliciesFeatureRolloutPolicyApiService
	featureRolloutPolicyId string
	microsoftGraphDirectoryObject *MicrosoftGraphDirectoryObject
}

// New navigation property
func (r ApiPoliciesFeatureRolloutPoliciesCreateAppliesToRequest) MicrosoftGraphDirectoryObject(microsoftGraphDirectoryObject MicrosoftGraphDirectoryObject) ApiPoliciesFeatureRolloutPoliciesCreateAppliesToRequest {
	r.microsoftGraphDirectoryObject = &microsoftGraphDirectoryObject
	return r
}

func (r ApiPoliciesFeatureRolloutPoliciesCreateAppliesToRequest) Execute() (MicrosoftGraphDirectoryObject, *_nethttp.Response, error) {
	return r.ApiService.PoliciesFeatureRolloutPoliciesCreateAppliesToExecute(r)
}

/*
PoliciesFeatureRolloutPoliciesCreateAppliesTo Create new navigation property to appliesTo for policies

Nullable. Specifies a list of directoryObjects that feature is enabled for.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param featureRolloutPolicyId key: id of featureRolloutPolicy
 @return ApiPoliciesFeatureRolloutPoliciesCreateAppliesToRequest
*/
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesFeatureRolloutPoliciesCreateAppliesTo(ctx _context.Context, featureRolloutPolicyId string) ApiPoliciesFeatureRolloutPoliciesCreateAppliesToRequest {
	return ApiPoliciesFeatureRolloutPoliciesCreateAppliesToRequest{
		ApiService: a,
		ctx: ctx,
		featureRolloutPolicyId: featureRolloutPolicyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDirectoryObject
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesFeatureRolloutPoliciesCreateAppliesToExecute(r ApiPoliciesFeatureRolloutPoliciesCreateAppliesToRequest) (MicrosoftGraphDirectoryObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDirectoryObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoliciesFeatureRolloutPolicyApiService.PoliciesFeatureRolloutPoliciesCreateAppliesTo")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policies/featureRolloutPolicies/{featureRolloutPolicy-id}/appliesTo"
	localVarPath = strings.Replace(localVarPath, "{"+"featureRolloutPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.featureRolloutPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDirectoryObject == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDirectoryObject is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDirectoryObject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPoliciesFeatureRolloutPoliciesDeleteAppliesToRequest struct {
	ctx _context.Context
	ApiService *PoliciesFeatureRolloutPolicyApiService
	featureRolloutPolicyId string
	directoryObjectId string
	ifMatch *string
}

// ETag
func (r ApiPoliciesFeatureRolloutPoliciesDeleteAppliesToRequest) IfMatch(ifMatch string) ApiPoliciesFeatureRolloutPoliciesDeleteAppliesToRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiPoliciesFeatureRolloutPoliciesDeleteAppliesToRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PoliciesFeatureRolloutPoliciesDeleteAppliesToExecute(r)
}

/*
PoliciesFeatureRolloutPoliciesDeleteAppliesTo Delete navigation property appliesTo for policies

Nullable. Specifies a list of directoryObjects that feature is enabled for.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param featureRolloutPolicyId key: id of featureRolloutPolicy
 @param directoryObjectId key: id of directoryObject
 @return ApiPoliciesFeatureRolloutPoliciesDeleteAppliesToRequest
*/
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesFeatureRolloutPoliciesDeleteAppliesTo(ctx _context.Context, featureRolloutPolicyId string, directoryObjectId string) ApiPoliciesFeatureRolloutPoliciesDeleteAppliesToRequest {
	return ApiPoliciesFeatureRolloutPoliciesDeleteAppliesToRequest{
		ApiService: a,
		ctx: ctx,
		featureRolloutPolicyId: featureRolloutPolicyId,
		directoryObjectId: directoryObjectId,
	}
}

// Execute executes the request
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesFeatureRolloutPoliciesDeleteAppliesToExecute(r ApiPoliciesFeatureRolloutPoliciesDeleteAppliesToRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoliciesFeatureRolloutPolicyApiService.PoliciesFeatureRolloutPoliciesDeleteAppliesTo")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policies/featureRolloutPolicies/{featureRolloutPolicy-id}/appliesTo/{directoryObject-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"featureRolloutPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.featureRolloutPolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"directoryObject-id"+"}", _neturl.PathEscape(parameterToString(r.directoryObjectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPoliciesFeatureRolloutPoliciesGetAppliesToRequest struct {
	ctx _context.Context
	ApiService *PoliciesFeatureRolloutPolicyApiService
	featureRolloutPolicyId string
	directoryObjectId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiPoliciesFeatureRolloutPoliciesGetAppliesToRequest) Select_(select_ []string) ApiPoliciesFeatureRolloutPoliciesGetAppliesToRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPoliciesFeatureRolloutPoliciesGetAppliesToRequest) Expand(expand []string) ApiPoliciesFeatureRolloutPoliciesGetAppliesToRequest {
	r.expand = &expand
	return r
}

func (r ApiPoliciesFeatureRolloutPoliciesGetAppliesToRequest) Execute() (MicrosoftGraphDirectoryObject, *_nethttp.Response, error) {
	return r.ApiService.PoliciesFeatureRolloutPoliciesGetAppliesToExecute(r)
}

/*
PoliciesFeatureRolloutPoliciesGetAppliesTo Get appliesTo from policies

Nullable. Specifies a list of directoryObjects that feature is enabled for.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param featureRolloutPolicyId key: id of featureRolloutPolicy
 @param directoryObjectId key: id of directoryObject
 @return ApiPoliciesFeatureRolloutPoliciesGetAppliesToRequest
*/
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesFeatureRolloutPoliciesGetAppliesTo(ctx _context.Context, featureRolloutPolicyId string, directoryObjectId string) ApiPoliciesFeatureRolloutPoliciesGetAppliesToRequest {
	return ApiPoliciesFeatureRolloutPoliciesGetAppliesToRequest{
		ApiService: a,
		ctx: ctx,
		featureRolloutPolicyId: featureRolloutPolicyId,
		directoryObjectId: directoryObjectId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDirectoryObject
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesFeatureRolloutPoliciesGetAppliesToExecute(r ApiPoliciesFeatureRolloutPoliciesGetAppliesToRequest) (MicrosoftGraphDirectoryObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDirectoryObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoliciesFeatureRolloutPolicyApiService.PoliciesFeatureRolloutPoliciesGetAppliesTo")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policies/featureRolloutPolicies/{featureRolloutPolicy-id}/appliesTo/{directoryObject-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"featureRolloutPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.featureRolloutPolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"directoryObject-id"+"}", _neturl.PathEscape(parameterToString(r.directoryObjectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest struct {
	ctx _context.Context
	ApiService *PoliciesFeatureRolloutPolicyApiService
	featureRolloutPolicyId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest) Top(top int32) ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest) Skip(skip int32) ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest) Search(search string) ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest) Filter(filter string) ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest) Count(count bool) ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest) Orderby(orderby []string) ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest) Select_(select_ []string) ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest) Expand(expand []string) ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest {
	r.expand = &expand
	return r
}

func (r ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest) Execute() (CollectionOfDirectoryObject, *_nethttp.Response, error) {
	return r.ApiService.PoliciesFeatureRolloutPoliciesListAppliesToExecute(r)
}

/*
PoliciesFeatureRolloutPoliciesListAppliesTo Get appliesTo from policies

Nullable. Specifies a list of directoryObjects that feature is enabled for.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param featureRolloutPolicyId key: id of featureRolloutPolicy
 @return ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest
*/
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesFeatureRolloutPoliciesListAppliesTo(ctx _context.Context, featureRolloutPolicyId string) ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest {
	return ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest{
		ApiService: a,
		ctx: ctx,
		featureRolloutPolicyId: featureRolloutPolicyId,
	}
}

// Execute executes the request
//  @return CollectionOfDirectoryObject
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesFeatureRolloutPoliciesListAppliesToExecute(r ApiPoliciesFeatureRolloutPoliciesListAppliesToRequest) (CollectionOfDirectoryObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDirectoryObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoliciesFeatureRolloutPolicyApiService.PoliciesFeatureRolloutPoliciesListAppliesTo")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policies/featureRolloutPolicies/{featureRolloutPolicy-id}/appliesTo"
	localVarPath = strings.Replace(localVarPath, "{"+"featureRolloutPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.featureRolloutPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPoliciesFeatureRolloutPoliciesUpdateAppliesToRequest struct {
	ctx _context.Context
	ApiService *PoliciesFeatureRolloutPolicyApiService
	featureRolloutPolicyId string
	directoryObjectId string
	microsoftGraphDirectoryObject *MicrosoftGraphDirectoryObject
}

// New navigation property values
func (r ApiPoliciesFeatureRolloutPoliciesUpdateAppliesToRequest) MicrosoftGraphDirectoryObject(microsoftGraphDirectoryObject MicrosoftGraphDirectoryObject) ApiPoliciesFeatureRolloutPoliciesUpdateAppliesToRequest {
	r.microsoftGraphDirectoryObject = &microsoftGraphDirectoryObject
	return r
}

func (r ApiPoliciesFeatureRolloutPoliciesUpdateAppliesToRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PoliciesFeatureRolloutPoliciesUpdateAppliesToExecute(r)
}

/*
PoliciesFeatureRolloutPoliciesUpdateAppliesTo Update the navigation property appliesTo in policies

Nullable. Specifies a list of directoryObjects that feature is enabled for.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param featureRolloutPolicyId key: id of featureRolloutPolicy
 @param directoryObjectId key: id of directoryObject
 @return ApiPoliciesFeatureRolloutPoliciesUpdateAppliesToRequest
*/
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesFeatureRolloutPoliciesUpdateAppliesTo(ctx _context.Context, featureRolloutPolicyId string, directoryObjectId string) ApiPoliciesFeatureRolloutPoliciesUpdateAppliesToRequest {
	return ApiPoliciesFeatureRolloutPoliciesUpdateAppliesToRequest{
		ApiService: a,
		ctx: ctx,
		featureRolloutPolicyId: featureRolloutPolicyId,
		directoryObjectId: directoryObjectId,
	}
}

// Execute executes the request
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesFeatureRolloutPoliciesUpdateAppliesToExecute(r ApiPoliciesFeatureRolloutPoliciesUpdateAppliesToRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoliciesFeatureRolloutPolicyApiService.PoliciesFeatureRolloutPoliciesUpdateAppliesTo")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policies/featureRolloutPolicies/{featureRolloutPolicy-id}/appliesTo/{directoryObject-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"featureRolloutPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.featureRolloutPolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"directoryObject-id"+"}", _neturl.PathEscape(parameterToString(r.directoryObjectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDirectoryObject == nil {
		return nil, reportError("microsoftGraphDirectoryObject is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDirectoryObject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPoliciesGetFeatureRolloutPoliciesRequest struct {
	ctx _context.Context
	ApiService *PoliciesFeatureRolloutPolicyApiService
	featureRolloutPolicyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiPoliciesGetFeatureRolloutPoliciesRequest) Select_(select_ []string) ApiPoliciesGetFeatureRolloutPoliciesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPoliciesGetFeatureRolloutPoliciesRequest) Expand(expand []string) ApiPoliciesGetFeatureRolloutPoliciesRequest {
	r.expand = &expand
	return r
}

func (r ApiPoliciesGetFeatureRolloutPoliciesRequest) Execute() (MicrosoftGraphFeatureRolloutPolicy, *_nethttp.Response, error) {
	return r.ApiService.PoliciesGetFeatureRolloutPoliciesExecute(r)
}

/*
PoliciesGetFeatureRolloutPolicies Get featureRolloutPolicies from policies

The feature rollout policy associated with a directory object.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param featureRolloutPolicyId key: id of featureRolloutPolicy
 @return ApiPoliciesGetFeatureRolloutPoliciesRequest
*/
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesGetFeatureRolloutPolicies(ctx _context.Context, featureRolloutPolicyId string) ApiPoliciesGetFeatureRolloutPoliciesRequest {
	return ApiPoliciesGetFeatureRolloutPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		featureRolloutPolicyId: featureRolloutPolicyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphFeatureRolloutPolicy
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesGetFeatureRolloutPoliciesExecute(r ApiPoliciesGetFeatureRolloutPoliciesRequest) (MicrosoftGraphFeatureRolloutPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphFeatureRolloutPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoliciesFeatureRolloutPolicyApiService.PoliciesGetFeatureRolloutPolicies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policies/featureRolloutPolicies/{featureRolloutPolicy-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"featureRolloutPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.featureRolloutPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPoliciesListFeatureRolloutPoliciesRequest struct {
	ctx _context.Context
	ApiService *PoliciesFeatureRolloutPolicyApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiPoliciesListFeatureRolloutPoliciesRequest) Top(top int32) ApiPoliciesListFeatureRolloutPoliciesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiPoliciesListFeatureRolloutPoliciesRequest) Skip(skip int32) ApiPoliciesListFeatureRolloutPoliciesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiPoliciesListFeatureRolloutPoliciesRequest) Search(search string) ApiPoliciesListFeatureRolloutPoliciesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiPoliciesListFeatureRolloutPoliciesRequest) Filter(filter string) ApiPoliciesListFeatureRolloutPoliciesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiPoliciesListFeatureRolloutPoliciesRequest) Count(count bool) ApiPoliciesListFeatureRolloutPoliciesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiPoliciesListFeatureRolloutPoliciesRequest) Orderby(orderby []string) ApiPoliciesListFeatureRolloutPoliciesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiPoliciesListFeatureRolloutPoliciesRequest) Select_(select_ []string) ApiPoliciesListFeatureRolloutPoliciesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPoliciesListFeatureRolloutPoliciesRequest) Expand(expand []string) ApiPoliciesListFeatureRolloutPoliciesRequest {
	r.expand = &expand
	return r
}

func (r ApiPoliciesListFeatureRolloutPoliciesRequest) Execute() (CollectionOfFeatureRolloutPolicy, *_nethttp.Response, error) {
	return r.ApiService.PoliciesListFeatureRolloutPoliciesExecute(r)
}

/*
PoliciesListFeatureRolloutPolicies Get featureRolloutPolicies from policies

The feature rollout policy associated with a directory object.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPoliciesListFeatureRolloutPoliciesRequest
*/
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesListFeatureRolloutPolicies(ctx _context.Context) ApiPoliciesListFeatureRolloutPoliciesRequest {
	return ApiPoliciesListFeatureRolloutPoliciesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfFeatureRolloutPolicy
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesListFeatureRolloutPoliciesExecute(r ApiPoliciesListFeatureRolloutPoliciesRequest) (CollectionOfFeatureRolloutPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfFeatureRolloutPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoliciesFeatureRolloutPolicyApiService.PoliciesListFeatureRolloutPolicies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policies/featureRolloutPolicies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPoliciesUpdateFeatureRolloutPoliciesRequest struct {
	ctx _context.Context
	ApiService *PoliciesFeatureRolloutPolicyApiService
	featureRolloutPolicyId string
	microsoftGraphFeatureRolloutPolicy *MicrosoftGraphFeatureRolloutPolicy
}

// New navigation property values
func (r ApiPoliciesUpdateFeatureRolloutPoliciesRequest) MicrosoftGraphFeatureRolloutPolicy(microsoftGraphFeatureRolloutPolicy MicrosoftGraphFeatureRolloutPolicy) ApiPoliciesUpdateFeatureRolloutPoliciesRequest {
	r.microsoftGraphFeatureRolloutPolicy = &microsoftGraphFeatureRolloutPolicy
	return r
}

func (r ApiPoliciesUpdateFeatureRolloutPoliciesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PoliciesUpdateFeatureRolloutPoliciesExecute(r)
}

/*
PoliciesUpdateFeatureRolloutPolicies Update the navigation property featureRolloutPolicies in policies

The feature rollout policy associated with a directory object.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param featureRolloutPolicyId key: id of featureRolloutPolicy
 @return ApiPoliciesUpdateFeatureRolloutPoliciesRequest
*/
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesUpdateFeatureRolloutPolicies(ctx _context.Context, featureRolloutPolicyId string) ApiPoliciesUpdateFeatureRolloutPoliciesRequest {
	return ApiPoliciesUpdateFeatureRolloutPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		featureRolloutPolicyId: featureRolloutPolicyId,
	}
}

// Execute executes the request
func (a *PoliciesFeatureRolloutPolicyApiService) PoliciesUpdateFeatureRolloutPoliciesExecute(r ApiPoliciesUpdateFeatureRolloutPoliciesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoliciesFeatureRolloutPolicyApiService.PoliciesUpdateFeatureRolloutPolicies")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/policies/featureRolloutPolicies/{featureRolloutPolicy-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"featureRolloutPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.featureRolloutPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphFeatureRolloutPolicy == nil {
		return nil, reportError("microsoftGraphFeatureRolloutPolicy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphFeatureRolloutPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
