/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
)

// Linger please
var (
	_ _context.Context
)

// SitesOnenoteApiService SitesOnenoteApi service
type SitesOnenoteApiService service

type ApiSitesDeleteOnenoteRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	ifMatch *string
}

// ETag
func (r ApiSitesDeleteOnenoteRequest) IfMatch(ifMatch string) ApiSitesDeleteOnenoteRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesDeleteOnenoteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesDeleteOnenoteExecute(r)
}

/*
SitesDeleteOnenote Delete navigation property onenote for sites

Calls the OneNote service for notebook related operations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesDeleteOnenoteRequest
*/
func (a *SitesOnenoteApiService) SitesDeleteOnenote(ctx _context.Context, siteId string) ApiSitesDeleteOnenoteRequest {
	return ApiSitesDeleteOnenoteRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesDeleteOnenoteExecute(r ApiSitesDeleteOnenoteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesDeleteOnenote")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesGetOnenoteRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesGetOnenoteRequest) Select_(select_ []string) ApiSitesGetOnenoteRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesGetOnenoteRequest) Expand(expand []string) ApiSitesGetOnenoteRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesGetOnenoteRequest) Execute() (MicrosoftGraphOnenote, *_nethttp.Response, error) {
	return r.ApiService.SitesGetOnenoteExecute(r)
}

/*
SitesGetOnenote Get onenote from sites

Calls the OneNote service for notebook related operations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesGetOnenoteRequest
*/
func (a *SitesOnenoteApiService) SitesGetOnenote(ctx _context.Context, siteId string) ApiSitesGetOnenoteRequest {
	return ApiSitesGetOnenoteRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenote
func (a *SitesOnenoteApiService) SitesGetOnenoteExecute(r ApiSitesGetOnenoteRequest) (MicrosoftGraphOnenote, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesGetOnenote")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteCreateNotebooksRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property
func (r ApiSitesOnenoteCreateNotebooksRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteCreateNotebooksRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteCreateNotebooksRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteCreateNotebooksExecute(r)
}

/*
SitesOnenoteCreateNotebooks Create new navigation property to notebooks for sites

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesOnenoteCreateNotebooksRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteCreateNotebooks(ctx _context.Context, siteId string) ApiSitesOnenoteCreateNotebooksRequest {
	return ApiSitesOnenoteCreateNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteCreateNotebooksExecute(r ApiSitesOnenoteCreateNotebooksRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteCreateNotebooks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteCreateOperationsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	microsoftGraphOnenoteOperation *MicrosoftGraphOnenoteOperation
}

// New navigation property
func (r ApiSitesOnenoteCreateOperationsRequest) MicrosoftGraphOnenoteOperation(microsoftGraphOnenoteOperation MicrosoftGraphOnenoteOperation) ApiSitesOnenoteCreateOperationsRequest {
	r.microsoftGraphOnenoteOperation = &microsoftGraphOnenoteOperation
	return r
}

func (r ApiSitesOnenoteCreateOperationsRequest) Execute() (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteCreateOperationsExecute(r)
}

/*
SitesOnenoteCreateOperations Create new navigation property to operations for sites

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesOnenoteCreateOperationsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteCreateOperations(ctx _context.Context, siteId string) ApiSitesOnenoteCreateOperationsRequest {
	return ApiSitesOnenoteCreateOperationsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteOperation
func (a *SitesOnenoteApiService) SitesOnenoteCreateOperationsExecute(r ApiSitesOnenoteCreateOperationsRequest) (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteCreateOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/operations"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteOperation == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteCreatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiSitesOnenoteCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenoteCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenoteCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteCreatePagesExecute(r)
}

/*
SitesOnenoteCreatePages Create new navigation property to pages for sites

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesOnenoteCreatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteCreatePages(ctx _context.Context, siteId string) ApiSitesOnenoteCreatePagesRequest {
	return ApiSitesOnenoteCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteCreatePagesExecute(r ApiSitesOnenoteCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteCreateResourcesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	microsoftGraphOnenoteResource *MicrosoftGraphOnenoteResource
}

// New navigation property
func (r ApiSitesOnenoteCreateResourcesRequest) MicrosoftGraphOnenoteResource(microsoftGraphOnenoteResource MicrosoftGraphOnenoteResource) ApiSitesOnenoteCreateResourcesRequest {
	r.microsoftGraphOnenoteResource = &microsoftGraphOnenoteResource
	return r
}

func (r ApiSitesOnenoteCreateResourcesRequest) Execute() (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteCreateResourcesExecute(r)
}

/*
SitesOnenoteCreateResources Create new navigation property to resources for sites

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesOnenoteCreateResourcesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteCreateResources(ctx _context.Context, siteId string) ApiSitesOnenoteCreateResourcesRequest {
	return ApiSitesOnenoteCreateResourcesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteResource
func (a *SitesOnenoteApiService) SitesOnenoteCreateResourcesExecute(r ApiSitesOnenoteCreateResourcesRequest) (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteCreateResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteResource == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenoteCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteCreateSectionGroupsExecute(r)
}

/*
SitesOnenoteCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesOnenoteCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteCreateSectionGroups(ctx _context.Context, siteId string) ApiSitesOnenoteCreateSectionGroupsRequest {
	return ApiSitesOnenoteCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteCreateSectionGroupsExecute(r ApiSitesOnenoteCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenoteCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteCreateSectionsExecute(r)
}

/*
SitesOnenoteCreateSections Create new navigation property to sections for sites

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesOnenoteCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteCreateSections(ctx _context.Context, siteId string) ApiSitesOnenoteCreateSectionsRequest {
	return ApiSitesOnenoteCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteCreateSectionsExecute(r ApiSitesOnenoteCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteDeleteNotebooksRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteDeleteNotebooksRequest) IfMatch(ifMatch string) ApiSitesOnenoteDeleteNotebooksRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteDeleteNotebooksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteDeleteNotebooksExecute(r)
}

/*
SitesOnenoteDeleteNotebooks Delete navigation property notebooks for sites

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @return ApiSitesOnenoteDeleteNotebooksRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteDeleteNotebooks(ctx _context.Context, siteId string, notebookId string) ApiSitesOnenoteDeleteNotebooksRequest {
	return ApiSitesOnenoteDeleteNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteDeleteNotebooksExecute(r ApiSitesOnenoteDeleteNotebooksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteDeleteNotebooks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteDeleteOperationsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteOperationId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteDeleteOperationsRequest) IfMatch(ifMatch string) ApiSitesOnenoteDeleteOperationsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteDeleteOperationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteDeleteOperationsExecute(r)
}

/*
SitesOnenoteDeleteOperations Delete navigation property operations for sites

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteOperationId key: id of onenoteOperation
 @return ApiSitesOnenoteDeleteOperationsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteDeleteOperations(ctx _context.Context, siteId string, onenoteOperationId string) ApiSitesOnenoteDeleteOperationsRequest {
	return ApiSitesOnenoteDeleteOperationsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteOperationId: onenoteOperationId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteDeleteOperationsExecute(r ApiSitesOnenoteDeleteOperationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteDeleteOperations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/operations/{onenoteOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteOperation-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteDeletePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteDeletePagesRequest) IfMatch(ifMatch string) ApiSitesOnenoteDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteDeletePagesExecute(r)
}

/*
SitesOnenoteDeletePages Delete navigation property pages for sites

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteDeletePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteDeletePages(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenoteDeletePagesRequest {
	return ApiSitesOnenoteDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteDeletePagesExecute(r ApiSitesOnenoteDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteDeleteResourcesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteResourceId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteDeleteResourcesRequest) IfMatch(ifMatch string) ApiSitesOnenoteDeleteResourcesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteDeleteResourcesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteDeleteResourcesExecute(r)
}

/*
SitesOnenoteDeleteResources Delete navigation property resources for sites

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteResourceId key: id of onenoteResource
 @return ApiSitesOnenoteDeleteResourcesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteDeleteResources(ctx _context.Context, siteId string, onenoteResourceId string) ApiSitesOnenoteDeleteResourcesRequest {
	return ApiSitesOnenoteDeleteResourcesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteDeleteResourcesExecute(r ApiSitesOnenoteDeleteResourcesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteDeleteResources")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/resources/{onenoteResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenoteDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteDeleteSectionGroupsExecute(r)
}

/*
SitesOnenoteDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteDeleteSectionGroups(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteDeleteSectionGroupsRequest {
	return ApiSitesOnenoteDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteDeleteSectionGroupsExecute(r ApiSitesOnenoteDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenoteDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteDeleteSectionsExecute(r)
}

/*
SitesOnenoteDeleteSections Delete navigation property sections for sites

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteDeleteSections(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteDeleteSectionsRequest {
	return ApiSitesOnenoteDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteDeleteSectionsExecute(r ApiSitesOnenoteDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteGetNotebooksRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteGetNotebooksRequest) Select_(select_ []string) ApiSitesOnenoteGetNotebooksRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteGetNotebooksRequest) Expand(expand []string) ApiSitesOnenoteGetNotebooksRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteGetNotebooksRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteGetNotebooksExecute(r)
}

/*
SitesOnenoteGetNotebooks Get notebooks from sites

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @return ApiSitesOnenoteGetNotebooksRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteGetNotebooks(ctx _context.Context, siteId string, notebookId string) ApiSitesOnenoteGetNotebooksRequest {
	return ApiSitesOnenoteGetNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteGetNotebooksExecute(r ApiSitesOnenoteGetNotebooksRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteGetNotebooks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteGetOperationsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteOperationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteGetOperationsRequest) Select_(select_ []string) ApiSitesOnenoteGetOperationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteGetOperationsRequest) Expand(expand []string) ApiSitesOnenoteGetOperationsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteGetOperationsRequest) Execute() (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteGetOperationsExecute(r)
}

/*
SitesOnenoteGetOperations Get operations from sites

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteOperationId key: id of onenoteOperation
 @return ApiSitesOnenoteGetOperationsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteGetOperations(ctx _context.Context, siteId string, onenoteOperationId string) ApiSitesOnenoteGetOperationsRequest {
	return ApiSitesOnenoteGetOperationsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteOperationId: onenoteOperationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteOperation
func (a *SitesOnenoteApiService) SitesOnenoteGetOperationsExecute(r ApiSitesOnenoteGetOperationsRequest) (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteGetOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/operations/{onenoteOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteOperation-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteGetPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteGetPagesRequest) Select_(select_ []string) ApiSitesOnenoteGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteGetPagesRequest) Expand(expand []string) ApiSitesOnenoteGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteGetPagesExecute(r)
}

/*
SitesOnenoteGetPages Get pages from sites

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteGetPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteGetPages(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenoteGetPagesRequest {
	return ApiSitesOnenoteGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteGetPagesExecute(r ApiSitesOnenoteGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
}


func (r ApiSitesOnenoteGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteGetPagesContentExecute(r)
}

/*
SitesOnenoteGetPagesContent Get media content for the navigation property pages from sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteGetPagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteGetPagesContent(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenoteGetPagesContentRequest {
	return ApiSitesOnenoteGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SitesOnenoteApiService) SitesOnenoteGetPagesContentExecute(r ApiSitesOnenoteGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteGetResourcesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteResourceId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteGetResourcesRequest) Select_(select_ []string) ApiSitesOnenoteGetResourcesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteGetResourcesRequest) Expand(expand []string) ApiSitesOnenoteGetResourcesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteGetResourcesRequest) Execute() (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteGetResourcesExecute(r)
}

/*
SitesOnenoteGetResources Get resources from sites

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteResourceId key: id of onenoteResource
 @return ApiSitesOnenoteGetResourcesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteGetResources(ctx _context.Context, siteId string, onenoteResourceId string) ApiSitesOnenoteGetResourcesRequest {
	return ApiSitesOnenoteGetResourcesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteResource
func (a *SitesOnenoteApiService) SitesOnenoteGetResourcesExecute(r ApiSitesOnenoteGetResourcesRequest) (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteGetResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/resources/{onenoteResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteGetResourcesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteResourceId string
}


func (r ApiSitesOnenoteGetResourcesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteGetResourcesContentExecute(r)
}

/*
SitesOnenoteGetResourcesContent Get media content for the navigation property resources from sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteResourceId key: id of onenoteResource
 @return ApiSitesOnenoteGetResourcesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteGetResourcesContent(ctx _context.Context, siteId string, onenoteResourceId string) ApiSitesOnenoteGetResourcesContentRequest {
	return ApiSitesOnenoteGetResourcesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SitesOnenoteApiService) SitesOnenoteGetResourcesContentExecute(r ApiSitesOnenoteGetResourcesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteGetResourcesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/resources/{onenoteResource-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteGetSectionGroupsExecute(r)
}

/*
SitesOnenoteGetSectionGroups Get sectionGroups from sites

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteGetSectionGroups(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteGetSectionGroupsRequest {
	return ApiSitesOnenoteGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteGetSectionGroupsExecute(r ApiSitesOnenoteGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteGetSectionsRequest) Select_(select_ []string) ApiSitesOnenoteGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteGetSectionsRequest) Expand(expand []string) ApiSitesOnenoteGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteGetSectionsExecute(r)
}

/*
SitesOnenoteGetSections Get sections from sites

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteGetSections(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteGetSectionsRequest {
	return ApiSitesOnenoteGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteGetSectionsExecute(r ApiSitesOnenoteGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteListNotebooksRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteListNotebooksRequest) Top(top int32) ApiSitesOnenoteListNotebooksRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteListNotebooksRequest) Skip(skip int32) ApiSitesOnenoteListNotebooksRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteListNotebooksRequest) Search(search string) ApiSitesOnenoteListNotebooksRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteListNotebooksRequest) Filter(filter string) ApiSitesOnenoteListNotebooksRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteListNotebooksRequest) Count(count bool) ApiSitesOnenoteListNotebooksRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteListNotebooksRequest) Orderby(orderby []string) ApiSitesOnenoteListNotebooksRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteListNotebooksRequest) Select_(select_ []string) ApiSitesOnenoteListNotebooksRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteListNotebooksRequest) Expand(expand []string) ApiSitesOnenoteListNotebooksRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteListNotebooksRequest) Execute() (CollectionOfNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteListNotebooksExecute(r)
}

/*
SitesOnenoteListNotebooks Get notebooks from sites

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesOnenoteListNotebooksRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteListNotebooks(ctx _context.Context, siteId string) ApiSitesOnenoteListNotebooksRequest {
	return ApiSitesOnenoteListNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return CollectionOfNotebook
func (a *SitesOnenoteApiService) SitesOnenoteListNotebooksExecute(r ApiSitesOnenoteListNotebooksRequest) (CollectionOfNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteListNotebooks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteListOperationsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteListOperationsRequest) Top(top int32) ApiSitesOnenoteListOperationsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteListOperationsRequest) Skip(skip int32) ApiSitesOnenoteListOperationsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteListOperationsRequest) Search(search string) ApiSitesOnenoteListOperationsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteListOperationsRequest) Filter(filter string) ApiSitesOnenoteListOperationsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteListOperationsRequest) Count(count bool) ApiSitesOnenoteListOperationsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteListOperationsRequest) Orderby(orderby []string) ApiSitesOnenoteListOperationsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteListOperationsRequest) Select_(select_ []string) ApiSitesOnenoteListOperationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteListOperationsRequest) Expand(expand []string) ApiSitesOnenoteListOperationsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteListOperationsRequest) Execute() (CollectionOfOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteListOperationsExecute(r)
}

/*
SitesOnenoteListOperations Get operations from sites

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesOnenoteListOperationsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteListOperations(ctx _context.Context, siteId string) ApiSitesOnenoteListOperationsRequest {
	return ApiSitesOnenoteListOperationsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteOperation
func (a *SitesOnenoteApiService) SitesOnenoteListOperationsExecute(r ApiSitesOnenoteListOperationsRequest) (CollectionOfOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteListOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/operations"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteListPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteListPagesRequest) Top(top int32) ApiSitesOnenoteListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteListPagesRequest) Skip(skip int32) ApiSitesOnenoteListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteListPagesRequest) Search(search string) ApiSitesOnenoteListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteListPagesRequest) Filter(filter string) ApiSitesOnenoteListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteListPagesRequest) Count(count bool) ApiSitesOnenoteListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteListPagesRequest) Orderby(orderby []string) ApiSitesOnenoteListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteListPagesRequest) Select_(select_ []string) ApiSitesOnenoteListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteListPagesRequest) Expand(expand []string) ApiSitesOnenoteListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteListPagesExecute(r)
}

/*
SitesOnenoteListPages Get pages from sites

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesOnenoteListPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteListPages(ctx _context.Context, siteId string) ApiSitesOnenoteListPagesRequest {
	return ApiSitesOnenoteListPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteListPagesExecute(r ApiSitesOnenoteListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteListResourcesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteListResourcesRequest) Top(top int32) ApiSitesOnenoteListResourcesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteListResourcesRequest) Skip(skip int32) ApiSitesOnenoteListResourcesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteListResourcesRequest) Search(search string) ApiSitesOnenoteListResourcesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteListResourcesRequest) Filter(filter string) ApiSitesOnenoteListResourcesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteListResourcesRequest) Count(count bool) ApiSitesOnenoteListResourcesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteListResourcesRequest) Orderby(orderby []string) ApiSitesOnenoteListResourcesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteListResourcesRequest) Select_(select_ []string) ApiSitesOnenoteListResourcesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteListResourcesRequest) Expand(expand []string) ApiSitesOnenoteListResourcesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteListResourcesRequest) Execute() (CollectionOfOnenoteResource, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteListResourcesExecute(r)
}

/*
SitesOnenoteListResources Get resources from sites

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesOnenoteListResourcesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteListResources(ctx _context.Context, siteId string) ApiSitesOnenoteListResourcesRequest {
	return ApiSitesOnenoteListResourcesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteResource
func (a *SitesOnenoteApiService) SitesOnenoteListResourcesExecute(r ApiSitesOnenoteListResourcesRequest) (CollectionOfOnenoteResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteListResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteListSectionGroupsRequest) Top(top int32) ApiSitesOnenoteListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenoteListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteListSectionGroupsRequest) Search(search string) ApiSitesOnenoteListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteListSectionGroupsRequest) Filter(filter string) ApiSitesOnenoteListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteListSectionGroupsRequest) Count(count bool) ApiSitesOnenoteListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenoteListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteListSectionGroupsExecute(r)
}

/*
SitesOnenoteListSectionGroups Get sectionGroups from sites

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesOnenoteListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteListSectionGroups(ctx _context.Context, siteId string) ApiSitesOnenoteListSectionGroupsRequest {
	return ApiSitesOnenoteListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteListSectionGroupsExecute(r ApiSitesOnenoteListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteListSectionsRequest) Top(top int32) ApiSitesOnenoteListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteListSectionsRequest) Skip(skip int32) ApiSitesOnenoteListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteListSectionsRequest) Search(search string) ApiSitesOnenoteListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteListSectionsRequest) Filter(filter string) ApiSitesOnenoteListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteListSectionsRequest) Count(count bool) ApiSitesOnenoteListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteListSectionsRequest) Orderby(orderby []string) ApiSitesOnenoteListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteListSectionsRequest) Select_(select_ []string) ApiSitesOnenoteListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteListSectionsRequest) Expand(expand []string) ApiSitesOnenoteListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteListSectionsExecute(r)
}

/*
SitesOnenoteListSections Get sections from sites

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesOnenoteListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteListSections(ctx _context.Context, siteId string) ApiSitesOnenoteListSectionsRequest {
	return ApiSitesOnenoteListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteListSectionsExecute(r ApiSitesOnenoteListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenoteNotebooksCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteNotebooksCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteNotebooksCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksCreateSectionGroupsExecute(r)
}

/*
SitesOnenoteNotebooksCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @return ApiSitesOnenoteNotebooksCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksCreateSectionGroups(ctx _context.Context, siteId string, notebookId string) ApiSitesOnenoteNotebooksCreateSectionGroupsRequest {
	return ApiSitesOnenoteNotebooksCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksCreateSectionGroupsExecute(r ApiSitesOnenoteNotebooksCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenoteNotebooksCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteNotebooksCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteNotebooksCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksCreateSectionsExecute(r)
}

/*
SitesOnenoteNotebooksCreateSections Create new navigation property to sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @return ApiSitesOnenoteNotebooksCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksCreateSections(ctx _context.Context, siteId string, notebookId string) ApiSitesOnenoteNotebooksCreateSectionsRequest {
	return ApiSitesOnenoteNotebooksCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksCreateSectionsExecute(r ApiSitesOnenoteNotebooksCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksDeleteSectionGroupsExecute(r)
}

/*
SitesOnenoteNotebooksDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksDeleteSectionGroups(ctx _context.Context, siteId string, notebookId string, sectionGroupId string) ApiSitesOnenoteNotebooksDeleteSectionGroupsRequest {
	return ApiSitesOnenoteNotebooksDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksDeleteSectionGroupsExecute(r ApiSitesOnenoteNotebooksDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksDeleteSectionsExecute(r)
}

/*
SitesOnenoteNotebooksDeleteSections Delete navigation property sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksDeleteSections(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksDeleteSectionsRequest {
	return ApiSitesOnenoteNotebooksDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksDeleteSectionsExecute(r ApiSitesOnenoteNotebooksDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteNotebooksGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksGetSectionGroupsExecute(r)
}

/*
SitesOnenoteNotebooksGetSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksGetSectionGroups(ctx _context.Context, siteId string, notebookId string, sectionGroupId string) ApiSitesOnenoteNotebooksGetSectionGroupsRequest {
	return ApiSitesOnenoteNotebooksGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksGetSectionGroupsExecute(r ApiSitesOnenoteNotebooksGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksGetSectionsRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksGetSectionsRequest) Expand(expand []string) ApiSitesOnenoteNotebooksGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksGetSectionsExecute(r)
}

/*
SitesOnenoteNotebooksGetSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksGetSections(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksGetSectionsRequest {
	return ApiSitesOnenoteNotebooksGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksGetSectionsExecute(r ApiSitesOnenoteNotebooksGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteNotebooksListSectionGroupsRequest) Top(top int32) ApiSitesOnenoteNotebooksListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteNotebooksListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenoteNotebooksListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteNotebooksListSectionGroupsRequest) Search(search string) ApiSitesOnenoteNotebooksListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteNotebooksListSectionGroupsRequest) Filter(filter string) ApiSitesOnenoteNotebooksListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteNotebooksListSectionGroupsRequest) Count(count bool) ApiSitesOnenoteNotebooksListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteNotebooksListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenoteNotebooksListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteNotebooksListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteNotebooksListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksListSectionGroupsExecute(r)
}

/*
SitesOnenoteNotebooksListSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @return ApiSitesOnenoteNotebooksListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksListSectionGroups(ctx _context.Context, siteId string, notebookId string) ApiSitesOnenoteNotebooksListSectionGroupsRequest {
	return ApiSitesOnenoteNotebooksListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksListSectionGroupsExecute(r ApiSitesOnenoteNotebooksListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteNotebooksListSectionsRequest) Top(top int32) ApiSitesOnenoteNotebooksListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteNotebooksListSectionsRequest) Skip(skip int32) ApiSitesOnenoteNotebooksListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteNotebooksListSectionsRequest) Search(search string) ApiSitesOnenoteNotebooksListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteNotebooksListSectionsRequest) Filter(filter string) ApiSitesOnenoteNotebooksListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteNotebooksListSectionsRequest) Count(count bool) ApiSitesOnenoteNotebooksListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteNotebooksListSectionsRequest) Orderby(orderby []string) ApiSitesOnenoteNotebooksListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteNotebooksListSectionsRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksListSectionsRequest) Expand(expand []string) ApiSitesOnenoteNotebooksListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksListSectionsExecute(r)
}

/*
SitesOnenoteNotebooksListSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @return ApiSitesOnenoteNotebooksListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksListSections(ctx _context.Context, siteId string, notebookId string) ApiSitesOnenoteNotebooksListSectionsRequest {
	return ApiSitesOnenoteNotebooksListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksListSectionsExecute(r ApiSitesOnenoteNotebooksListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsCreateSectionGroupsExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsCreateSectionGroups(ctx _context.Context, siteId string, notebookId string, sectionGroupId string) ApiSitesOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsCreateSectionGroupsExecute(r ApiSitesOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenoteNotebooksSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteNotebooksSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsCreateSectionsExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsCreateSections Create new navigation property to sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionGroupsCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsCreateSections(ctx _context.Context, siteId string, notebookId string, sectionGroupId string) ApiSitesOnenoteNotebooksSectionGroupsCreateSectionsRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsCreateSectionsExecute(r ApiSitesOnenoteNotebooksSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsDeleteParentNotebook(ctx _context.Context, siteId string, notebookId string, sectionGroupId string) ApiSitesOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsDeleteParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsDeleteParentSectionGroup(ctx _context.Context, siteId string, notebookId string, sectionGroupId string) ApiSitesOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsDeleteParentSectionGroupExecute(r ApiSitesOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsDeleteSectionGroups(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsDeleteSectionGroupsExecute(r ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsDeleteSectionsExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsDeleteSections Delete navigation property sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsDeleteSections(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionsRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsDeleteSectionsExecute(r ApiSitesOnenoteNotebooksSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsGetParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsGetParentNotebook Get parentNotebook from sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionGroupsGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsGetParentNotebook(ctx _context.Context, siteId string, notebookId string, sectionGroupId string) ApiSitesOnenoteNotebooksSectionGroupsGetParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsGetParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsGetParentSectionGroupExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsGetParentSectionGroup(ctx _context.Context, siteId string, notebookId string, sectionGroupId string) ApiSitesOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsGetParentSectionGroupExecute(r ApiSitesOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsGetSectionGroupsExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsGetSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionGroupsGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsGetSectionGroups(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenoteNotebooksSectionGroupsGetSectionGroupsRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsGetSectionGroupsExecute(r ApiSitesOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionGroupsGetSectionsRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsGetSectionsExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsGetSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionGroupsGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsGetSections(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionGroupsGetSectionsRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsGetSectionsExecute(r ApiSitesOnenoteNotebooksSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Top(top int32) ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Search(search string) ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Count(count bool) ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsListSectionGroupsExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsListSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsListSectionGroups(ctx _context.Context, siteId string, notebookId string, sectionGroupId string) ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsListSectionGroupsExecute(r ApiSitesOnenoteNotebooksSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest) Top(top int32) ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest) Skip(skip int32) ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest) Search(search string) ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest) Filter(filter string) ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest) Count(count bool) ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsListSectionsExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsListSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsListSections(ctx _context.Context, siteId string, notebookId string, sectionGroupId string) ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsListSectionsExecute(r ApiSitesOnenoteNotebooksSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsCreatePagesExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsCreatePages Create new navigation property to pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsCreatePages(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsCreatePagesExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsDeletePagesExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsDeletePages Delete navigation property pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsDeletePages(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsDeletePagesExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebook(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroup(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsGetPagesExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsGetPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsGetPages(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsGetPagesExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsGetPagesContentExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsGetPagesContent Get media content for the navigation property pages from sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsGetPagesContent(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsGetPagesContentExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsGetParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsGetParentNotebook Get parentNotebook from sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsGetParentNotebook(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsGetParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroup(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Top(top int32) ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Skip(skip int32) ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Search(search string) ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Filter(filter string) ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Count(count bool) ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Orderby(orderby []string) ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsListPagesExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsListPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsListPages(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsListPagesExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebook(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSection Delete navigation property parentSection for sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSection(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebook Get parentNotebook from sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebook(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentSection Get parentSection from sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentSection(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebook(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSection Update the navigation property parentSection in sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSection(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsUpdatePages Update the navigation property pages in sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsUpdatePages(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest) Body(body *os.File) ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesContent Update media content for the navigation property pages in sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesContent(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebook(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroup(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupExecute(r ApiSitesOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsUpdateParentNotebook(ctx _context.Context, siteId string, notebookId string, sectionGroupId string) ApiSitesOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsUpdateParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsUpdateParentSectionGroup(ctx _context.Context, siteId string, notebookId string, sectionGroupId string) ApiSitesOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsUpdateParentSectionGroupExecute(r ApiSitesOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsUpdateSectionGroups(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsUpdateSectionGroupsExecute(r ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionGroupsUpdateSectionsExecute(r)
}

/*
SitesOnenoteNotebooksSectionGroupsUpdateSections Update the navigation property sections in sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsUpdateSections(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionsRequest {
	return ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionGroupsUpdateSectionsExecute(r ApiSitesOnenoteNotebooksSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiSitesOnenoteNotebooksSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenoteNotebooksSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsCreatePagesExecute(r)
}

/*
SitesOnenoteNotebooksSectionsCreatePages Create new navigation property to pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsCreatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsCreatePages(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsCreatePagesRequest {
	return ApiSitesOnenoteNotebooksSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsCreatePagesExecute(r ApiSitesOnenoteNotebooksSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsDeletePagesExecute(r)
}

/*
SitesOnenoteNotebooksSectionsDeletePages Delete navigation property pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionsDeletePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsDeletePages(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionsDeletePagesRequest {
	return ApiSitesOnenoteNotebooksSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsDeletePagesExecute(r ApiSitesOnenoteNotebooksSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionsDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsDeleteParentNotebook(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsDeleteParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsDeleteParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenoteNotebooksSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsDeleteParentSectionGroup(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsDeleteParentSectionGroupRequest {
	return ApiSitesOnenoteNotebooksSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsDeleteParentSectionGroupExecute(r ApiSitesOnenoteNotebooksSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionsGetPagesRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionsGetPagesRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsGetPagesExecute(r)
}

/*
SitesOnenoteNotebooksSectionsGetPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionsGetPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsGetPages(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionsGetPagesRequest {
	return ApiSitesOnenoteNotebooksSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsGetPagesExecute(r ApiSitesOnenoteNotebooksSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiSitesOnenoteNotebooksSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsGetPagesContentExecute(r)
}

/*
SitesOnenoteNotebooksSectionsGetPagesContent Get media content for the navigation property pages from sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionsGetPagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsGetPagesContent(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionsGetPagesContentRequest {
	return ApiSitesOnenoteNotebooksSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsGetPagesContentExecute(r ApiSitesOnenoteNotebooksSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionsGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionsGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsGetParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionsGetParentNotebook Get parentNotebook from sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsGetParentNotebook(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsGetParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsGetParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsGetParentSectionGroupExecute(r)
}

/*
SitesOnenoteNotebooksSectionsGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsGetParentSectionGroup(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsGetParentSectionGroupRequest {
	return ApiSitesOnenoteNotebooksSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsGetParentSectionGroupExecute(r ApiSitesOnenoteNotebooksSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteNotebooksSectionsListPagesRequest) Top(top int32) ApiSitesOnenoteNotebooksSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteNotebooksSectionsListPagesRequest) Skip(skip int32) ApiSitesOnenoteNotebooksSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteNotebooksSectionsListPagesRequest) Search(search string) ApiSitesOnenoteNotebooksSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteNotebooksSectionsListPagesRequest) Filter(filter string) ApiSitesOnenoteNotebooksSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteNotebooksSectionsListPagesRequest) Count(count bool) ApiSitesOnenoteNotebooksSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteNotebooksSectionsListPagesRequest) Orderby(orderby []string) ApiSitesOnenoteNotebooksSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionsListPagesRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionsListPagesRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsListPagesExecute(r)
}

/*
SitesOnenoteNotebooksSectionsListPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsListPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsListPages(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsListPagesRequest {
	return ApiSitesOnenoteNotebooksSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsListPagesExecute(r ApiSitesOnenoteNotebooksSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsPagesDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsPagesDeleteParentNotebook(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsPagesDeleteParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsPagesDeleteParentSectionExecute(r)
}

/*
SitesOnenoteNotebooksSectionsPagesDeleteParentSection Delete navigation property parentSection for sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionsPagesDeleteParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsPagesDeleteParentSection(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionsPagesDeleteParentSectionRequest {
	return ApiSitesOnenoteNotebooksSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsPagesDeleteParentSectionExecute(r ApiSitesOnenoteNotebooksSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsPagesGetParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionsPagesGetParentNotebook Get parentNotebook from sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionsPagesGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsPagesGetParentNotebook(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionsPagesGetParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsPagesGetParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsPagesGetParentSectionExecute(r)
}

/*
SitesOnenoteNotebooksSectionsPagesGetParentSection Get parentSection from sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionsPagesGetParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsPagesGetParentSection(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionsPagesGetParentSectionRequest {
	return ApiSitesOnenoteNotebooksSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsPagesGetParentSectionExecute(r ApiSitesOnenoteNotebooksSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsPagesUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsPagesUpdateParentNotebook(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsPagesUpdateParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteNotebooksSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsPagesUpdateParentSectionExecute(r)
}

/*
SitesOnenoteNotebooksSectionsPagesUpdateParentSection Update the navigation property parentSection in sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionsPagesUpdateParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsPagesUpdateParentSection(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionsPagesUpdateParentSectionRequest {
	return ApiSitesOnenoteNotebooksSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsPagesUpdateParentSectionExecute(r ApiSitesOnenoteNotebooksSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroups(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionsExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupCreateSections Create new navigation property to sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupCreateSections(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionsExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebook(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroups(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupDeleteSections Delete navigation property sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupDeleteSections(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupGetParentNotebook Get parentNotebook from sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupGetParentNotebook(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroup(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupGetSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupGetSectionGroups(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupGetSectionsExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupGetSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupGetSections(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupGetSectionsExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Search(search string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroups(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Top(top int32) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Skip(skip int32) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Search(search string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Filter(filter string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Count(count bool) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Expand(expand []string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupListSectionsExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupListSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupListSections(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupListSectionsExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebook(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroups(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsExecute(r)
}

/*
SitesOnenoteNotebooksSectionsParentSectionGroupUpdateSections Update the navigation property sections in sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupUpdateSections(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest {
	return ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsExecute(r ApiSitesOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenoteNotebooksSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsUpdatePagesExecute(r)
}

/*
SitesOnenoteNotebooksSectionsUpdatePages Update the navigation property pages in sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionsUpdatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsUpdatePages(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionsUpdatePagesRequest {
	return ApiSitesOnenoteNotebooksSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsUpdatePagesExecute(r ApiSitesOnenoteNotebooksSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiSitesOnenoteNotebooksSectionsUpdatePagesContentRequest) Body(body *os.File) ApiSitesOnenoteNotebooksSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsUpdatePagesContentExecute(r)
}

/*
SitesOnenoteNotebooksSectionsUpdatePagesContent Update media content for the navigation property pages in sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteNotebooksSectionsUpdatePagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsUpdatePagesContent(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteNotebooksSectionsUpdatePagesContentRequest {
	return ApiSitesOnenoteNotebooksSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsUpdatePagesContentExecute(r ApiSitesOnenoteNotebooksSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteNotebooksSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteNotebooksSectionsUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsUpdateParentNotebook(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsUpdateParentNotebookRequest {
	return ApiSitesOnenoteNotebooksSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsUpdateParentNotebookExecute(r ApiSitesOnenoteNotebooksSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteNotebooksSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteNotebooksSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksSectionsUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenoteNotebooksSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksSectionsUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsUpdateParentSectionGroup(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksSectionsUpdateParentSectionGroupRequest {
	return ApiSitesOnenoteNotebooksSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksSectionsUpdateParentSectionGroupExecute(r ApiSitesOnenoteNotebooksSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteNotebooksUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteNotebooksUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksUpdateSectionGroupsExecute(r)
}

/*
SitesOnenoteNotebooksUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteNotebooksUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksUpdateSectionGroups(ctx _context.Context, siteId string, notebookId string, sectionGroupId string) ApiSitesOnenoteNotebooksUpdateSectionGroupsRequest {
	return ApiSitesOnenoteNotebooksUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksUpdateSectionGroupsExecute(r ApiSitesOnenoteNotebooksUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteNotebooksUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteNotebooksUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteNotebooksUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteNotebooksUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteNotebooksUpdateSectionsExecute(r)
}

/*
SitesOnenoteNotebooksUpdateSections Update the navigation property sections in sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteNotebooksUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksUpdateSections(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesOnenoteNotebooksUpdateSectionsRequest {
	return ApiSitesOnenoteNotebooksUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteNotebooksUpdateSectionsExecute(r ApiSitesOnenoteNotebooksUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteNotebooksUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesDeleteParentNotebookExecute(r)
}

/*
SitesOnenotePagesDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesDeleteParentNotebook(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesDeleteParentNotebookRequest {
	return ApiSitesOnenotePagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesDeleteParentNotebookExecute(r ApiSitesOnenotePagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesDeleteParentSectionExecute(r)
}

/*
SitesOnenotePagesDeleteParentSection Delete navigation property parentSection for sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesDeleteParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesDeleteParentSection(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesDeleteParentSectionRequest {
	return ApiSitesOnenotePagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesDeleteParentSectionExecute(r ApiSitesOnenotePagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenotePagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenotePagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesGetParentNotebookExecute(r)
}

/*
SitesOnenotePagesGetParentNotebook Get parentNotebook from sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesGetParentNotebook(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesGetParentNotebookRequest {
	return ApiSitesOnenotePagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenotePagesGetParentNotebookExecute(r ApiSitesOnenotePagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesGetParentSectionRequest) Select_(select_ []string) ApiSitesOnenotePagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesGetParentSectionRequest) Expand(expand []string) ApiSitesOnenotePagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesGetParentSectionExecute(r)
}

/*
SitesOnenotePagesGetParentSection Get parentSection from sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesGetParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesGetParentSection(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesGetParentSectionRequest {
	return ApiSitesOnenotePagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesGetParentSectionExecute(r ApiSitesOnenotePagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenotePagesParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookCreateSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentNotebookCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookCreateSectionGroups(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentNotebookCreateSectionGroupsRequest {
	return ApiSitesOnenotePagesParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookCreateSectionGroupsExecute(r ApiSitesOnenotePagesParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenotePagesParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenotePagesParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenotePagesParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookCreateSectionsExecute(r)
}

/*
SitesOnenotePagesParentNotebookCreateSections Create new navigation property to sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentNotebookCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookCreateSections(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentNotebookCreateSectionsRequest {
	return ApiSitesOnenotePagesParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookCreateSectionsExecute(r ApiSitesOnenotePagesParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookDeleteSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookDeleteSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookDeleteSectionGroupsRequest {
	return ApiSitesOnenotePagesParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookDeleteSectionGroupsExecute(r ApiSitesOnenotePagesParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookDeleteSectionsExecute(r)
}

/*
SitesOnenotePagesParentNotebookDeleteSections Delete navigation property sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookDeleteSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookDeleteSectionsRequest {
	return ApiSitesOnenotePagesParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookDeleteSectionsExecute(r ApiSitesOnenotePagesParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookGetSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentNotebookGetSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookGetSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookGetSectionGroupsRequest {
	return ApiSitesOnenotePagesParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookGetSectionGroupsExecute(r ApiSitesOnenotePagesParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookGetSectionsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookGetSectionsRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookGetSectionsExecute(r)
}

/*
SitesOnenotePagesParentNotebookGetSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookGetSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookGetSectionsRequest {
	return ApiSitesOnenotePagesParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookGetSectionsExecute(r ApiSitesOnenotePagesParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest) Top(top int32) ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest) Search(search string) ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest) Filter(filter string) ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest) Count(count bool) ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookListSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentNotebookListSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookListSectionGroups(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest {
	return ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookListSectionGroupsExecute(r ApiSitesOnenotePagesParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentNotebookListSectionsRequest) Top(top int32) ApiSitesOnenotePagesParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentNotebookListSectionsRequest) Skip(skip int32) ApiSitesOnenotePagesParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentNotebookListSectionsRequest) Search(search string) ApiSitesOnenotePagesParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentNotebookListSectionsRequest) Filter(filter string) ApiSitesOnenotePagesParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentNotebookListSectionsRequest) Count(count bool) ApiSitesOnenotePagesParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentNotebookListSectionsRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookListSectionsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookListSectionsRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookListSectionsExecute(r)
}

/*
SitesOnenotePagesParentNotebookListSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentNotebookListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookListSections(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentNotebookListSectionsRequest {
	return ApiSitesOnenotePagesParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookListSectionsExecute(r ApiSitesOnenotePagesParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsCreateSections Create new navigation property to sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsCreateSections(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsCreateSectionsExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsDeleteSections Delete navigation property sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsDeleteSections(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsDeleteSectionsExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsGetParentNotebookExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsGetSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsGetSections(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsGetSectionsExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsListSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsListSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsListSections(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsListSectionsExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsSectionsCreatePages Create new navigation property to pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsCreatePages(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsSectionsDeletePages Delete navigation property pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsDeletePages(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebook(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsGetPagesExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsSectionsGetPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsGetPages(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsGetPagesExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebook Get parentNotebook from sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebook(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Top(top int32) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Skip(skip int32) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Search(search string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Filter(filter string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Count(count bool) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsSectionsListPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsListPages(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsSectionsUpdatePages Update the navigation property pages in sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsUpdatePages(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebook(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionGroupsUpdateSections Update the navigation property sections in sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsUpdateSections(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionGroupsUpdateSectionsExecute(r ApiSitesOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiSitesOnenotePagesParentNotebookSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenotePagesParentNotebookSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsCreatePagesExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsCreatePages Create new navigation property to pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsCreatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsCreatePages(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsCreatePagesRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsCreatePagesExecute(r ApiSitesOnenotePagesParentNotebookSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsDeletePagesExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsDeletePages Delete navigation property pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesOnenotePagesParentNotebookSectionsDeletePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsDeletePages(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiSitesOnenotePagesParentNotebookSectionsDeletePagesRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsDeletePagesExecute(r ApiSitesOnenotePagesParentNotebookSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsDeleteParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsDeleteParentNotebook(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsDeleteParentNotebookExecute(r ApiSitesOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsDeleteParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsDeleteParentSectionGroupExecute(r ApiSitesOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionsGetPagesRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionsGetPagesRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsGetPagesExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsGetPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesOnenotePagesParentNotebookSectionsGetPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsGetPages(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiSitesOnenotePagesParentNotebookSectionsGetPagesRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsGetPagesExecute(r ApiSitesOnenotePagesParentNotebookSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionsGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionsGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsGetParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsGetParentNotebook Get parentNotebook from sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsGetParentNotebook(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsGetParentNotebookRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsGetParentNotebookExecute(r ApiSitesOnenotePagesParentNotebookSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsGetParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsGetParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsGetParentSectionGroupExecute(r ApiSitesOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest) Top(top int32) ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest) Skip(skip int32) ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest) Search(search string) ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest) Filter(filter string) ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest) Count(count bool) ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsListPagesExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsListPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsListPages(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsListPagesExecute(r ApiSitesOnenotePagesParentNotebookSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroups(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSections Create new navigation property to sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebook(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroups(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSections Delete navigation property sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebook Get parentNotebook from sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebook(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroups(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Search(search string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroups(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Top(top int32) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Skip(skip int32) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Search(search string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Filter(filter string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Count(count bool) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Expand(expand []string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupListSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupListSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebook(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroups(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSections Update the navigation property sections in sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsExecute(r ApiSitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenotePagesParentNotebookSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsUpdatePagesExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsUpdatePages Update the navigation property pages in sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesOnenotePagesParentNotebookSectionsUpdatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsUpdatePages(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiSitesOnenotePagesParentNotebookSectionsUpdatePagesRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsUpdatePagesExecute(r ApiSitesOnenotePagesParentNotebookSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsUpdateParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsUpdateParentNotebook(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsUpdateParentNotebookExecute(r ApiSitesOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookSectionsUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentNotebookSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsUpdateParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookSectionsUpdateParentSectionGroupExecute(r ApiSitesOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookUpdateSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentNotebookUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookUpdateSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentNotebookUpdateSectionGroupsRequest {
	return ApiSitesOnenotePagesParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookUpdateSectionGroupsExecute(r ApiSitesOnenotePagesParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenotePagesParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenotePagesParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenotePagesParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentNotebookUpdateSectionsExecute(r)
}

/*
SitesOnenotePagesParentNotebookUpdateSections Update the navigation property sections in sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentNotebookUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookUpdateSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentNotebookUpdateSectionsRequest {
	return ApiSitesOnenotePagesParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentNotebookUpdateSectionsExecute(r ApiSitesOnenotePagesParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionCreatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiSitesOnenotePagesParentSectionCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenotePagesParentSectionCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenotePagesParentSectionCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionCreatePagesExecute(r)
}

/*
SitesOnenotePagesParentSectionCreatePages Create new navigation property to pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionCreatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionCreatePages(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionCreatePagesRequest {
	return ApiSitesOnenotePagesParentSectionCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionCreatePagesExecute(r ApiSitesOnenotePagesParentSectionCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionDeletePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenotePageId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentSectionDeletePagesRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentSectionDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentSectionDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionDeletePagesExecute(r)
}

/*
SitesOnenotePagesParentSectionDeletePages Delete navigation property pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionDeletePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionDeletePages(ctx _context.Context, siteId string, onenotePageId string, onenotePageId1 string) ApiSitesOnenotePagesParentSectionDeletePagesRequest {
	return ApiSitesOnenotePagesParentSectionDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionDeletePagesExecute(r ApiSitesOnenotePagesParentSectionDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentSectionDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentSectionDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentSectionDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionDeleteParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentSectionDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionDeleteParentNotebook(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionDeleteParentNotebookRequest {
	return ApiSitesOnenotePagesParentSectionDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionDeleteParentNotebookExecute(r ApiSitesOnenotePagesParentSectionDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentSectionDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentSectionDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentSectionDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentSectionDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionDeleteParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionDeleteParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentSectionDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionDeleteParentSectionGroupExecute(r ApiSitesOnenotePagesParentSectionDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionGetPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenotePageId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionGetPagesRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionGetPagesRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionGetPagesExecute(r)
}

/*
SitesOnenotePagesParentSectionGetPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionGetPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionGetPages(ctx _context.Context, siteId string, onenotePageId string, onenotePageId1 string) ApiSitesOnenotePagesParentSectionGetPagesRequest {
	return ApiSitesOnenotePagesParentSectionGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionGetPagesExecute(r ApiSitesOnenotePagesParentSectionGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionGetParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentSectionGetParentNotebook Get parentNotebook from sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionGetParentNotebook(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionGetParentNotebookRequest {
	return ApiSitesOnenotePagesParentSectionGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionGetParentNotebookExecute(r ApiSitesOnenotePagesParentSectionGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionGetParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentSectionGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionGetParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionGetParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentSectionGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionGetParentSectionGroupExecute(r ApiSitesOnenotePagesParentSectionGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionListPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentSectionListPagesRequest) Top(top int32) ApiSitesOnenotePagesParentSectionListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentSectionListPagesRequest) Skip(skip int32) ApiSitesOnenotePagesParentSectionListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentSectionListPagesRequest) Search(search string) ApiSitesOnenotePagesParentSectionListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentSectionListPagesRequest) Filter(filter string) ApiSitesOnenotePagesParentSectionListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentSectionListPagesRequest) Count(count bool) ApiSitesOnenotePagesParentSectionListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentSectionListPagesRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentSectionListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionListPagesRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionListPagesRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionListPagesExecute(r)
}

/*
SitesOnenotePagesParentSectionListPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionListPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionListPages(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionListPagesRequest {
	return ApiSitesOnenotePagesParentSectionListPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionListPagesExecute(r ApiSitesOnenotePagesParentSectionListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookCreateSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookCreateSectionGroups(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookCreateSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookCreateSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookCreateSections Create new navigation property to sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookCreateSections(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookCreateSectionsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookDeleteSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookDeleteSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookDeleteSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookDeleteSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookDeleteSections Delete navigation property sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookDeleteSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookDeleteSectionsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookGetSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookGetSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookGetSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookGetSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentNotebookGetSectionsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentNotebookGetSectionsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookGetSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookGetSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentSectionParentNotebookGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookGetSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentSectionParentNotebookGetSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookGetSectionsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Top(top int32) ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Search(search string) ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Filter(filter string) ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Count(count bool) ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookListSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookListSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookListSectionGroups(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookListSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest) Top(top int32) ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest) Skip(skip int32) ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest) Search(search string) ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest) Filter(filter string) ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest) Count(count bool) ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookListSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookListSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookListSections(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookListSectionsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSections Create new navigation property to sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSections(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSections Delete navigation property sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSections(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSections(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsListSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsListSections(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSections Update the navigation property sections in sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSections(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookUpdateSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookUpdateSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookUpdateSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentNotebookUpdateSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentNotebookUpdateSections Update the navigation property sections in sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookUpdateSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentNotebookUpdateSectionsExecute(r ApiSitesOnenotePagesParentSectionParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupCreateSectionGroups(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupCreateSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupCreateSections Create new navigation property to sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupCreateSections(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupCreateSectionsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupDeleteParentNotebook(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupDeleteSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupDeleteSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupDeleteSections Delete navigation property sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupDeleteSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupDeleteSectionsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupGetParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupGetParentNotebook Get parentNotebook from sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupGetParentNotebook(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupGetParentNotebookExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupGetParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupGetSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupGetSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupGetSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupGetSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupGetSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupGetSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupGetSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupGetSectionsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Search(search string) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupListSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupListSectionGroups(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Top(top int32) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Skip(skip int32) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Search(search string) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Filter(filter string) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Count(count bool) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupListSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupListSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupListSections(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupListSectionsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroups(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSections Create new navigation property to sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSections(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSections Delete navigation property sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Top(top int32) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Search(search string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Filter(filter string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Count(count bool) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroups(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Top(top int32) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Skip(skip int32) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Search(search string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Filter(filter string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Count(count bool) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Orderby(orderby []string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Select_(select_ []string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Expand(expand []string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSections(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSections Update the navigation property sections in sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupUpdateParentNotebook(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupUpdateSectionGroups(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionParentSectionGroupUpdateSectionsExecute(r)
}

/*
SitesOnenotePagesParentSectionParentSectionGroupUpdateSections Update the navigation property sections in sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupUpdateSections(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest {
	return ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionParentSectionGroupUpdateSectionsExecute(r ApiSitesOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenotePageId1 string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiSitesOnenotePagesParentSectionUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenotePagesParentSectionUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenotePagesParentSectionUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionUpdatePagesExecute(r)
}

/*
SitesOnenotePagesParentSectionUpdatePages Update the navigation property pages in sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionUpdatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionUpdatePages(ctx _context.Context, siteId string, onenotePageId string, onenotePageId1 string) ApiSitesOnenotePagesParentSectionUpdatePagesRequest {
	return ApiSitesOnenotePagesParentSectionUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionUpdatePagesExecute(r ApiSitesOnenotePagesParentSectionUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenotePagesParentSectionUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenotePagesParentSectionUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenotePagesParentSectionUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionUpdateParentNotebookExecute(r)
}

/*
SitesOnenotePagesParentSectionUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionUpdateParentNotebook(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionUpdateParentNotebookRequest {
	return ApiSitesOnenotePagesParentSectionUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionUpdateParentNotebookExecute(r ApiSitesOnenotePagesParentSectionUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesParentSectionUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenotePagesParentSectionUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenotePagesParentSectionUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenotePagesParentSectionUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesParentSectionUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenotePagesParentSectionUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesParentSectionUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionUpdateParentSectionGroup(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesParentSectionUpdateParentSectionGroupRequest {
	return ApiSitesOnenotePagesParentSectionUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesParentSectionUpdateParentSectionGroupExecute(r ApiSitesOnenotePagesParentSectionUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesParentSectionUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenotePagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenotePagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenotePagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesUpdateParentNotebookExecute(r)
}

/*
SitesOnenotePagesUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesUpdateParentNotebook(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesUpdateParentNotebookRequest {
	return ApiSitesOnenotePagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesUpdateParentNotebookExecute(r ApiSitesOnenotePagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenotePagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenotePagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenotePagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenotePagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenotePagesUpdateParentSectionExecute(r)
}

/*
SitesOnenotePagesUpdateParentSection Update the navigation property parentSection in sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenotePagesUpdateParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenotePagesUpdateParentSection(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenotePagesUpdateParentSectionRequest {
	return ApiSitesOnenotePagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenotePagesUpdateParentSectionExecute(r ApiSitesOnenotePagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenotePagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
}


func (r ApiSitesOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentExecute(r)
}

/*
SitesOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContent Get media content for the navigation property pages from sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContent(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiSitesOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest {
	return ApiSitesOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SitesOnenoteApiService) SitesOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentExecute(r ApiSitesOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	body **os.File
}

// New media content.
func (r ApiSitesOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest) Body(body *os.File) ApiSitesOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiSitesOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentExecute(r)
}

/*
SitesOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContent Update media content for the navigation property pages in sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContent(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiSitesOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest {
	return ApiSitesOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentExecute(r ApiSitesOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteParentNotebookSectionsPagesGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
}


func (r ApiSitesOnenoteParentNotebookSectionsPagesGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteParentNotebookSectionsPagesGetPagesContentExecute(r)
}

/*
SitesOnenoteParentNotebookSectionsPagesGetPagesContent Get media content for the navigation property pages from sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesOnenoteParentNotebookSectionsPagesGetPagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteParentNotebookSectionsPagesGetPagesContent(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiSitesOnenoteParentNotebookSectionsPagesGetPagesContentRequest {
	return ApiSitesOnenoteParentNotebookSectionsPagesGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SitesOnenoteApiService) SitesOnenoteParentNotebookSectionsPagesGetPagesContentExecute(r ApiSitesOnenoteParentNotebookSectionsPagesGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteParentNotebookSectionsPagesGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	body **os.File
}

// New media content.
func (r ApiSitesOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest) Body(body *os.File) ApiSitesOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiSitesOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteParentNotebookSectionsPagesUpdatePagesContentExecute(r)
}

/*
SitesOnenoteParentNotebookSectionsPagesUpdatePagesContent Update media content for the navigation property pages in sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteParentNotebookSectionsPagesUpdatePagesContent(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiSitesOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest {
	return ApiSitesOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteParentNotebookSectionsPagesUpdatePagesContentExecute(r ApiSitesOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteParentNotebookSectionsPagesUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteParentSectionPagesGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenotePageId1 string
}


func (r ApiSitesOnenoteParentSectionPagesGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteParentSectionPagesGetPagesContentExecute(r)
}

/*
SitesOnenoteParentSectionPagesGetPagesContent Get media content for the navigation property pages from sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesOnenoteParentSectionPagesGetPagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteParentSectionPagesGetPagesContent(ctx _context.Context, siteId string, onenotePageId string, onenotePageId1 string) ApiSitesOnenoteParentSectionPagesGetPagesContentRequest {
	return ApiSitesOnenoteParentSectionPagesGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SitesOnenoteApiService) SitesOnenoteParentSectionPagesGetPagesContentExecute(r ApiSitesOnenoteParentSectionPagesGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteParentSectionPagesGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteParentSectionPagesUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	onenotePageId1 string
	body **os.File
}

// New media content.
func (r ApiSitesOnenoteParentSectionPagesUpdatePagesContentRequest) Body(body *os.File) ApiSitesOnenoteParentSectionPagesUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiSitesOnenoteParentSectionPagesUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteParentSectionPagesUpdatePagesContentExecute(r)
}

/*
SitesOnenoteParentSectionPagesUpdatePagesContent Update media content for the navigation property pages in sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesOnenoteParentSectionPagesUpdatePagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteParentSectionPagesUpdatePagesContent(ctx _context.Context, siteId string, onenotePageId string, onenotePageId1 string) ApiSitesOnenoteParentSectionPagesUpdatePagesContentRequest {
	return ApiSitesOnenoteParentSectionPagesUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteParentSectionPagesUpdatePagesContentExecute(r ApiSitesOnenoteParentSectionPagesUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteParentSectionPagesUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenoteSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsCreateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsCreateSectionGroups(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteSectionGroupsCreateSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsCreateSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenoteSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsCreateSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsCreateSections Create new navigation property to sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsCreateSections(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteSectionGroupsCreateSectionsRequest {
	return ApiSitesOnenoteSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsCreateSectionsExecute(r ApiSitesOnenoteSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsDeleteParentNotebook(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteSectionGroupsDeleteParentNotebookRequest {
	return ApiSitesOnenoteSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsDeleteParentNotebookExecute(r ApiSitesOnenoteSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsDeleteParentSectionGroup(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteSectionGroupsDeleteParentSectionGroupRequest {
	return ApiSitesOnenoteSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsDeleteParentSectionGroupExecute(r ApiSitesOnenoteSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsDeleteSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenoteSectionGroupsDeleteSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsDeleteSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsDeleteSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsDeleteSections Delete navigation property sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsDeleteSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsDeleteSectionsRequest {
	return ApiSitesOnenoteSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsDeleteSectionsExecute(r ApiSitesOnenoteSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsGetParentNotebookExecute(r)
}

/*
SitesOnenoteSectionGroupsGetParentNotebook Get parentNotebook from sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsGetParentNotebook(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteSectionGroupsGetParentNotebookRequest {
	return ApiSitesOnenoteSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsGetParentNotebookExecute(r ApiSitesOnenoteSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsGetParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionGroupsGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsGetParentSectionGroup(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteSectionGroupsGetParentSectionGroupRequest {
	return ApiSitesOnenoteSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsGetParentSectionGroupExecute(r ApiSitesOnenoteSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsGetSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsGetSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsGetSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenoteSectionGroupsGetSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsGetSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsGetSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsGetSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsGetSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsGetSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsGetSectionsRequest {
	return ApiSitesOnenoteSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsGetSectionsExecute(r ApiSitesOnenoteSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionGroupsListSectionGroupsRequest) Top(top int32) ApiSitesOnenoteSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenoteSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionGroupsListSectionGroupsRequest) Search(search string) ApiSitesOnenoteSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiSitesOnenoteSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionGroupsListSectionGroupsRequest) Count(count bool) ApiSitesOnenoteSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsListSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsListSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsListSectionGroups(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteSectionGroupsListSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsListSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionGroupsListSectionsRequest) Top(top int32) ApiSitesOnenoteSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionGroupsListSectionsRequest) Skip(skip int32) ApiSitesOnenoteSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionGroupsListSectionsRequest) Search(search string) ApiSitesOnenoteSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionGroupsListSectionsRequest) Filter(filter string) ApiSitesOnenoteSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionGroupsListSectionsRequest) Count(count bool) ApiSitesOnenoteSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsListSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsListSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsListSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsListSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsListSections(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteSectionGroupsListSectionsRequest {
	return ApiSitesOnenoteSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsListSectionsExecute(r ApiSitesOnenoteSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookCreateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookCreateSectionGroups(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookCreateSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookCreateSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookCreateSections Create new navigation property to sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookCreateSections(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionsRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookCreateSectionsExecute(r ApiSitesOnenoteSectionGroupsParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookDeleteSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookDeleteSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookDeleteSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookDeleteSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookDeleteSections Delete navigation property sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookDeleteSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionsRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookDeleteSectionsExecute(r ApiSitesOnenoteSectionGroupsParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookGetSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookGetSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookGetSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookGetSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsParentNotebookGetSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsParentNotebookGetSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookGetSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookGetSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsParentNotebookGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookGetSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsParentNotebookGetSectionsRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookGetSectionsExecute(r ApiSitesOnenoteSectionGroupsParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Top(top int32) ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Search(search string) ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Filter(filter string) ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Count(count bool) ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookListSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookListSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookListSectionGroups(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookListSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest) Top(top int32) ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest) Skip(skip int32) ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest) Search(search string) ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest) Filter(filter string) ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest) Count(count bool) ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookListSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookListSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookListSections(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookListSectionsExecute(r ApiSitesOnenoteSectionGroupsParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsCreatePagesExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsCreatePages Create new navigation property to pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsCreatePages(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsCreatePagesExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsDeletePagesExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsDeletePages Delete navigation property pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsDeletePages(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsDeletePagesExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroup(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsGetPagesExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsGetPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsGetPages(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsGetPagesExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsGetPagesContentExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsGetPagesContent Get media content for the navigation property pages from sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsGetPagesContent(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsGetPagesContentExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsGetParentNotebook Get parentNotebook from sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsGetParentNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroup(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Top(top int32) ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Skip(skip int32) ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Search(search string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Filter(filter string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Count(count bool) ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Orderby(orderby []string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsListPagesExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsListPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsListPages(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsListPagesExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSection Delete navigation property parentSection for sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSection(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebook Get parentNotebook from sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSection Get parentSection from sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSection(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSection Update the navigation property parentSection in sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSection(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsUpdatePages Update the navigation property pages in sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsUpdatePages(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest) Body(body *os.File) ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContent Update media content for the navigation property pages in sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContent(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroup(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupExecute(r ApiSitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookUpdateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookUpdateSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookUpdateSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsParentNotebookUpdateSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsParentNotebookUpdateSections Update the navigation property sections in sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookUpdateSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionsRequest {
	return ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsParentNotebookUpdateSectionsExecute(r ApiSitesOnenoteSectionGroupsParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiSitesOnenoteSectionGroupsSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenoteSectionGroupsSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsCreatePagesExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsCreatePages Create new navigation property to pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsCreatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsCreatePages(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsSectionsCreatePagesRequest {
	return ApiSitesOnenoteSectionGroupsSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsCreatePagesExecute(r ApiSitesOnenoteSectionGroupsSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsDeletePagesExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsDeletePages Delete navigation property pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsSectionsDeletePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsDeletePages(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsSectionsDeletePagesRequest {
	return ApiSitesOnenoteSectionGroupsSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsDeletePagesExecute(r ApiSitesOnenoteSectionGroupsSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsDeleteParentNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsSectionsDeleteParentNotebookRequest {
	return ApiSitesOnenoteSectionGroupsSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsDeleteParentNotebookExecute(r ApiSitesOnenoteSectionGroupsSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsDeleteParentSectionGroup(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest {
	return ApiSitesOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsDeleteParentSectionGroupExecute(r ApiSitesOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsSectionsGetPagesRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsSectionsGetPagesRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsGetPagesExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsGetPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsSectionsGetPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsGetPages(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsSectionsGetPagesRequest {
	return ApiSitesOnenoteSectionGroupsSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsGetPagesExecute(r ApiSitesOnenoteSectionGroupsSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiSitesOnenoteSectionGroupsSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsGetPagesContentExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsGetPagesContent Get media content for the navigation property pages from sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsSectionsGetPagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsGetPagesContent(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsSectionsGetPagesContentRequest {
	return ApiSitesOnenoteSectionGroupsSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsGetPagesContentExecute(r ApiSitesOnenoteSectionGroupsSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsSectionsGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsSectionsGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsGetParentNotebookExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsGetParentNotebook Get parentNotebook from sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsGetParentNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsSectionsGetParentNotebookRequest {
	return ApiSitesOnenoteSectionGroupsSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsGetParentNotebookExecute(r ApiSitesOnenoteSectionGroupsSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsGetParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsGetParentSectionGroup(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsSectionsGetParentSectionGroupRequest {
	return ApiSitesOnenoteSectionGroupsSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsGetParentSectionGroupExecute(r ApiSitesOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionGroupsSectionsListPagesRequest) Top(top int32) ApiSitesOnenoteSectionGroupsSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionGroupsSectionsListPagesRequest) Skip(skip int32) ApiSitesOnenoteSectionGroupsSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionGroupsSectionsListPagesRequest) Search(search string) ApiSitesOnenoteSectionGroupsSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionGroupsSectionsListPagesRequest) Filter(filter string) ApiSitesOnenoteSectionGroupsSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionGroupsSectionsListPagesRequest) Count(count bool) ApiSitesOnenoteSectionGroupsSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionGroupsSectionsListPagesRequest) Orderby(orderby []string) ApiSitesOnenoteSectionGroupsSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsSectionsListPagesRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsSectionsListPagesRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsListPagesExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsListPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsListPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsListPages(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsSectionsListPagesRequest {
	return ApiSitesOnenoteSectionGroupsSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsListPagesExecute(r ApiSitesOnenoteSectionGroupsSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesDeleteParentNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesDeleteParentNotebookExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesDeleteParentSectionExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesDeleteParentSection Delete navigation property parentSection for sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesDeleteParentSection(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesDeleteParentSectionExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesGetParentNotebookExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesGetParentNotebook Get parentNotebook from sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesGetParentNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesGetParentNotebookExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesGetParentSectionExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesGetParentSection Get parentSection from sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsSectionsPagesGetParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesGetParentSection(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsSectionsPagesGetParentSectionRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesGetParentSectionExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSections Create new navigation property to sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, sectionGroupId1 string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSections Delete navigation property sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, sectionGroupId1 string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Top(top int32) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Search(search string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Filter(filter string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Count(count bool) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Top(top int32) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Skip(skip int32) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Search(search string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Filter(filter string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Count(count bool) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesParentNotebookListSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookListSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, sectionGroupId1 string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSections Update the navigation property sections in sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesUpdateParentNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesUpdateParentNotebookExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsPagesUpdateParentSectionExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsPagesUpdateParentSection Update the navigation property parentSection in sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesUpdateParentSection(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest {
	return ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsPagesUpdateParentSectionExecute(r ApiSitesOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsParentNotebookCreateSections Create new navigation property to sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookCreateSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionsExecute(r ApiSitesOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, sectionGroupId1 string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsParentNotebookDeleteSections Delete navigation property sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookDeleteSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsExecute(r ApiSitesOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsParentNotebookGetSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookGetSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, sectionGroupId1 string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsParentNotebookGetSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsParentNotebookGetSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookGetSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookGetSectionsExecute(r ApiSitesOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Top(top int32) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Search(search string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Filter(filter string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Count(count bool) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Top(top int32) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Skip(skip int32) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Search(search string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Filter(filter string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Count(count bool) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsParentNotebookListSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsParentNotebookListSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookListSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookListSectionsExecute(r ApiSitesOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, sectionGroupId1 string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsParentNotebookUpdateSections Update the navigation property sections in sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookUpdateSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest {
	return ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsExecute(r ApiSitesOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenoteSectionGroupsSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsUpdatePagesExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsUpdatePages Update the navigation property pages in sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsSectionsUpdatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsUpdatePages(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsSectionsUpdatePagesRequest {
	return ApiSitesOnenoteSectionGroupsSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsUpdatePagesExecute(r ApiSitesOnenoteSectionGroupsSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiSitesOnenoteSectionGroupsSectionsUpdatePagesContentRequest) Body(body *os.File) ApiSitesOnenoteSectionGroupsSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsUpdatePagesContentExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsUpdatePagesContent Update media content for the navigation property pages in sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionGroupsSectionsUpdatePagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsUpdatePagesContent(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionGroupsSectionsUpdatePagesContentRequest {
	return ApiSitesOnenoteSectionGroupsSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsUpdatePagesContentExecute(r ApiSitesOnenoteSectionGroupsSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteSectionGroupsSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsUpdateParentNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsSectionsUpdateParentNotebookRequest {
	return ApiSitesOnenoteSectionGroupsSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsUpdateParentNotebookExecute(r ApiSitesOnenoteSectionGroupsSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsSectionsUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionGroupsSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsUpdateParentSectionGroup(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest {
	return ApiSitesOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsSectionsUpdateParentSectionGroupExecute(r ApiSitesOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsUpdateParentNotebook(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteSectionGroupsUpdateParentNotebookRequest {
	return ApiSitesOnenoteSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsUpdateParentNotebookExecute(r ApiSitesOnenoteSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsUpdateParentSectionGroup(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteSectionGroupsUpdateParentSectionGroupRequest {
	return ApiSitesOnenoteSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsUpdateParentSectionGroupExecute(r ApiSitesOnenoteSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionGroupsUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsUpdateSectionGroups(ctx _context.Context, siteId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenoteSectionGroupsUpdateSectionGroupsRequest {
	return ApiSitesOnenoteSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsUpdateSectionGroupsExecute(r ApiSitesOnenoteSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionGroupsUpdateSectionsExecute(r)
}

/*
SitesOnenoteSectionGroupsUpdateSections Update the navigation property sections in sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionGroupsUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsUpdateSections(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesOnenoteSectionGroupsUpdateSectionsRequest {
	return ApiSitesOnenoteSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionGroupsUpdateSectionsExecute(r ApiSitesOnenoteSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiSitesOnenoteSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenoteSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenoteSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsCreatePagesExecute(r)
}

/*
SitesOnenoteSectionsCreatePages Create new navigation property to pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsCreatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsCreatePages(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsCreatePagesRequest {
	return ApiSitesOnenoteSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteSectionsCreatePagesExecute(r ApiSitesOnenoteSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsDeletePagesExecute(r)
}

/*
SitesOnenoteSectionsDeletePages Delete navigation property pages for sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionsDeletePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsDeletePages(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionsDeletePagesRequest {
	return ApiSitesOnenoteSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsDeletePagesExecute(r ApiSitesOnenoteSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteSectionsDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsDeleteParentNotebook(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsDeleteParentNotebookRequest {
	return ApiSitesOnenoteSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsDeleteParentNotebookExecute(r ApiSitesOnenoteSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsDeleteParentSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsDeleteParentSectionGroupRequest {
	return ApiSitesOnenoteSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsDeleteParentSectionGroupExecute(r ApiSitesOnenoteSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsGetPagesRequest) Select_(select_ []string) ApiSitesOnenoteSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsGetPagesRequest) Expand(expand []string) ApiSitesOnenoteSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsGetPagesExecute(r)
}

/*
SitesOnenoteSectionsGetPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionsGetPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsGetPages(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionsGetPagesRequest {
	return ApiSitesOnenoteSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteSectionsGetPagesExecute(r ApiSitesOnenoteSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiSitesOnenoteSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsGetPagesContentExecute(r)
}

/*
SitesOnenoteSectionsGetPagesContent Get media content for the navigation property pages from sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionsGetPagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsGetPagesContent(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionsGetPagesContentRequest {
	return ApiSitesOnenoteSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SitesOnenoteApiService) SitesOnenoteSectionsGetPagesContentExecute(r ApiSitesOnenoteSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsGetParentNotebookExecute(r)
}

/*
SitesOnenoteSectionsGetParentNotebook Get parentNotebook from sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsGetParentNotebook(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsGetParentNotebookRequest {
	return ApiSitesOnenoteSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteSectionsGetParentNotebookExecute(r ApiSitesOnenoteSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenoteSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenoteSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsGetParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionsGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsGetParentSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsGetParentSectionGroupRequest {
	return ApiSitesOnenoteSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsGetParentSectionGroupExecute(r ApiSitesOnenoteSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionsListPagesRequest) Top(top int32) ApiSitesOnenoteSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionsListPagesRequest) Skip(skip int32) ApiSitesOnenoteSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionsListPagesRequest) Search(search string) ApiSitesOnenoteSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionsListPagesRequest) Filter(filter string) ApiSitesOnenoteSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionsListPagesRequest) Count(count bool) ApiSitesOnenoteSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionsListPagesRequest) Orderby(orderby []string) ApiSitesOnenoteSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionsListPagesRequest) Select_(select_ []string) ApiSitesOnenoteSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsListPagesRequest) Expand(expand []string) ApiSitesOnenoteSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsListPagesExecute(r)
}

/*
SitesOnenoteSectionsListPages Get pages from sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsListPagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsListPages(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsListPagesRequest {
	return ApiSitesOnenoteSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *SitesOnenoteApiService) SitesOnenoteSectionsListPagesExecute(r ApiSitesOnenoteSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionsPagesDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesDeleteParentNotebook(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionsPagesDeleteParentNotebookRequest {
	return ApiSitesOnenoteSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesDeleteParentNotebookExecute(r ApiSitesOnenoteSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesDeleteParentSectionExecute(r)
}

/*
SitesOnenoteSectionsPagesDeleteParentSection Delete navigation property parentSection for sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionsPagesDeleteParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesDeleteParentSection(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionsPagesDeleteParentSectionRequest {
	return ApiSitesOnenoteSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesDeleteParentSectionExecute(r ApiSitesOnenoteSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesGetParentNotebookExecute(r)
}

/*
SitesOnenoteSectionsPagesGetParentNotebook Get parentNotebook from sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionsPagesGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesGetParentNotebook(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionsPagesGetParentNotebookRequest {
	return ApiSitesOnenoteSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesGetParentNotebookExecute(r ApiSitesOnenoteSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiSitesOnenoteSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiSitesOnenoteSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesGetParentSectionExecute(r)
}

/*
SitesOnenoteSectionsPagesGetParentSection Get parentSection from sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionsPagesGetParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesGetParentSection(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionsPagesGetParentSectionRequest {
	return ApiSitesOnenoteSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesGetParentSectionExecute(r ApiSitesOnenoteSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookCreateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookCreateSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookCreateSectionGroupsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookCreateSectionsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookCreateSections Create new navigation property to sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookCreateSections(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookCreateSectionsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookDeleteSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookDeleteSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookDeleteSectionGroupsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookDeleteSectionsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookDeleteSections Delete navigation property sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookDeleteSections(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookDeleteSectionsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookGetSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookGetSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookGetSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiSitesOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookGetSectionGroupsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsPagesParentNotebookGetSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsPagesParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsPagesParentNotebookGetSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionsPagesParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookGetSectionsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookGetSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsPagesParentNotebookGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookGetSections(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsPagesParentNotebookGetSectionsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookGetSectionsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Top(top int32) ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Search(search string) ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Filter(filter string) ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Count(count bool) ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookListSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookListSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookListSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookListSectionGroupsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest) Top(top int32) ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest) Skip(skip int32) ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest) Search(search string) ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest) Filter(filter string) ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest) Count(count bool) ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookListSectionsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookListSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookListSections(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookListSectionsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSections Create new navigation property to sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSections(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSections Delete navigation property sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSections(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSections(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsListSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsListSections(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSections Update the navigation property sections in sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSections(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookUpdateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookUpdateSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookUpdateSectionGroupsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesParentNotebookUpdateSectionsExecute(r)
}

/*
SitesOnenoteSectionsPagesParentNotebookUpdateSections Update the navigation property sections in sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookUpdateSections(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionsRequest {
	return ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesParentNotebookUpdateSectionsExecute(r ApiSitesOnenoteSectionsPagesParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionsPagesUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesUpdateParentNotebook(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionsPagesUpdateParentNotebookRequest {
	return ApiSitesOnenoteSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesUpdateParentNotebookExecute(r ApiSitesOnenoteSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsPagesUpdateParentSectionExecute(r)
}

/*
SitesOnenoteSectionsPagesUpdateParentSection Update the navigation property parentSection in sites

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionsPagesUpdateParentSectionRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesUpdateParentSection(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionsPagesUpdateParentSectionRequest {
	return ApiSitesOnenoteSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsPagesUpdateParentSectionExecute(r ApiSitesOnenoteSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenoteSectionsParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookCreateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentNotebookCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookCreateSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentNotebookCreateSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookCreateSectionGroupsExecute(r ApiSitesOnenoteSectionsParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenoteSectionsParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionsParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookCreateSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookCreateSections Create new navigation property to sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentNotebookCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookCreateSections(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentNotebookCreateSectionsRequest {
	return ApiSitesOnenoteSectionsParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookCreateSectionsExecute(r ApiSitesOnenoteSectionsParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookDeleteSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookDeleteSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentNotebookDeleteSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookDeleteSectionGroupsExecute(r ApiSitesOnenoteSectionsParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookDeleteSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookDeleteSections Delete navigation property sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentNotebookDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookDeleteSections(ctx _context.Context, siteId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsParentNotebookDeleteSectionsRequest {
	return ApiSitesOnenoteSectionsParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookDeleteSectionsExecute(r ApiSitesOnenoteSectionsParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookGetSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookGetSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookGetSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentNotebookGetSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookGetSectionGroupsExecute(r ApiSitesOnenoteSectionsParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentNotebookGetSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentNotebookGetSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookGetSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookGetSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentNotebookGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookGetSections(ctx _context.Context, siteId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsParentNotebookGetSectionsRequest {
	return ApiSitesOnenoteSectionsParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookGetSectionsExecute(r ApiSitesOnenoteSectionsParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest) Top(top int32) ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest) Search(search string) ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest) Filter(filter string) ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest) Count(count bool) ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookListSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookListSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookListSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookListSectionGroupsExecute(r ApiSitesOnenoteSectionsParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionsParentNotebookListSectionsRequest) Top(top int32) ApiSitesOnenoteSectionsParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionsParentNotebookListSectionsRequest) Skip(skip int32) ApiSitesOnenoteSectionsParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionsParentNotebookListSectionsRequest) Search(search string) ApiSitesOnenoteSectionsParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionsParentNotebookListSectionsRequest) Filter(filter string) ApiSitesOnenoteSectionsParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionsParentNotebookListSectionsRequest) Count(count bool) ApiSitesOnenoteSectionsParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionsParentNotebookListSectionsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionsParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentNotebookListSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentNotebookListSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookListSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookListSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentNotebookListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookListSections(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentNotebookListSectionsRequest {
	return ApiSitesOnenoteSectionsParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookListSectionsExecute(r ApiSitesOnenoteSectionsParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsCreateSections Create new navigation property to sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsCreateSections(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionsExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsDeleteSections Delete navigation property sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsDeleteSections(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsGetSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsGetSections(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsGetSectionsExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsListSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsListSections(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsListSectionsExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string, sectionGroupId1 string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookSectionGroupsUpdateSections Update the navigation property sections in sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsUpdateSections(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsExecute(r ApiSitesOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionsParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookUpdateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentNotebookUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookUpdateSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentNotebookUpdateSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookUpdateSectionGroupsExecute(r ApiSitesOnenoteSectionsParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteSectionsParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionsParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionsParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentNotebookUpdateSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentNotebookUpdateSections Update the navigation property sections in sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentNotebookUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookUpdateSections(ctx _context.Context, siteId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsParentNotebookUpdateSectionsRequest {
	return ApiSitesOnenoteSectionsParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentNotebookUpdateSectionsExecute(r ApiSitesOnenoteSectionsParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupCreateSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupCreateSectionGroupsExecute(r ApiSitesOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenoteSectionsParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionsParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupCreateSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupCreateSections Create new navigation property to sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupCreateSections(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentSectionGroupCreateSectionsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupCreateSectionsExecute(r ApiSitesOnenoteSectionsParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupDeleteParentNotebook(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupDeleteParentNotebookExecute(r ApiSitesOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupDeleteParentSectionGroupExecute(r ApiSitesOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupDeleteSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupDeleteSectionGroupsExecute(r ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupDeleteSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupDeleteSections Delete navigation property sections for sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupDeleteSections(ctx _context.Context, siteId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupDeleteSectionsExecute(r ApiSitesOnenoteSectionsParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupGetParentNotebookExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupGetParentNotebook Get parentNotebook from sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupGetParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupGetParentNotebook(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentSectionGroupGetParentNotebookRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupGetParentNotebookExecute(r ApiSitesOnenoteSectionsParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupGetParentSectionGroup Get parentSectionGroup from sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupGetParentSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupGetParentSectionGroupExecute(r ApiSitesOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupGetSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupGetSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentSectionGroupGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupGetSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentSectionGroupGetSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupGetSectionGroupsExecute(r ApiSitesOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupGetSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupGetSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupGetSections(ctx _context.Context, siteId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsParentSectionGroupGetSectionsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupGetSectionsExecute(r ApiSitesOnenoteSectionsParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Search(search string) ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupListSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupListSectionGroups Get sectionGroups from sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupListSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupListSectionGroupsExecute(r ApiSitesOnenoteSectionsParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest) Top(top int32) ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest) Skip(skip int32) ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest) Search(search string) ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest) Filter(filter string) ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest) Count(count bool) ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupListSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupListSections Get sections from sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupListSections(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupListSectionsExecute(r ApiSitesOnenoteSectionsParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsExecute(r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupParentNotebookCreateSections Create new navigation property to sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookCreateSections(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsExecute(r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSections Delete navigation property sections for sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSections(ctx _context.Context, siteId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsExecute(r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsExecute(r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupParentNotebookGetSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookGetSections(ctx _context.Context, siteId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionsExecute(r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Top(top int32) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Search(search string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Filter(filter string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Count(count bool) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroups Get sectionGroups from sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsExecute(r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Top(top int32) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Skip(skip int32) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Search(search string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Filter(filter string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Count(count bool) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Orderby(orderby []string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Select_(select_ []string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Expand(expand []string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupParentNotebookListSections Get sections from sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookListSections(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsExecute(r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSections Update the navigation property sections in sites

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSections(ctx _context.Context, siteId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsExecute(r ApiSitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupUpdateParentNotebook(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupUpdateParentNotebookExecute(r ApiSitesOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupUpdateParentSectionGroupExecute(r ApiSitesOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupUpdateSectionGroups(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupUpdateSectionGroupsExecute(r ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsParentSectionGroupUpdateSectionsExecute(r)
}

/*
SitesOnenoteSectionsParentSectionGroupUpdateSections Update the navigation property sections in sites

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupUpdateSections(ctx _context.Context, siteId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionsRequest {
	return ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsParentSectionGroupUpdateSectionsExecute(r ApiSitesOnenoteSectionsParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiSitesOnenoteSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenoteSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenoteSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsUpdatePagesExecute(r)
}

/*
SitesOnenoteSectionsUpdatePages Update the navigation property pages in sites

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionsUpdatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsUpdatePages(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionsUpdatePagesRequest {
	return ApiSitesOnenoteSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsUpdatePagesExecute(r ApiSitesOnenoteSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiSitesOnenoteSectionsUpdatePagesContentRequest) Body(body *os.File) ApiSitesOnenoteSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiSitesOnenoteSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsUpdatePagesContentExecute(r)
}

/*
SitesOnenoteSectionsUpdatePagesContent Update media content for the navigation property pages in sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteSectionsUpdatePagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsUpdatePagesContent(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesOnenoteSectionsUpdatePagesContentRequest {
	return ApiSitesOnenoteSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsUpdatePagesContentExecute(r ApiSitesOnenoteSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsUpdateParentNotebookExecute(r)
}

/*
SitesOnenoteSectionsUpdateParentNotebook Update the navigation property parentNotebook in sites

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsUpdateParentNotebookRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsUpdateParentNotebook(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsUpdateParentNotebookRequest {
	return ApiSitesOnenoteSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsUpdateParentNotebookExecute(r ApiSitesOnenoteSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteSectionsUpdateParentSectionGroupExecute(r)
}

/*
SitesOnenoteSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in sites

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteSectionsUpdateParentSectionGroupRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteSectionsUpdateParentSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteSectionsUpdateParentSectionGroupRequest {
	return ApiSitesOnenoteSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteSectionsUpdateParentSectionGroupExecute(r ApiSitesOnenoteSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteUpdateNotebooksRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	notebookId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiSitesOnenoteUpdateNotebooksRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiSitesOnenoteUpdateNotebooksRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiSitesOnenoteUpdateNotebooksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteUpdateNotebooksExecute(r)
}

/*
SitesOnenoteUpdateNotebooks Update the navigation property notebooks in sites

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @return ApiSitesOnenoteUpdateNotebooksRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteUpdateNotebooks(ctx _context.Context, siteId string, notebookId string) ApiSitesOnenoteUpdateNotebooksRequest {
	return ApiSitesOnenoteUpdateNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteUpdateNotebooksExecute(r ApiSitesOnenoteUpdateNotebooksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteUpdateNotebooks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteUpdateOperationsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteOperationId string
	microsoftGraphOnenoteOperation *MicrosoftGraphOnenoteOperation
}

// New navigation property values
func (r ApiSitesOnenoteUpdateOperationsRequest) MicrosoftGraphOnenoteOperation(microsoftGraphOnenoteOperation MicrosoftGraphOnenoteOperation) ApiSitesOnenoteUpdateOperationsRequest {
	r.microsoftGraphOnenoteOperation = &microsoftGraphOnenoteOperation
	return r
}

func (r ApiSitesOnenoteUpdateOperationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteUpdateOperationsExecute(r)
}

/*
SitesOnenoteUpdateOperations Update the navigation property operations in sites

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteOperationId key: id of onenoteOperation
 @return ApiSitesOnenoteUpdateOperationsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteUpdateOperations(ctx _context.Context, siteId string, onenoteOperationId string) ApiSitesOnenoteUpdateOperationsRequest {
	return ApiSitesOnenoteUpdateOperationsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteOperationId: onenoteOperationId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteUpdateOperationsExecute(r ApiSitesOnenoteUpdateOperationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteUpdateOperations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/operations/{onenoteOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteOperation-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteOperation == nil {
		return nil, reportError("microsoftGraphOnenoteOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiSitesOnenoteUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiSitesOnenoteUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiSitesOnenoteUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteUpdatePagesExecute(r)
}

/*
SitesOnenoteUpdatePages Update the navigation property pages in sites

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteUpdatePagesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteUpdatePages(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenoteUpdatePagesRequest {
	return ApiSitesOnenoteUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteUpdatePagesExecute(r ApiSitesOnenoteUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiSitesOnenoteUpdatePagesContentRequest) Body(body *os.File) ApiSitesOnenoteUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiSitesOnenoteUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteUpdatePagesContentExecute(r)
}

/*
SitesOnenoteUpdatePagesContent Update media content for the navigation property pages in sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesOnenoteUpdatePagesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteUpdatePagesContent(ctx _context.Context, siteId string, onenotePageId string) ApiSitesOnenoteUpdatePagesContentRequest {
	return ApiSitesOnenoteUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteUpdatePagesContentExecute(r ApiSitesOnenoteUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteUpdateResourcesRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteResourceId string
	microsoftGraphOnenoteResource *MicrosoftGraphOnenoteResource
}

// New navigation property values
func (r ApiSitesOnenoteUpdateResourcesRequest) MicrosoftGraphOnenoteResource(microsoftGraphOnenoteResource MicrosoftGraphOnenoteResource) ApiSitesOnenoteUpdateResourcesRequest {
	r.microsoftGraphOnenoteResource = &microsoftGraphOnenoteResource
	return r
}

func (r ApiSitesOnenoteUpdateResourcesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteUpdateResourcesExecute(r)
}

/*
SitesOnenoteUpdateResources Update the navigation property resources in sites

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteResourceId key: id of onenoteResource
 @return ApiSitesOnenoteUpdateResourcesRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteUpdateResources(ctx _context.Context, siteId string, onenoteResourceId string) ApiSitesOnenoteUpdateResourcesRequest {
	return ApiSitesOnenoteUpdateResourcesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteUpdateResourcesExecute(r ApiSitesOnenoteUpdateResourcesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteUpdateResources")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/resources/{onenoteResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteResource == nil {
		return nil, reportError("microsoftGraphOnenoteResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteUpdateResourcesContentRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteResourceId string
	body **os.File
}

// New media content.
func (r ApiSitesOnenoteUpdateResourcesContentRequest) Body(body *os.File) ApiSitesOnenoteUpdateResourcesContentRequest {
	r.body = &body
	return r
}

func (r ApiSitesOnenoteUpdateResourcesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteUpdateResourcesContentExecute(r)
}

/*
SitesOnenoteUpdateResourcesContent Update media content for the navigation property resources in sites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteResourceId key: id of onenoteResource
 @return ApiSitesOnenoteUpdateResourcesContentRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteUpdateResourcesContent(ctx _context.Context, siteId string, onenoteResourceId string) ApiSitesOnenoteUpdateResourcesContentRequest {
	return ApiSitesOnenoteUpdateResourcesContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteUpdateResourcesContentExecute(r ApiSitesOnenoteUpdateResourcesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteUpdateResourcesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/resources/{onenoteResource-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiSitesOnenoteUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiSitesOnenoteUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiSitesOnenoteUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteUpdateSectionGroupsExecute(r)
}

/*
SitesOnenoteUpdateSectionGroups Update the navigation property sectionGroups in sites

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesOnenoteUpdateSectionGroupsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteUpdateSectionGroups(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesOnenoteUpdateSectionGroupsRequest {
	return ApiSitesOnenoteUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteUpdateSectionGroupsExecute(r ApiSitesOnenoteUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesOnenoteUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiSitesOnenoteUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiSitesOnenoteUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiSitesOnenoteUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesOnenoteUpdateSectionsExecute(r)
}

/*
SitesOnenoteUpdateSections Update the navigation property sections in sites

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesOnenoteUpdateSectionsRequest
*/
func (a *SitesOnenoteApiService) SitesOnenoteUpdateSections(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesOnenoteUpdateSectionsRequest {
	return ApiSitesOnenoteUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesOnenoteUpdateSectionsExecute(r ApiSitesOnenoteUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesOnenoteUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesUpdateOnenoteRequest struct {
	ctx _context.Context
	ApiService *SitesOnenoteApiService
	siteId string
	microsoftGraphOnenote *MicrosoftGraphOnenote
}

// New navigation property values
func (r ApiSitesUpdateOnenoteRequest) MicrosoftGraphOnenote(microsoftGraphOnenote MicrosoftGraphOnenote) ApiSitesUpdateOnenoteRequest {
	r.microsoftGraphOnenote = &microsoftGraphOnenote
	return r
}

func (r ApiSitesUpdateOnenoteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesUpdateOnenoteExecute(r)
}

/*
SitesUpdateOnenote Update the navigation property onenote in sites

Calls the OneNote service for notebook related operations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesUpdateOnenoteRequest
*/
func (a *SitesOnenoteApiService) SitesUpdateOnenote(ctx _context.Context, siteId string) ApiSitesUpdateOnenoteRequest {
	return ApiSitesUpdateOnenoteRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
func (a *SitesOnenoteApiService) SitesUpdateOnenoteExecute(r ApiSitesUpdateOnenoteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesOnenoteApiService.SitesUpdateOnenote")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenote == nil {
		return nil, reportError("microsoftGraphOnenote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
