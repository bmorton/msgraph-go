/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// InlineObject1208 struct for InlineObject1208
type InlineObject1208 struct {
	Issue AnyOfobject `json:"issue,omitempty"`
	Settlement AnyOfobject `json:"settlement,omitempty"`
	Rate AnyOfobject `json:"rate,omitempty"`
	Par AnyOfobject `json:"par,omitempty"`
	Basis AnyOfobject `json:"basis,omitempty"`
}

// NewInlineObject1208 instantiates a new InlineObject1208 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1208() *InlineObject1208 {
	this := InlineObject1208{}
	return &this
}

// NewInlineObject1208WithDefaults instantiates a new InlineObject1208 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1208WithDefaults() *InlineObject1208 {
	this := InlineObject1208{}
	return &this
}

// GetIssue returns the Issue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1208) GetIssue() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Issue
}

// GetIssueOk returns a tuple with the Issue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1208) GetIssueOk() (*AnyOfobject, bool) {
	if o == nil || o.Issue == nil {
		return nil, false
	}
	return &o.Issue, true
}

// HasIssue returns a boolean if a field has been set.
func (o *InlineObject1208) HasIssue() bool {
	if o != nil && o.Issue != nil {
		return true
	}

	return false
}

// SetIssue gets a reference to the given AnyOfobject and assigns it to the Issue field.
func (o *InlineObject1208) SetIssue(v AnyOfobject) {
	o.Issue = v
}

// GetSettlement returns the Settlement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1208) GetSettlement() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Settlement
}

// GetSettlementOk returns a tuple with the Settlement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1208) GetSettlementOk() (*AnyOfobject, bool) {
	if o == nil || o.Settlement == nil {
		return nil, false
	}
	return &o.Settlement, true
}

// HasSettlement returns a boolean if a field has been set.
func (o *InlineObject1208) HasSettlement() bool {
	if o != nil && o.Settlement != nil {
		return true
	}

	return false
}

// SetSettlement gets a reference to the given AnyOfobject and assigns it to the Settlement field.
func (o *InlineObject1208) SetSettlement(v AnyOfobject) {
	o.Settlement = v
}

// GetRate returns the Rate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1208) GetRate() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1208) GetRateOk() (*AnyOfobject, bool) {
	if o == nil || o.Rate == nil {
		return nil, false
	}
	return &o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *InlineObject1208) HasRate() bool {
	if o != nil && o.Rate != nil {
		return true
	}

	return false
}

// SetRate gets a reference to the given AnyOfobject and assigns it to the Rate field.
func (o *InlineObject1208) SetRate(v AnyOfobject) {
	o.Rate = v
}

// GetPar returns the Par field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1208) GetPar() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Par
}

// GetParOk returns a tuple with the Par field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1208) GetParOk() (*AnyOfobject, bool) {
	if o == nil || o.Par == nil {
		return nil, false
	}
	return &o.Par, true
}

// HasPar returns a boolean if a field has been set.
func (o *InlineObject1208) HasPar() bool {
	if o != nil && o.Par != nil {
		return true
	}

	return false
}

// SetPar gets a reference to the given AnyOfobject and assigns it to the Par field.
func (o *InlineObject1208) SetPar(v AnyOfobject) {
	o.Par = v
}

// GetBasis returns the Basis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1208) GetBasis() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Basis
}

// GetBasisOk returns a tuple with the Basis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1208) GetBasisOk() (*AnyOfobject, bool) {
	if o == nil || o.Basis == nil {
		return nil, false
	}
	return &o.Basis, true
}

// HasBasis returns a boolean if a field has been set.
func (o *InlineObject1208) HasBasis() bool {
	if o != nil && o.Basis != nil {
		return true
	}

	return false
}

// SetBasis gets a reference to the given AnyOfobject and assigns it to the Basis field.
func (o *InlineObject1208) SetBasis(v AnyOfobject) {
	o.Basis = v
}

func (o InlineObject1208) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Issue != nil {
		toSerialize["issue"] = o.Issue
	}
	if o.Settlement != nil {
		toSerialize["settlement"] = o.Settlement
	}
	if o.Rate != nil {
		toSerialize["rate"] = o.Rate
	}
	if o.Par != nil {
		toSerialize["par"] = o.Par
	}
	if o.Basis != nil {
		toSerialize["basis"] = o.Basis
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1208 struct {
	value *InlineObject1208
	isSet bool
}

func (v NullableInlineObject1208) Get() *InlineObject1208 {
	return v.value
}

func (v *NullableInlineObject1208) Set(val *InlineObject1208) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1208) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1208) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1208(val *InlineObject1208) *NullableInlineObject1208 {
	return &NullableInlineObject1208{value: val, isSet: true}
}

func (v NullableInlineObject1208) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1208) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


