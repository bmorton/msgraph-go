/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// MicrosoftGraphAccessReviewScheduleSettings struct for MicrosoftGraphAccessReviewScheduleSettings
type MicrosoftGraphAccessReviewScheduleSettings struct {
	// Optional field. Describes the  actions to take once a review is complete. There are two types that are currently supported: removeAccessApplyAction (default) and disableAndDeleteUserApplyAction. Field only needs to be specified in the case of disableAndDeleteUserApplyAction.
	ApplyActions *[]*AnyOfobject `json:"applyActions,omitempty"`
	// Indicates whether decisions are automatically applied. When set to false, an admin must apply the decisions manually once the reviewer completes the access review. When set to true, decisions are applied automatically after the access review instance duration ends, whether or not the reviewers have responded. Default value is false.
	AutoApplyDecisionsEnabled *bool `json:"autoApplyDecisionsEnabled,omitempty"`
	// Decision chosen if defaultDecisionEnabled is true. Can be one of Approve, Deny, or Recommendation.
	DefaultDecision NullableString `json:"defaultDecision,omitempty"`
	// Indicates whether the default decision is enabled or disabled when reviewers do not respond. Default value is false.
	DefaultDecisionEnabled *bool `json:"defaultDecisionEnabled,omitempty"`
	// Duration of each recurrence of review (accessReviewInstance) in number of days.
	InstanceDurationInDays *int32 `json:"instanceDurationInDays,omitempty"`
	// Indicates whether reviewers are required to provide justification with their decision. Default value is false.
	JustificationRequiredOnApproval *bool `json:"justificationRequiredOnApproval,omitempty"`
	// Indicates whether emails are enabled or disabled. Default value is false.
	MailNotificationsEnabled *bool `json:"mailNotificationsEnabled,omitempty"`
	// Indicates whether decision recommendations are enabled or disabled.
	RecommendationsEnabled *bool `json:"recommendationsEnabled,omitempty"`
	// Detailed settings for recurrence using the standard Outlook recurrence object. Only weekly and absoluteMonthly on recurrencePattern are supported. Use the property startDate on recurrenceRange to determine the day the review starts.
	Recurrence AnyOfmicrosoftGraphPatternedRecurrence `json:"recurrence,omitempty"`
	// Indicates whether reminders are enabled or disabled. Default value is false.
	ReminderNotificationsEnabled *bool `json:"reminderNotificationsEnabled,omitempty"`
}

// NewMicrosoftGraphAccessReviewScheduleSettings instantiates a new MicrosoftGraphAccessReviewScheduleSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphAccessReviewScheduleSettings() *MicrosoftGraphAccessReviewScheduleSettings {
	this := MicrosoftGraphAccessReviewScheduleSettings{}
	return &this
}

// NewMicrosoftGraphAccessReviewScheduleSettingsWithDefaults instantiates a new MicrosoftGraphAccessReviewScheduleSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphAccessReviewScheduleSettingsWithDefaults() *MicrosoftGraphAccessReviewScheduleSettings {
	this := MicrosoftGraphAccessReviewScheduleSettings{}
	return &this
}

// GetApplyActions returns the ApplyActions field value if set, zero value otherwise.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetApplyActions() []*AnyOfobject {
	if o == nil || o.ApplyActions == nil {
		var ret []*AnyOfobject
		return ret
	}
	return *o.ApplyActions
}

// GetApplyActionsOk returns a tuple with the ApplyActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetApplyActionsOk() (*[]*AnyOfobject, bool) {
	if o == nil || o.ApplyActions == nil {
		return nil, false
	}
	return o.ApplyActions, true
}

// HasApplyActions returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) HasApplyActions() bool {
	if o != nil && o.ApplyActions != nil {
		return true
	}

	return false
}

// SetApplyActions gets a reference to the given []*AnyOfobject and assigns it to the ApplyActions field.
func (o *MicrosoftGraphAccessReviewScheduleSettings) SetApplyActions(v []*AnyOfobject) {
	o.ApplyActions = &v
}

// GetAutoApplyDecisionsEnabled returns the AutoApplyDecisionsEnabled field value if set, zero value otherwise.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetAutoApplyDecisionsEnabled() bool {
	if o == nil || o.AutoApplyDecisionsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.AutoApplyDecisionsEnabled
}

// GetAutoApplyDecisionsEnabledOk returns a tuple with the AutoApplyDecisionsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetAutoApplyDecisionsEnabledOk() (*bool, bool) {
	if o == nil || o.AutoApplyDecisionsEnabled == nil {
		return nil, false
	}
	return o.AutoApplyDecisionsEnabled, true
}

// HasAutoApplyDecisionsEnabled returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) HasAutoApplyDecisionsEnabled() bool {
	if o != nil && o.AutoApplyDecisionsEnabled != nil {
		return true
	}

	return false
}

// SetAutoApplyDecisionsEnabled gets a reference to the given bool and assigns it to the AutoApplyDecisionsEnabled field.
func (o *MicrosoftGraphAccessReviewScheduleSettings) SetAutoApplyDecisionsEnabled(v bool) {
	o.AutoApplyDecisionsEnabled = &v
}

// GetDefaultDecision returns the DefaultDecision field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetDefaultDecision() string {
	if o == nil || o.DefaultDecision.Get() == nil {
		var ret string
		return ret
	}
	return *o.DefaultDecision.Get()
}

// GetDefaultDecisionOk returns a tuple with the DefaultDecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetDefaultDecisionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefaultDecision.Get(), o.DefaultDecision.IsSet()
}

// HasDefaultDecision returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) HasDefaultDecision() bool {
	if o != nil && o.DefaultDecision.IsSet() {
		return true
	}

	return false
}

// SetDefaultDecision gets a reference to the given NullableString and assigns it to the DefaultDecision field.
func (o *MicrosoftGraphAccessReviewScheduleSettings) SetDefaultDecision(v string) {
	o.DefaultDecision.Set(&v)
}
// SetDefaultDecisionNil sets the value for DefaultDecision to be an explicit nil
func (o *MicrosoftGraphAccessReviewScheduleSettings) SetDefaultDecisionNil() {
	o.DefaultDecision.Set(nil)
}

// UnsetDefaultDecision ensures that no value is present for DefaultDecision, not even an explicit nil
func (o *MicrosoftGraphAccessReviewScheduleSettings) UnsetDefaultDecision() {
	o.DefaultDecision.Unset()
}

// GetDefaultDecisionEnabled returns the DefaultDecisionEnabled field value if set, zero value otherwise.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetDefaultDecisionEnabled() bool {
	if o == nil || o.DefaultDecisionEnabled == nil {
		var ret bool
		return ret
	}
	return *o.DefaultDecisionEnabled
}

// GetDefaultDecisionEnabledOk returns a tuple with the DefaultDecisionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetDefaultDecisionEnabledOk() (*bool, bool) {
	if o == nil || o.DefaultDecisionEnabled == nil {
		return nil, false
	}
	return o.DefaultDecisionEnabled, true
}

// HasDefaultDecisionEnabled returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) HasDefaultDecisionEnabled() bool {
	if o != nil && o.DefaultDecisionEnabled != nil {
		return true
	}

	return false
}

// SetDefaultDecisionEnabled gets a reference to the given bool and assigns it to the DefaultDecisionEnabled field.
func (o *MicrosoftGraphAccessReviewScheduleSettings) SetDefaultDecisionEnabled(v bool) {
	o.DefaultDecisionEnabled = &v
}

// GetInstanceDurationInDays returns the InstanceDurationInDays field value if set, zero value otherwise.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetInstanceDurationInDays() int32 {
	if o == nil || o.InstanceDurationInDays == nil {
		var ret int32
		return ret
	}
	return *o.InstanceDurationInDays
}

// GetInstanceDurationInDaysOk returns a tuple with the InstanceDurationInDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetInstanceDurationInDaysOk() (*int32, bool) {
	if o == nil || o.InstanceDurationInDays == nil {
		return nil, false
	}
	return o.InstanceDurationInDays, true
}

// HasInstanceDurationInDays returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) HasInstanceDurationInDays() bool {
	if o != nil && o.InstanceDurationInDays != nil {
		return true
	}

	return false
}

// SetInstanceDurationInDays gets a reference to the given int32 and assigns it to the InstanceDurationInDays field.
func (o *MicrosoftGraphAccessReviewScheduleSettings) SetInstanceDurationInDays(v int32) {
	o.InstanceDurationInDays = &v
}

// GetJustificationRequiredOnApproval returns the JustificationRequiredOnApproval field value if set, zero value otherwise.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetJustificationRequiredOnApproval() bool {
	if o == nil || o.JustificationRequiredOnApproval == nil {
		var ret bool
		return ret
	}
	return *o.JustificationRequiredOnApproval
}

// GetJustificationRequiredOnApprovalOk returns a tuple with the JustificationRequiredOnApproval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetJustificationRequiredOnApprovalOk() (*bool, bool) {
	if o == nil || o.JustificationRequiredOnApproval == nil {
		return nil, false
	}
	return o.JustificationRequiredOnApproval, true
}

// HasJustificationRequiredOnApproval returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) HasJustificationRequiredOnApproval() bool {
	if o != nil && o.JustificationRequiredOnApproval != nil {
		return true
	}

	return false
}

// SetJustificationRequiredOnApproval gets a reference to the given bool and assigns it to the JustificationRequiredOnApproval field.
func (o *MicrosoftGraphAccessReviewScheduleSettings) SetJustificationRequiredOnApproval(v bool) {
	o.JustificationRequiredOnApproval = &v
}

// GetMailNotificationsEnabled returns the MailNotificationsEnabled field value if set, zero value otherwise.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetMailNotificationsEnabled() bool {
	if o == nil || o.MailNotificationsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.MailNotificationsEnabled
}

// GetMailNotificationsEnabledOk returns a tuple with the MailNotificationsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetMailNotificationsEnabledOk() (*bool, bool) {
	if o == nil || o.MailNotificationsEnabled == nil {
		return nil, false
	}
	return o.MailNotificationsEnabled, true
}

// HasMailNotificationsEnabled returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) HasMailNotificationsEnabled() bool {
	if o != nil && o.MailNotificationsEnabled != nil {
		return true
	}

	return false
}

// SetMailNotificationsEnabled gets a reference to the given bool and assigns it to the MailNotificationsEnabled field.
func (o *MicrosoftGraphAccessReviewScheduleSettings) SetMailNotificationsEnabled(v bool) {
	o.MailNotificationsEnabled = &v
}

// GetRecommendationsEnabled returns the RecommendationsEnabled field value if set, zero value otherwise.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetRecommendationsEnabled() bool {
	if o == nil || o.RecommendationsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.RecommendationsEnabled
}

// GetRecommendationsEnabledOk returns a tuple with the RecommendationsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetRecommendationsEnabledOk() (*bool, bool) {
	if o == nil || o.RecommendationsEnabled == nil {
		return nil, false
	}
	return o.RecommendationsEnabled, true
}

// HasRecommendationsEnabled returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) HasRecommendationsEnabled() bool {
	if o != nil && o.RecommendationsEnabled != nil {
		return true
	}

	return false
}

// SetRecommendationsEnabled gets a reference to the given bool and assigns it to the RecommendationsEnabled field.
func (o *MicrosoftGraphAccessReviewScheduleSettings) SetRecommendationsEnabled(v bool) {
	o.RecommendationsEnabled = &v
}

// GetRecurrence returns the Recurrence field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetRecurrence() AnyOfmicrosoftGraphPatternedRecurrence {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPatternedRecurrence
		return ret
	}
	return o.Recurrence
}

// GetRecurrenceOk returns a tuple with the Recurrence field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetRecurrenceOk() (*AnyOfmicrosoftGraphPatternedRecurrence, bool) {
	if o == nil || o.Recurrence == nil {
		return nil, false
	}
	return &o.Recurrence, true
}

// HasRecurrence returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) HasRecurrence() bool {
	if o != nil && o.Recurrence != nil {
		return true
	}

	return false
}

// SetRecurrence gets a reference to the given AnyOfmicrosoftGraphPatternedRecurrence and assigns it to the Recurrence field.
func (o *MicrosoftGraphAccessReviewScheduleSettings) SetRecurrence(v AnyOfmicrosoftGraphPatternedRecurrence) {
	o.Recurrence = v
}

// GetReminderNotificationsEnabled returns the ReminderNotificationsEnabled field value if set, zero value otherwise.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetReminderNotificationsEnabled() bool {
	if o == nil || o.ReminderNotificationsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.ReminderNotificationsEnabled
}

// GetReminderNotificationsEnabledOk returns a tuple with the ReminderNotificationsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) GetReminderNotificationsEnabledOk() (*bool, bool) {
	if o == nil || o.ReminderNotificationsEnabled == nil {
		return nil, false
	}
	return o.ReminderNotificationsEnabled, true
}

// HasReminderNotificationsEnabled returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewScheduleSettings) HasReminderNotificationsEnabled() bool {
	if o != nil && o.ReminderNotificationsEnabled != nil {
		return true
	}

	return false
}

// SetReminderNotificationsEnabled gets a reference to the given bool and assigns it to the ReminderNotificationsEnabled field.
func (o *MicrosoftGraphAccessReviewScheduleSettings) SetReminderNotificationsEnabled(v bool) {
	o.ReminderNotificationsEnabled = &v
}

func (o MicrosoftGraphAccessReviewScheduleSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApplyActions != nil {
		toSerialize["applyActions"] = o.ApplyActions
	}
	if o.AutoApplyDecisionsEnabled != nil {
		toSerialize["autoApplyDecisionsEnabled"] = o.AutoApplyDecisionsEnabled
	}
	if o.DefaultDecision.IsSet() {
		toSerialize["defaultDecision"] = o.DefaultDecision.Get()
	}
	if o.DefaultDecisionEnabled != nil {
		toSerialize["defaultDecisionEnabled"] = o.DefaultDecisionEnabled
	}
	if o.InstanceDurationInDays != nil {
		toSerialize["instanceDurationInDays"] = o.InstanceDurationInDays
	}
	if o.JustificationRequiredOnApproval != nil {
		toSerialize["justificationRequiredOnApproval"] = o.JustificationRequiredOnApproval
	}
	if o.MailNotificationsEnabled != nil {
		toSerialize["mailNotificationsEnabled"] = o.MailNotificationsEnabled
	}
	if o.RecommendationsEnabled != nil {
		toSerialize["recommendationsEnabled"] = o.RecommendationsEnabled
	}
	if o.Recurrence != nil {
		toSerialize["recurrence"] = o.Recurrence
	}
	if o.ReminderNotificationsEnabled != nil {
		toSerialize["reminderNotificationsEnabled"] = o.ReminderNotificationsEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphAccessReviewScheduleSettings struct {
	value *MicrosoftGraphAccessReviewScheduleSettings
	isSet bool
}

func (v NullableMicrosoftGraphAccessReviewScheduleSettings) Get() *MicrosoftGraphAccessReviewScheduleSettings {
	return v.value
}

func (v *NullableMicrosoftGraphAccessReviewScheduleSettings) Set(val *MicrosoftGraphAccessReviewScheduleSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphAccessReviewScheduleSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphAccessReviewScheduleSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphAccessReviewScheduleSettings(val *MicrosoftGraphAccessReviewScheduleSettings) *NullableMicrosoftGraphAccessReviewScheduleSettings {
	return &NullableMicrosoftGraphAccessReviewScheduleSettings{value: val, isSet: true}
}

func (v NullableMicrosoftGraphAccessReviewScheduleSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphAccessReviewScheduleSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


