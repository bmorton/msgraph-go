/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// MicrosoftGraphAccessReviewInstance struct for MicrosoftGraphAccessReviewInstance
type MicrosoftGraphAccessReviewInstance struct {
	// Read-only.
	Id *string `json:"id,omitempty"`
	// DateTime when review instance is scheduled to end.The DatetimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $select. Read-only.
	EndDateTime NullableTime `json:"endDateTime,omitempty"`
	// This collection of reviewer scopes is used to define the list of fallback reviewers. These fallback reviewers will be notified to take action if no users are found from the list of reviewers specified. This could occur when either the group owner is specified as the reviewer but the group owner does not exist, or manager is specified as reviewer but a user's manager does not exist. Supports $select.
	FallbackReviewers *[]*AnyOfmicrosoftGraphAccessReviewReviewerScope `json:"fallbackReviewers,omitempty"`
	// This collection of access review scopes is used to define who the reviewers are. Supports $select. For examples of options for assigning reviewers, see Assign reviewers to your access review definition using the Microsoft Graph API.
	Reviewers *[]*AnyOfmicrosoftGraphAccessReviewReviewerScope `json:"reviewers,omitempty"`
	// Created based on scope and instanceEnumerationScope at the accessReviewScheduleDefinition level. Defines the scope of users reviewed in a group. Supports $select and $filter (contains only). Read-only.
	Scope AnyOfobject `json:"scope,omitempty"`
	// DateTime when review instance is scheduled to start. May be in the future. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $select. Read-only.
	StartDateTime NullableTime `json:"startDateTime,omitempty"`
	// Specifies the status of an accessReview. Possible values: Initializing, NotStarted, Starting, InProgress, Completing, Completed, AutoReviewing, and AutoReviewed. Supports $select, $orderby, and $filter (eq only). Read-only.
	Status NullableString `json:"status,omitempty"`
	// Each principal reviewed in an accessReviewInstance has a decision item representing if they were approved, denied, or not yet reviewed.
	Decisions *[]MicrosoftGraphAccessReviewInstanceDecisionItem `json:"decisions,omitempty"`
}

// NewMicrosoftGraphAccessReviewInstance instantiates a new MicrosoftGraphAccessReviewInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphAccessReviewInstance() *MicrosoftGraphAccessReviewInstance {
	this := MicrosoftGraphAccessReviewInstance{}
	return &this
}

// NewMicrosoftGraphAccessReviewInstanceWithDefaults instantiates a new MicrosoftGraphAccessReviewInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphAccessReviewInstanceWithDefaults() *MicrosoftGraphAccessReviewInstance {
	this := MicrosoftGraphAccessReviewInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MicrosoftGraphAccessReviewInstance) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAccessReviewInstance) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewInstance) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphAccessReviewInstance) SetId(v string) {
	o.Id = &v
}

// GetEndDateTime returns the EndDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAccessReviewInstance) GetEndDateTime() time.Time {
	if o == nil || o.EndDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDateTime.Get()
}

// GetEndDateTimeOk returns a tuple with the EndDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAccessReviewInstance) GetEndDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndDateTime.Get(), o.EndDateTime.IsSet()
}

// HasEndDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewInstance) HasEndDateTime() bool {
	if o != nil && o.EndDateTime.IsSet() {
		return true
	}

	return false
}

// SetEndDateTime gets a reference to the given NullableTime and assigns it to the EndDateTime field.
func (o *MicrosoftGraphAccessReviewInstance) SetEndDateTime(v time.Time) {
	o.EndDateTime.Set(&v)
}
// SetEndDateTimeNil sets the value for EndDateTime to be an explicit nil
func (o *MicrosoftGraphAccessReviewInstance) SetEndDateTimeNil() {
	o.EndDateTime.Set(nil)
}

// UnsetEndDateTime ensures that no value is present for EndDateTime, not even an explicit nil
func (o *MicrosoftGraphAccessReviewInstance) UnsetEndDateTime() {
	o.EndDateTime.Unset()
}

// GetFallbackReviewers returns the FallbackReviewers field value if set, zero value otherwise.
func (o *MicrosoftGraphAccessReviewInstance) GetFallbackReviewers() []*AnyOfmicrosoftGraphAccessReviewReviewerScope {
	if o == nil || o.FallbackReviewers == nil {
		var ret []*AnyOfmicrosoftGraphAccessReviewReviewerScope
		return ret
	}
	return *o.FallbackReviewers
}

// GetFallbackReviewersOk returns a tuple with the FallbackReviewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAccessReviewInstance) GetFallbackReviewersOk() (*[]*AnyOfmicrosoftGraphAccessReviewReviewerScope, bool) {
	if o == nil || o.FallbackReviewers == nil {
		return nil, false
	}
	return o.FallbackReviewers, true
}

// HasFallbackReviewers returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewInstance) HasFallbackReviewers() bool {
	if o != nil && o.FallbackReviewers != nil {
		return true
	}

	return false
}

// SetFallbackReviewers gets a reference to the given []*AnyOfmicrosoftGraphAccessReviewReviewerScope and assigns it to the FallbackReviewers field.
func (o *MicrosoftGraphAccessReviewInstance) SetFallbackReviewers(v []*AnyOfmicrosoftGraphAccessReviewReviewerScope) {
	o.FallbackReviewers = &v
}

// GetReviewers returns the Reviewers field value if set, zero value otherwise.
func (o *MicrosoftGraphAccessReviewInstance) GetReviewers() []*AnyOfmicrosoftGraphAccessReviewReviewerScope {
	if o == nil || o.Reviewers == nil {
		var ret []*AnyOfmicrosoftGraphAccessReviewReviewerScope
		return ret
	}
	return *o.Reviewers
}

// GetReviewersOk returns a tuple with the Reviewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAccessReviewInstance) GetReviewersOk() (*[]*AnyOfmicrosoftGraphAccessReviewReviewerScope, bool) {
	if o == nil || o.Reviewers == nil {
		return nil, false
	}
	return o.Reviewers, true
}

// HasReviewers returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewInstance) HasReviewers() bool {
	if o != nil && o.Reviewers != nil {
		return true
	}

	return false
}

// SetReviewers gets a reference to the given []*AnyOfmicrosoftGraphAccessReviewReviewerScope and assigns it to the Reviewers field.
func (o *MicrosoftGraphAccessReviewInstance) SetReviewers(v []*AnyOfmicrosoftGraphAccessReviewReviewerScope) {
	o.Reviewers = &v
}

// GetScope returns the Scope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAccessReviewInstance) GetScope() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAccessReviewInstance) GetScopeOk() (*AnyOfobject, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return &o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewInstance) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given AnyOfobject and assigns it to the Scope field.
func (o *MicrosoftGraphAccessReviewInstance) SetScope(v AnyOfobject) {
	o.Scope = v
}

// GetStartDateTime returns the StartDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAccessReviewInstance) GetStartDateTime() time.Time {
	if o == nil || o.StartDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDateTime.Get()
}

// GetStartDateTimeOk returns a tuple with the StartDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAccessReviewInstance) GetStartDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartDateTime.Get(), o.StartDateTime.IsSet()
}

// HasStartDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewInstance) HasStartDateTime() bool {
	if o != nil && o.StartDateTime.IsSet() {
		return true
	}

	return false
}

// SetStartDateTime gets a reference to the given NullableTime and assigns it to the StartDateTime field.
func (o *MicrosoftGraphAccessReviewInstance) SetStartDateTime(v time.Time) {
	o.StartDateTime.Set(&v)
}
// SetStartDateTimeNil sets the value for StartDateTime to be an explicit nil
func (o *MicrosoftGraphAccessReviewInstance) SetStartDateTimeNil() {
	o.StartDateTime.Set(nil)
}

// UnsetStartDateTime ensures that no value is present for StartDateTime, not even an explicit nil
func (o *MicrosoftGraphAccessReviewInstance) UnsetStartDateTime() {
	o.StartDateTime.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAccessReviewInstance) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAccessReviewInstance) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewInstance) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *MicrosoftGraphAccessReviewInstance) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *MicrosoftGraphAccessReviewInstance) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *MicrosoftGraphAccessReviewInstance) UnsetStatus() {
	o.Status.Unset()
}

// GetDecisions returns the Decisions field value if set, zero value otherwise.
func (o *MicrosoftGraphAccessReviewInstance) GetDecisions() []MicrosoftGraphAccessReviewInstanceDecisionItem {
	if o == nil || o.Decisions == nil {
		var ret []MicrosoftGraphAccessReviewInstanceDecisionItem
		return ret
	}
	return *o.Decisions
}

// GetDecisionsOk returns a tuple with the Decisions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAccessReviewInstance) GetDecisionsOk() (*[]MicrosoftGraphAccessReviewInstanceDecisionItem, bool) {
	if o == nil || o.Decisions == nil {
		return nil, false
	}
	return o.Decisions, true
}

// HasDecisions returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessReviewInstance) HasDecisions() bool {
	if o != nil && o.Decisions != nil {
		return true
	}

	return false
}

// SetDecisions gets a reference to the given []MicrosoftGraphAccessReviewInstanceDecisionItem and assigns it to the Decisions field.
func (o *MicrosoftGraphAccessReviewInstance) SetDecisions(v []MicrosoftGraphAccessReviewInstanceDecisionItem) {
	o.Decisions = &v
}

func (o MicrosoftGraphAccessReviewInstance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.EndDateTime.IsSet() {
		toSerialize["endDateTime"] = o.EndDateTime.Get()
	}
	if o.FallbackReviewers != nil {
		toSerialize["fallbackReviewers"] = o.FallbackReviewers
	}
	if o.Reviewers != nil {
		toSerialize["reviewers"] = o.Reviewers
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.StartDateTime.IsSet() {
		toSerialize["startDateTime"] = o.StartDateTime.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Decisions != nil {
		toSerialize["decisions"] = o.Decisions
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphAccessReviewInstance struct {
	value *MicrosoftGraphAccessReviewInstance
	isSet bool
}

func (v NullableMicrosoftGraphAccessReviewInstance) Get() *MicrosoftGraphAccessReviewInstance {
	return v.value
}

func (v *NullableMicrosoftGraphAccessReviewInstance) Set(val *MicrosoftGraphAccessReviewInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphAccessReviewInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphAccessReviewInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphAccessReviewInstance(val *MicrosoftGraphAccessReviewInstance) *NullableMicrosoftGraphAccessReviewInstance {
	return &NullableMicrosoftGraphAccessReviewInstance{value: val, isSet: true}
}

func (v NullableMicrosoftGraphAccessReviewInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphAccessReviewInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


