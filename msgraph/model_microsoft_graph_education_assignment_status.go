/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphEducationAssignmentStatus the model 'MicrosoftGraphEducationAssignmentStatus'
type MicrosoftGraphEducationAssignmentStatus string

// List of microsoft.graph.educationAssignmentStatus
const (
	DRAFT MicrosoftGraphEducationAssignmentStatus = "draft"
	PUBLISHED MicrosoftGraphEducationAssignmentStatus = "published"
	ASSIGNED MicrosoftGraphEducationAssignmentStatus = "assigned"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphEducationAssignmentStatus = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphEducationAssignmentStatus enum
var AllowedMicrosoftGraphEducationAssignmentStatusEnumValues = []MicrosoftGraphEducationAssignmentStatus{
	"draft",
	"published",
	"assigned",
	"unknownFutureValue",
}

func (v *MicrosoftGraphEducationAssignmentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphEducationAssignmentStatus(value)
	for _, existing := range AllowedMicrosoftGraphEducationAssignmentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphEducationAssignmentStatus", value)
}

// NewMicrosoftGraphEducationAssignmentStatusFromValue returns a pointer to a valid MicrosoftGraphEducationAssignmentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphEducationAssignmentStatusFromValue(v string) (*MicrosoftGraphEducationAssignmentStatus, error) {
	ev := MicrosoftGraphEducationAssignmentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphEducationAssignmentStatus: valid values are %v", v, AllowedMicrosoftGraphEducationAssignmentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphEducationAssignmentStatus) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphEducationAssignmentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.educationAssignmentStatus value
func (v MicrosoftGraphEducationAssignmentStatus) Ptr() *MicrosoftGraphEducationAssignmentStatus {
	return &v
}

type NullableMicrosoftGraphEducationAssignmentStatus struct {
	value *MicrosoftGraphEducationAssignmentStatus
	isSet bool
}

func (v NullableMicrosoftGraphEducationAssignmentStatus) Get() *MicrosoftGraphEducationAssignmentStatus {
	return v.value
}

func (v *NullableMicrosoftGraphEducationAssignmentStatus) Set(val *MicrosoftGraphEducationAssignmentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphEducationAssignmentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphEducationAssignmentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphEducationAssignmentStatus(val *MicrosoftGraphEducationAssignmentStatus) *NullableMicrosoftGraphEducationAssignmentStatus {
	return &NullableMicrosoftGraphEducationAssignmentStatus{value: val, isSet: true}
}

func (v NullableMicrosoftGraphEducationAssignmentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphEducationAssignmentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

