/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DomainsDirectoryObjectApiService DomainsDirectoryObjectApi service
type DomainsDirectoryObjectApiService service

type ApiDomainsCreateRefDomainNameReferencesRequest struct {
	ctx _context.Context
	ApiService *DomainsDirectoryObjectApiService
	domainId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref value
func (r ApiDomainsCreateRefDomainNameReferencesRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiDomainsCreateRefDomainNameReferencesRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiDomainsCreateRefDomainNameReferencesRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.DomainsCreateRefDomainNameReferencesExecute(r)
}

/*
DomainsCreateRefDomainNameReferences Create new navigation property ref to domainNameReferences for domains

Read-only, Nullable

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param domainId key: id of domain
 @return ApiDomainsCreateRefDomainNameReferencesRequest
*/
func (a *DomainsDirectoryObjectApiService) DomainsCreateRefDomainNameReferences(ctx _context.Context, domainId string) ApiDomainsCreateRefDomainNameReferencesRequest {
	return ApiDomainsCreateRefDomainNameReferencesRequest{
		ApiService: a,
		ctx: ctx,
		domainId: domainId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DomainsDirectoryObjectApiService) DomainsCreateRefDomainNameReferencesExecute(r ApiDomainsCreateRefDomainNameReferencesRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainsDirectoryObjectApiService.DomainsCreateRefDomainNameReferences")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/domains/{domain-id}/domainNameReferences/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"domain-id"+"}", _neturl.PathEscape(parameterToString(r.domainId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDomainsListDomainNameReferencesRequest struct {
	ctx _context.Context
	ApiService *DomainsDirectoryObjectApiService
	domainId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDomainsListDomainNameReferencesRequest) Top(top int32) ApiDomainsListDomainNameReferencesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDomainsListDomainNameReferencesRequest) Skip(skip int32) ApiDomainsListDomainNameReferencesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDomainsListDomainNameReferencesRequest) Search(search string) ApiDomainsListDomainNameReferencesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDomainsListDomainNameReferencesRequest) Filter(filter string) ApiDomainsListDomainNameReferencesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDomainsListDomainNameReferencesRequest) Count(count bool) ApiDomainsListDomainNameReferencesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDomainsListDomainNameReferencesRequest) Orderby(orderby []string) ApiDomainsListDomainNameReferencesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDomainsListDomainNameReferencesRequest) Select_(select_ []string) ApiDomainsListDomainNameReferencesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDomainsListDomainNameReferencesRequest) Expand(expand []string) ApiDomainsListDomainNameReferencesRequest {
	r.expand = &expand
	return r
}

func (r ApiDomainsListDomainNameReferencesRequest) Execute() (CollectionOfDirectoryObject, *_nethttp.Response, error) {
	return r.ApiService.DomainsListDomainNameReferencesExecute(r)
}

/*
DomainsListDomainNameReferences Get domainNameReferences from domains

Read-only, Nullable

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param domainId key: id of domain
 @return ApiDomainsListDomainNameReferencesRequest
*/
func (a *DomainsDirectoryObjectApiService) DomainsListDomainNameReferences(ctx _context.Context, domainId string) ApiDomainsListDomainNameReferencesRequest {
	return ApiDomainsListDomainNameReferencesRequest{
		ApiService: a,
		ctx: ctx,
		domainId: domainId,
	}
}

// Execute executes the request
//  @return CollectionOfDirectoryObject
func (a *DomainsDirectoryObjectApiService) DomainsListDomainNameReferencesExecute(r ApiDomainsListDomainNameReferencesRequest) (CollectionOfDirectoryObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDirectoryObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainsDirectoryObjectApiService.DomainsListDomainNameReferences")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/domains/{domain-id}/domainNameReferences"
	localVarPath = strings.Replace(localVarPath, "{"+"domain-id"+"}", _neturl.PathEscape(parameterToString(r.domainId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDomainsListRefDomainNameReferencesRequest struct {
	ctx _context.Context
	ApiService *DomainsDirectoryObjectApiService
	domainId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
}

// Show only the first n items
func (r ApiDomainsListRefDomainNameReferencesRequest) Top(top int32) ApiDomainsListRefDomainNameReferencesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDomainsListRefDomainNameReferencesRequest) Skip(skip int32) ApiDomainsListRefDomainNameReferencesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDomainsListRefDomainNameReferencesRequest) Search(search string) ApiDomainsListRefDomainNameReferencesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDomainsListRefDomainNameReferencesRequest) Filter(filter string) ApiDomainsListRefDomainNameReferencesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDomainsListRefDomainNameReferencesRequest) Count(count bool) ApiDomainsListRefDomainNameReferencesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDomainsListRefDomainNameReferencesRequest) Orderby(orderby []string) ApiDomainsListRefDomainNameReferencesRequest {
	r.orderby = &orderby
	return r
}

func (r ApiDomainsListRefDomainNameReferencesRequest) Execute() (CollectionOfLinksOfDirectoryObject, *_nethttp.Response, error) {
	return r.ApiService.DomainsListRefDomainNameReferencesExecute(r)
}

/*
DomainsListRefDomainNameReferences Get ref of domainNameReferences from domains

Read-only, Nullable

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param domainId key: id of domain
 @return ApiDomainsListRefDomainNameReferencesRequest
*/
func (a *DomainsDirectoryObjectApiService) DomainsListRefDomainNameReferences(ctx _context.Context, domainId string) ApiDomainsListRefDomainNameReferencesRequest {
	return ApiDomainsListRefDomainNameReferencesRequest{
		ApiService: a,
		ctx: ctx,
		domainId: domainId,
	}
}

// Execute executes the request
//  @return CollectionOfLinksOfDirectoryObject
func (a *DomainsDirectoryObjectApiService) DomainsListRefDomainNameReferencesExecute(r ApiDomainsListRefDomainNameReferencesRequest) (CollectionOfLinksOfDirectoryObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfLinksOfDirectoryObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainsDirectoryObjectApiService.DomainsListRefDomainNameReferences")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/domains/{domain-id}/domainNameReferences/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"domain-id"+"}", _neturl.PathEscape(parameterToString(r.domainId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
