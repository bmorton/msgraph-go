/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceManagementDeviceManagementReportsApiService DeviceManagementDeviceManagementReportsApi service
type DeviceManagementDeviceManagementReportsApiService service

type ApiDeviceManagementDeleteReportsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceManagementReportsApiService
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeleteReportsRequest) IfMatch(ifMatch string) ApiDeviceManagementDeleteReportsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeleteReportsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeleteReportsExecute(r)
}

/*
DeviceManagementDeleteReports Delete navigation property reports for deviceManagement

Reports singleton

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementDeleteReportsRequest
*/
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementDeleteReports(ctx _context.Context) ApiDeviceManagementDeleteReportsRequest {
	return ApiDeviceManagementDeleteReportsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementDeleteReportsExecute(r ApiDeviceManagementDeleteReportsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceManagementReportsApiService.DeviceManagementDeleteReports")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/reports"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementGetReportsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceManagementReportsApiService
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementGetReportsRequest) Select_(select_ []string) ApiDeviceManagementGetReportsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementGetReportsRequest) Expand(expand []string) ApiDeviceManagementGetReportsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementGetReportsRequest) Execute() (MicrosoftGraphDeviceManagementReports, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementGetReportsExecute(r)
}

/*
DeviceManagementGetReports Get reports from deviceManagement

Reports singleton

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementGetReportsRequest
*/
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementGetReports(ctx _context.Context) ApiDeviceManagementGetReportsRequest {
	return ApiDeviceManagementGetReportsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceManagementReports
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementGetReportsExecute(r ApiDeviceManagementGetReportsRequest) (MicrosoftGraphDeviceManagementReports, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceManagementReports
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceManagementReportsApiService.DeviceManagementGetReports")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/reports"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementReportsCreateExportJobsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceManagementReportsApiService
	microsoftGraphDeviceManagementExportJob *MicrosoftGraphDeviceManagementExportJob
}

// New navigation property
func (r ApiDeviceManagementReportsCreateExportJobsRequest) MicrosoftGraphDeviceManagementExportJob(microsoftGraphDeviceManagementExportJob MicrosoftGraphDeviceManagementExportJob) ApiDeviceManagementReportsCreateExportJobsRequest {
	r.microsoftGraphDeviceManagementExportJob = &microsoftGraphDeviceManagementExportJob
	return r
}

func (r ApiDeviceManagementReportsCreateExportJobsRequest) Execute() (MicrosoftGraphDeviceManagementExportJob, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementReportsCreateExportJobsExecute(r)
}

/*
DeviceManagementReportsCreateExportJobs Create new navigation property to exportJobs for deviceManagement

Entity representing a job to export a report

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementReportsCreateExportJobsRequest
*/
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementReportsCreateExportJobs(ctx _context.Context) ApiDeviceManagementReportsCreateExportJobsRequest {
	return ApiDeviceManagementReportsCreateExportJobsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceManagementExportJob
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementReportsCreateExportJobsExecute(r ApiDeviceManagementReportsCreateExportJobsRequest) (MicrosoftGraphDeviceManagementExportJob, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceManagementExportJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceManagementReportsApiService.DeviceManagementReportsCreateExportJobs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/reports/exportJobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceManagementExportJob == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceManagementExportJob is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceManagementExportJob
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementReportsDeleteExportJobsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceManagementReportsApiService
	deviceManagementExportJobId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementReportsDeleteExportJobsRequest) IfMatch(ifMatch string) ApiDeviceManagementReportsDeleteExportJobsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementReportsDeleteExportJobsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementReportsDeleteExportJobsExecute(r)
}

/*
DeviceManagementReportsDeleteExportJobs Delete navigation property exportJobs for deviceManagement

Entity representing a job to export a report

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceManagementExportJobId key: id of deviceManagementExportJob
 @return ApiDeviceManagementReportsDeleteExportJobsRequest
*/
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementReportsDeleteExportJobs(ctx _context.Context, deviceManagementExportJobId string) ApiDeviceManagementReportsDeleteExportJobsRequest {
	return ApiDeviceManagementReportsDeleteExportJobsRequest{
		ApiService: a,
		ctx: ctx,
		deviceManagementExportJobId: deviceManagementExportJobId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementReportsDeleteExportJobsExecute(r ApiDeviceManagementReportsDeleteExportJobsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceManagementReportsApiService.DeviceManagementReportsDeleteExportJobs")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/reports/exportJobs/{deviceManagementExportJob-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceManagementExportJob-id"+"}", _neturl.PathEscape(parameterToString(r.deviceManagementExportJobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementReportsGetExportJobsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceManagementReportsApiService
	deviceManagementExportJobId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementReportsGetExportJobsRequest) Select_(select_ []string) ApiDeviceManagementReportsGetExportJobsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementReportsGetExportJobsRequest) Expand(expand []string) ApiDeviceManagementReportsGetExportJobsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementReportsGetExportJobsRequest) Execute() (MicrosoftGraphDeviceManagementExportJob, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementReportsGetExportJobsExecute(r)
}

/*
DeviceManagementReportsGetExportJobs Get exportJobs from deviceManagement

Entity representing a job to export a report

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceManagementExportJobId key: id of deviceManagementExportJob
 @return ApiDeviceManagementReportsGetExportJobsRequest
*/
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementReportsGetExportJobs(ctx _context.Context, deviceManagementExportJobId string) ApiDeviceManagementReportsGetExportJobsRequest {
	return ApiDeviceManagementReportsGetExportJobsRequest{
		ApiService: a,
		ctx: ctx,
		deviceManagementExportJobId: deviceManagementExportJobId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceManagementExportJob
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementReportsGetExportJobsExecute(r ApiDeviceManagementReportsGetExportJobsRequest) (MicrosoftGraphDeviceManagementExportJob, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceManagementExportJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceManagementReportsApiService.DeviceManagementReportsGetExportJobs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/reports/exportJobs/{deviceManagementExportJob-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceManagementExportJob-id"+"}", _neturl.PathEscape(parameterToString(r.deviceManagementExportJobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementReportsListExportJobsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceManagementReportsApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementReportsListExportJobsRequest) Top(top int32) ApiDeviceManagementReportsListExportJobsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementReportsListExportJobsRequest) Skip(skip int32) ApiDeviceManagementReportsListExportJobsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementReportsListExportJobsRequest) Search(search string) ApiDeviceManagementReportsListExportJobsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementReportsListExportJobsRequest) Filter(filter string) ApiDeviceManagementReportsListExportJobsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementReportsListExportJobsRequest) Count(count bool) ApiDeviceManagementReportsListExportJobsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementReportsListExportJobsRequest) Orderby(orderby []string) ApiDeviceManagementReportsListExportJobsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementReportsListExportJobsRequest) Select_(select_ []string) ApiDeviceManagementReportsListExportJobsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementReportsListExportJobsRequest) Expand(expand []string) ApiDeviceManagementReportsListExportJobsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementReportsListExportJobsRequest) Execute() (CollectionOfDeviceManagementExportJob, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementReportsListExportJobsExecute(r)
}

/*
DeviceManagementReportsListExportJobs Get exportJobs from deviceManagement

Entity representing a job to export a report

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementReportsListExportJobsRequest
*/
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementReportsListExportJobs(ctx _context.Context) ApiDeviceManagementReportsListExportJobsRequest {
	return ApiDeviceManagementReportsListExportJobsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceManagementExportJob
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementReportsListExportJobsExecute(r ApiDeviceManagementReportsListExportJobsRequest) (CollectionOfDeviceManagementExportJob, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceManagementExportJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceManagementReportsApiService.DeviceManagementReportsListExportJobs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/reports/exportJobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementReportsUpdateExportJobsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceManagementReportsApiService
	deviceManagementExportJobId string
	microsoftGraphDeviceManagementExportJob *MicrosoftGraphDeviceManagementExportJob
}

// New navigation property values
func (r ApiDeviceManagementReportsUpdateExportJobsRequest) MicrosoftGraphDeviceManagementExportJob(microsoftGraphDeviceManagementExportJob MicrosoftGraphDeviceManagementExportJob) ApiDeviceManagementReportsUpdateExportJobsRequest {
	r.microsoftGraphDeviceManagementExportJob = &microsoftGraphDeviceManagementExportJob
	return r
}

func (r ApiDeviceManagementReportsUpdateExportJobsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementReportsUpdateExportJobsExecute(r)
}

/*
DeviceManagementReportsUpdateExportJobs Update the navigation property exportJobs in deviceManagement

Entity representing a job to export a report

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceManagementExportJobId key: id of deviceManagementExportJob
 @return ApiDeviceManagementReportsUpdateExportJobsRequest
*/
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementReportsUpdateExportJobs(ctx _context.Context, deviceManagementExportJobId string) ApiDeviceManagementReportsUpdateExportJobsRequest {
	return ApiDeviceManagementReportsUpdateExportJobsRequest{
		ApiService: a,
		ctx: ctx,
		deviceManagementExportJobId: deviceManagementExportJobId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementReportsUpdateExportJobsExecute(r ApiDeviceManagementReportsUpdateExportJobsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceManagementReportsApiService.DeviceManagementReportsUpdateExportJobs")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/reports/exportJobs/{deviceManagementExportJob-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceManagementExportJob-id"+"}", _neturl.PathEscape(parameterToString(r.deviceManagementExportJobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceManagementExportJob == nil {
		return nil, reportError("microsoftGraphDeviceManagementExportJob is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceManagementExportJob
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementUpdateReportsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceManagementReportsApiService
	microsoftGraphDeviceManagementReports *MicrosoftGraphDeviceManagementReports
}

// New navigation property values
func (r ApiDeviceManagementUpdateReportsRequest) MicrosoftGraphDeviceManagementReports(microsoftGraphDeviceManagementReports MicrosoftGraphDeviceManagementReports) ApiDeviceManagementUpdateReportsRequest {
	r.microsoftGraphDeviceManagementReports = &microsoftGraphDeviceManagementReports
	return r
}

func (r ApiDeviceManagementUpdateReportsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementUpdateReportsExecute(r)
}

/*
DeviceManagementUpdateReports Update the navigation property reports in deviceManagement

Reports singleton

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementUpdateReportsRequest
*/
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementUpdateReports(ctx _context.Context) ApiDeviceManagementUpdateReportsRequest {
	return ApiDeviceManagementUpdateReportsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceManagementReportsApiService) DeviceManagementUpdateReportsExecute(r ApiDeviceManagementUpdateReportsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceManagementReportsApiService.DeviceManagementUpdateReports")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/reports"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceManagementReports == nil {
		return nil, reportError("microsoftGraphDeviceManagementReports is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceManagementReports
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
