/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// PrintPrinterShareApiService PrintPrinterShareApi service
type PrintPrinterShareApiService service

type ApiPrintCreateSharesRequest struct {
	ctx _context.Context
	ApiService *PrintPrinterShareApiService
	microsoftGraphPrinterShare *MicrosoftGraphPrinterShare
}

// New navigation property
func (r ApiPrintCreateSharesRequest) MicrosoftGraphPrinterShare(microsoftGraphPrinterShare MicrosoftGraphPrinterShare) ApiPrintCreateSharesRequest {
	r.microsoftGraphPrinterShare = &microsoftGraphPrinterShare
	return r
}

func (r ApiPrintCreateSharesRequest) Execute() (MicrosoftGraphPrinterShare, *_nethttp.Response, error) {
	return r.ApiService.PrintCreateSharesExecute(r)
}

/*
PrintCreateShares Create new navigation property to shares for print

The list of printer shares registered in the tenant.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPrintCreateSharesRequest
*/
func (a *PrintPrinterShareApiService) PrintCreateShares(ctx _context.Context) ApiPrintCreateSharesRequest {
	return ApiPrintCreateSharesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrinterShare
func (a *PrintPrinterShareApiService) PrintCreateSharesExecute(r ApiPrintCreateSharesRequest) (MicrosoftGraphPrinterShare, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrinterShare
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrinterShareApiService.PrintCreateShares")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/shares"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrinterShare == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphPrinterShare is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrinterShare
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintDeleteSharesRequest struct {
	ctx _context.Context
	ApiService *PrintPrinterShareApiService
	printerShareId string
	ifMatch *string
}

// ETag
func (r ApiPrintDeleteSharesRequest) IfMatch(ifMatch string) ApiPrintDeleteSharesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiPrintDeleteSharesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintDeleteSharesExecute(r)
}

/*
PrintDeleteShares Delete navigation property shares for print

The list of printer shares registered in the tenant.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printerShareId key: id of printerShare
 @return ApiPrintDeleteSharesRequest
*/
func (a *PrintPrinterShareApiService) PrintDeleteShares(ctx _context.Context, printerShareId string) ApiPrintDeleteSharesRequest {
	return ApiPrintDeleteSharesRequest{
		ApiService: a,
		ctx: ctx,
		printerShareId: printerShareId,
	}
}

// Execute executes the request
func (a *PrintPrinterShareApiService) PrintDeleteSharesExecute(r ApiPrintDeleteSharesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrinterShareApiService.PrintDeleteShares")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/shares/{printerShare-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printerShare-id"+"}", _neturl.PathEscape(parameterToString(r.printerShareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrintGetSharesRequest struct {
	ctx _context.Context
	ApiService *PrintPrinterShareApiService
	printerShareId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiPrintGetSharesRequest) Select_(select_ []string) ApiPrintGetSharesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrintGetSharesRequest) Expand(expand []string) ApiPrintGetSharesRequest {
	r.expand = &expand
	return r
}

func (r ApiPrintGetSharesRequest) Execute() (MicrosoftGraphPrinterShare, *_nethttp.Response, error) {
	return r.ApiService.PrintGetSharesExecute(r)
}

/*
PrintGetShares Get shares from print

The list of printer shares registered in the tenant.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printerShareId key: id of printerShare
 @return ApiPrintGetSharesRequest
*/
func (a *PrintPrinterShareApiService) PrintGetShares(ctx _context.Context, printerShareId string) ApiPrintGetSharesRequest {
	return ApiPrintGetSharesRequest{
		ApiService: a,
		ctx: ctx,
		printerShareId: printerShareId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrinterShare
func (a *PrintPrinterShareApiService) PrintGetSharesExecute(r ApiPrintGetSharesRequest) (MicrosoftGraphPrinterShare, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrinterShare
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrinterShareApiService.PrintGetShares")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/shares/{printerShare-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printerShare-id"+"}", _neturl.PathEscape(parameterToString(r.printerShareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintListSharesRequest struct {
	ctx _context.Context
	ApiService *PrintPrinterShareApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiPrintListSharesRequest) Top(top int32) ApiPrintListSharesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiPrintListSharesRequest) Skip(skip int32) ApiPrintListSharesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiPrintListSharesRequest) Search(search string) ApiPrintListSharesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiPrintListSharesRequest) Filter(filter string) ApiPrintListSharesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiPrintListSharesRequest) Count(count bool) ApiPrintListSharesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiPrintListSharesRequest) Orderby(orderby []string) ApiPrintListSharesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiPrintListSharesRequest) Select_(select_ []string) ApiPrintListSharesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrintListSharesRequest) Expand(expand []string) ApiPrintListSharesRequest {
	r.expand = &expand
	return r
}

func (r ApiPrintListSharesRequest) Execute() (CollectionOfPrinterShare, *_nethttp.Response, error) {
	return r.ApiService.PrintListSharesExecute(r)
}

/*
PrintListShares Get shares from print

The list of printer shares registered in the tenant.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPrintListSharesRequest
*/
func (a *PrintPrinterShareApiService) PrintListShares(ctx _context.Context) ApiPrintListSharesRequest {
	return ApiPrintListSharesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfPrinterShare
func (a *PrintPrinterShareApiService) PrintListSharesExecute(r ApiPrintListSharesRequest) (CollectionOfPrinterShare, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfPrinterShare
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrinterShareApiService.PrintListShares")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/shares"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintSharesCreateRefAllowedGroupsRequest struct {
	ctx _context.Context
	ApiService *PrintPrinterShareApiService
	printerShareId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref value
func (r ApiPrintSharesCreateRefAllowedGroupsRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiPrintSharesCreateRefAllowedGroupsRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiPrintSharesCreateRefAllowedGroupsRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.PrintSharesCreateRefAllowedGroupsExecute(r)
}

/*
PrintSharesCreateRefAllowedGroups Create new navigation property ref to allowedGroups for print

The groups whose users have access to print using the printer.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printerShareId key: id of printerShare
 @return ApiPrintSharesCreateRefAllowedGroupsRequest
*/
func (a *PrintPrinterShareApiService) PrintSharesCreateRefAllowedGroups(ctx _context.Context, printerShareId string) ApiPrintSharesCreateRefAllowedGroupsRequest {
	return ApiPrintSharesCreateRefAllowedGroupsRequest{
		ApiService: a,
		ctx: ctx,
		printerShareId: printerShareId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *PrintPrinterShareApiService) PrintSharesCreateRefAllowedGroupsExecute(r ApiPrintSharesCreateRefAllowedGroupsRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrinterShareApiService.PrintSharesCreateRefAllowedGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/shares/{printerShare-id}/allowedGroups/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"printerShare-id"+"}", _neturl.PathEscape(parameterToString(r.printerShareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintSharesCreateRefAllowedUsersRequest struct {
	ctx _context.Context
	ApiService *PrintPrinterShareApiService
	printerShareId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref value
func (r ApiPrintSharesCreateRefAllowedUsersRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiPrintSharesCreateRefAllowedUsersRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiPrintSharesCreateRefAllowedUsersRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.PrintSharesCreateRefAllowedUsersExecute(r)
}

/*
PrintSharesCreateRefAllowedUsers Create new navigation property ref to allowedUsers for print

The users who have access to print using the printer.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printerShareId key: id of printerShare
 @return ApiPrintSharesCreateRefAllowedUsersRequest
*/
func (a *PrintPrinterShareApiService) PrintSharesCreateRefAllowedUsers(ctx _context.Context, printerShareId string) ApiPrintSharesCreateRefAllowedUsersRequest {
	return ApiPrintSharesCreateRefAllowedUsersRequest{
		ApiService: a,
		ctx: ctx,
		printerShareId: printerShareId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *PrintPrinterShareApiService) PrintSharesCreateRefAllowedUsersExecute(r ApiPrintSharesCreateRefAllowedUsersRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrinterShareApiService.PrintSharesCreateRefAllowedUsers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/shares/{printerShare-id}/allowedUsers/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"printerShare-id"+"}", _neturl.PathEscape(parameterToString(r.printerShareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintSharesDeleteRefPrinterRequest struct {
	ctx _context.Context
	ApiService *PrintPrinterShareApiService
	printerShareId string
	ifMatch *string
}

// ETag
func (r ApiPrintSharesDeleteRefPrinterRequest) IfMatch(ifMatch string) ApiPrintSharesDeleteRefPrinterRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiPrintSharesDeleteRefPrinterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintSharesDeleteRefPrinterExecute(r)
}

/*
PrintSharesDeleteRefPrinter Delete ref of navigation property printer for print

The printer that this printer share is related to.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printerShareId key: id of printerShare
 @return ApiPrintSharesDeleteRefPrinterRequest
*/
func (a *PrintPrinterShareApiService) PrintSharesDeleteRefPrinter(ctx _context.Context, printerShareId string) ApiPrintSharesDeleteRefPrinterRequest {
	return ApiPrintSharesDeleteRefPrinterRequest{
		ApiService: a,
		ctx: ctx,
		printerShareId: printerShareId,
	}
}

// Execute executes the request
func (a *PrintPrinterShareApiService) PrintSharesDeleteRefPrinterExecute(r ApiPrintSharesDeleteRefPrinterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrinterShareApiService.PrintSharesDeleteRefPrinter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/shares/{printerShare-id}/printer/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"printerShare-id"+"}", _neturl.PathEscape(parameterToString(r.printerShareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrintSharesGetPrinterRequest struct {
	ctx _context.Context
	ApiService *PrintPrinterShareApiService
	printerShareId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiPrintSharesGetPrinterRequest) Select_(select_ []string) ApiPrintSharesGetPrinterRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrintSharesGetPrinterRequest) Expand(expand []string) ApiPrintSharesGetPrinterRequest {
	r.expand = &expand
	return r
}

func (r ApiPrintSharesGetPrinterRequest) Execute() (MicrosoftGraphPrinter, *_nethttp.Response, error) {
	return r.ApiService.PrintSharesGetPrinterExecute(r)
}

/*
PrintSharesGetPrinter Get printer from print

The printer that this printer share is related to.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printerShareId key: id of printerShare
 @return ApiPrintSharesGetPrinterRequest
*/
func (a *PrintPrinterShareApiService) PrintSharesGetPrinter(ctx _context.Context, printerShareId string) ApiPrintSharesGetPrinterRequest {
	return ApiPrintSharesGetPrinterRequest{
		ApiService: a,
		ctx: ctx,
		printerShareId: printerShareId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrinter
func (a *PrintPrinterShareApiService) PrintSharesGetPrinterExecute(r ApiPrintSharesGetPrinterRequest) (MicrosoftGraphPrinter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrinter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrinterShareApiService.PrintSharesGetPrinter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/shares/{printerShare-id}/printer"
	localVarPath = strings.Replace(localVarPath, "{"+"printerShare-id"+"}", _neturl.PathEscape(parameterToString(r.printerShareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintSharesGetRefPrinterRequest struct {
	ctx _context.Context
	ApiService *PrintPrinterShareApiService
	printerShareId string
}


func (r ApiPrintSharesGetRefPrinterRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.PrintSharesGetRefPrinterExecute(r)
}

/*
PrintSharesGetRefPrinter Get ref of printer from print

The printer that this printer share is related to.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printerShareId key: id of printerShare
 @return ApiPrintSharesGetRefPrinterRequest
*/
func (a *PrintPrinterShareApiService) PrintSharesGetRefPrinter(ctx _context.Context, printerShareId string) ApiPrintSharesGetRefPrinterRequest {
	return ApiPrintSharesGetRefPrinterRequest{
		ApiService: a,
		ctx: ctx,
		printerShareId: printerShareId,
	}
}

// Execute executes the request
//  @return string
func (a *PrintPrinterShareApiService) PrintSharesGetRefPrinterExecute(r ApiPrintSharesGetRefPrinterRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrinterShareApiService.PrintSharesGetRefPrinter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/shares/{printerShare-id}/printer/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"printerShare-id"+"}", _neturl.PathEscape(parameterToString(r.printerShareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintSharesListAllowedGroupsRequest struct {
	ctx _context.Context
	ApiService *PrintPrinterShareApiService
	printerShareId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiPrintSharesListAllowedGroupsRequest) Top(top int32) ApiPrintSharesListAllowedGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiPrintSharesListAllowedGroupsRequest) Skip(skip int32) ApiPrintSharesListAllowedGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiPrintSharesListAllowedGroupsRequest) Search(search string) ApiPrintSharesListAllowedGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiPrintSharesListAllowedGroupsRequest) Filter(filter string) ApiPrintSharesListAllowedGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiPrintSharesListAllowedGroupsRequest) Count(count bool) ApiPrintSharesListAllowedGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiPrintSharesListAllowedGroupsRequest) Orderby(orderby []string) ApiPrintSharesListAllowedGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiPrintSharesListAllowedGroupsRequest) Select_(select_ []string) ApiPrintSharesListAllowedGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrintSharesListAllowedGroupsRequest) Expand(expand []string) ApiPrintSharesListAllowedGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiPrintSharesListAllowedGroupsRequest) Execute() (CollectionOfGroup, *_nethttp.Response, error) {
	return r.ApiService.PrintSharesListAllowedGroupsExecute(r)
}

/*
PrintSharesListAllowedGroups Get allowedGroups from print

The groups whose users have access to print using the printer.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printerShareId key: id of printerShare
 @return ApiPrintSharesListAllowedGroupsRequest
*/
func (a *PrintPrinterShareApiService) PrintSharesListAllowedGroups(ctx _context.Context, printerShareId string) ApiPrintSharesListAllowedGroupsRequest {
	return ApiPrintSharesListAllowedGroupsRequest{
		ApiService: a,
		ctx: ctx,
		printerShareId: printerShareId,
	}
}

// Execute executes the request
//  @return CollectionOfGroup
func (a *PrintPrinterShareApiService) PrintSharesListAllowedGroupsExecute(r ApiPrintSharesListAllowedGroupsRequest) (CollectionOfGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrinterShareApiService.PrintSharesListAllowedGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/shares/{printerShare-id}/allowedGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"printerShare-id"+"}", _neturl.PathEscape(parameterToString(r.printerShareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintSharesListAllowedUsersRequest struct {
	ctx _context.Context
	ApiService *PrintPrinterShareApiService
	printerShareId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiPrintSharesListAllowedUsersRequest) Top(top int32) ApiPrintSharesListAllowedUsersRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiPrintSharesListAllowedUsersRequest) Skip(skip int32) ApiPrintSharesListAllowedUsersRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiPrintSharesListAllowedUsersRequest) Search(search string) ApiPrintSharesListAllowedUsersRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiPrintSharesListAllowedUsersRequest) Filter(filter string) ApiPrintSharesListAllowedUsersRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiPrintSharesListAllowedUsersRequest) Count(count bool) ApiPrintSharesListAllowedUsersRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiPrintSharesListAllowedUsersRequest) Orderby(orderby []string) ApiPrintSharesListAllowedUsersRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiPrintSharesListAllowedUsersRequest) Select_(select_ []string) ApiPrintSharesListAllowedUsersRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrintSharesListAllowedUsersRequest) Expand(expand []string) ApiPrintSharesListAllowedUsersRequest {
	r.expand = &expand
	return r
}

func (r ApiPrintSharesListAllowedUsersRequest) Execute() (CollectionOfUser, *_nethttp.Response, error) {
	return r.ApiService.PrintSharesListAllowedUsersExecute(r)
}

/*
PrintSharesListAllowedUsers Get allowedUsers from print

The users who have access to print using the printer.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printerShareId key: id of printerShare
 @return ApiPrintSharesListAllowedUsersRequest
*/
func (a *PrintPrinterShareApiService) PrintSharesListAllowedUsers(ctx _context.Context, printerShareId string) ApiPrintSharesListAllowedUsersRequest {
	return ApiPrintSharesListAllowedUsersRequest{
		ApiService: a,
		ctx: ctx,
		printerShareId: printerShareId,
	}
}

// Execute executes the request
//  @return CollectionOfUser
func (a *PrintPrinterShareApiService) PrintSharesListAllowedUsersExecute(r ApiPrintSharesListAllowedUsersRequest) (CollectionOfUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrinterShareApiService.PrintSharesListAllowedUsers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/shares/{printerShare-id}/allowedUsers"
	localVarPath = strings.Replace(localVarPath, "{"+"printerShare-id"+"}", _neturl.PathEscape(parameterToString(r.printerShareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintSharesListRefAllowedGroupsRequest struct {
	ctx _context.Context
	ApiService *PrintPrinterShareApiService
	printerShareId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
}

// Show only the first n items
func (r ApiPrintSharesListRefAllowedGroupsRequest) Top(top int32) ApiPrintSharesListRefAllowedGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiPrintSharesListRefAllowedGroupsRequest) Skip(skip int32) ApiPrintSharesListRefAllowedGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiPrintSharesListRefAllowedGroupsRequest) Search(search string) ApiPrintSharesListRefAllowedGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiPrintSharesListRefAllowedGroupsRequest) Filter(filter string) ApiPrintSharesListRefAllowedGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiPrintSharesListRefAllowedGroupsRequest) Count(count bool) ApiPrintSharesListRefAllowedGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiPrintSharesListRefAllowedGroupsRequest) Orderby(orderby []string) ApiPrintSharesListRefAllowedGroupsRequest {
	r.orderby = &orderby
	return r
}

func (r ApiPrintSharesListRefAllowedGroupsRequest) Execute() (CollectionOfLinksOfGroup, *_nethttp.Response, error) {
	return r.ApiService.PrintSharesListRefAllowedGroupsExecute(r)
}

/*
PrintSharesListRefAllowedGroups Get ref of allowedGroups from print

The groups whose users have access to print using the printer.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printerShareId key: id of printerShare
 @return ApiPrintSharesListRefAllowedGroupsRequest
*/
func (a *PrintPrinterShareApiService) PrintSharesListRefAllowedGroups(ctx _context.Context, printerShareId string) ApiPrintSharesListRefAllowedGroupsRequest {
	return ApiPrintSharesListRefAllowedGroupsRequest{
		ApiService: a,
		ctx: ctx,
		printerShareId: printerShareId,
	}
}

// Execute executes the request
//  @return CollectionOfLinksOfGroup
func (a *PrintPrinterShareApiService) PrintSharesListRefAllowedGroupsExecute(r ApiPrintSharesListRefAllowedGroupsRequest) (CollectionOfLinksOfGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfLinksOfGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrinterShareApiService.PrintSharesListRefAllowedGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/shares/{printerShare-id}/allowedGroups/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"printerShare-id"+"}", _neturl.PathEscape(parameterToString(r.printerShareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintSharesListRefAllowedUsersRequest struct {
	ctx _context.Context
	ApiService *PrintPrinterShareApiService
	printerShareId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
}

// Show only the first n items
func (r ApiPrintSharesListRefAllowedUsersRequest) Top(top int32) ApiPrintSharesListRefAllowedUsersRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiPrintSharesListRefAllowedUsersRequest) Skip(skip int32) ApiPrintSharesListRefAllowedUsersRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiPrintSharesListRefAllowedUsersRequest) Search(search string) ApiPrintSharesListRefAllowedUsersRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiPrintSharesListRefAllowedUsersRequest) Filter(filter string) ApiPrintSharesListRefAllowedUsersRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiPrintSharesListRefAllowedUsersRequest) Count(count bool) ApiPrintSharesListRefAllowedUsersRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiPrintSharesListRefAllowedUsersRequest) Orderby(orderby []string) ApiPrintSharesListRefAllowedUsersRequest {
	r.orderby = &orderby
	return r
}

func (r ApiPrintSharesListRefAllowedUsersRequest) Execute() (CollectionOfLinksOfUser, *_nethttp.Response, error) {
	return r.ApiService.PrintSharesListRefAllowedUsersExecute(r)
}

/*
PrintSharesListRefAllowedUsers Get ref of allowedUsers from print

The users who have access to print using the printer.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printerShareId key: id of printerShare
 @return ApiPrintSharesListRefAllowedUsersRequest
*/
func (a *PrintPrinterShareApiService) PrintSharesListRefAllowedUsers(ctx _context.Context, printerShareId string) ApiPrintSharesListRefAllowedUsersRequest {
	return ApiPrintSharesListRefAllowedUsersRequest{
		ApiService: a,
		ctx: ctx,
		printerShareId: printerShareId,
	}
}

// Execute executes the request
//  @return CollectionOfLinksOfUser
func (a *PrintPrinterShareApiService) PrintSharesListRefAllowedUsersExecute(r ApiPrintSharesListRefAllowedUsersRequest) (CollectionOfLinksOfUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfLinksOfUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrinterShareApiService.PrintSharesListRefAllowedUsers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/shares/{printerShare-id}/allowedUsers/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"printerShare-id"+"}", _neturl.PathEscape(parameterToString(r.printerShareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintSharesUpdateRefPrinterRequest struct {
	ctx _context.Context
	ApiService *PrintPrinterShareApiService
	printerShareId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref values
func (r ApiPrintSharesUpdateRefPrinterRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiPrintSharesUpdateRefPrinterRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiPrintSharesUpdateRefPrinterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintSharesUpdateRefPrinterExecute(r)
}

/*
PrintSharesUpdateRefPrinter Update the ref of navigation property printer in print

The printer that this printer share is related to.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printerShareId key: id of printerShare
 @return ApiPrintSharesUpdateRefPrinterRequest
*/
func (a *PrintPrinterShareApiService) PrintSharesUpdateRefPrinter(ctx _context.Context, printerShareId string) ApiPrintSharesUpdateRefPrinterRequest {
	return ApiPrintSharesUpdateRefPrinterRequest{
		ApiService: a,
		ctx: ctx,
		printerShareId: printerShareId,
	}
}

// Execute executes the request
func (a *PrintPrinterShareApiService) PrintSharesUpdateRefPrinterExecute(r ApiPrintSharesUpdateRefPrinterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrinterShareApiService.PrintSharesUpdateRefPrinter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/shares/{printerShare-id}/printer/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"printerShare-id"+"}", _neturl.PathEscape(parameterToString(r.printerShareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrintUpdateSharesRequest struct {
	ctx _context.Context
	ApiService *PrintPrinterShareApiService
	printerShareId string
	microsoftGraphPrinterShare *MicrosoftGraphPrinterShare
}

// New navigation property values
func (r ApiPrintUpdateSharesRequest) MicrosoftGraphPrinterShare(microsoftGraphPrinterShare MicrosoftGraphPrinterShare) ApiPrintUpdateSharesRequest {
	r.microsoftGraphPrinterShare = &microsoftGraphPrinterShare
	return r
}

func (r ApiPrintUpdateSharesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintUpdateSharesExecute(r)
}

/*
PrintUpdateShares Update the navigation property shares in print

The list of printer shares registered in the tenant.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printerShareId key: id of printerShare
 @return ApiPrintUpdateSharesRequest
*/
func (a *PrintPrinterShareApiService) PrintUpdateShares(ctx _context.Context, printerShareId string) ApiPrintUpdateSharesRequest {
	return ApiPrintUpdateSharesRequest{
		ApiService: a,
		ctx: ctx,
		printerShareId: printerShareId,
	}
}

// Execute executes the request
func (a *PrintPrinterShareApiService) PrintUpdateSharesExecute(r ApiPrintUpdateSharesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrinterShareApiService.PrintUpdateShares")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/shares/{printerShare-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printerShare-id"+"}", _neturl.PathEscape(parameterToString(r.printerShareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrinterShare == nil {
		return nil, reportError("microsoftGraphPrinterShare is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrinterShare
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
