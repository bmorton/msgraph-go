/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphPostType the model 'MicrosoftGraphPostType'
type MicrosoftGraphPostType string

// List of microsoft.graph.postType
const (
	REGULAR MicrosoftGraphPostType = "regular"
	QUICK MicrosoftGraphPostType = "quick"
	STRATEGIC MicrosoftGraphPostType = "strategic"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphPostType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphPostType enum
var AllowedMicrosoftGraphPostTypeEnumValues = []MicrosoftGraphPostType{
	"regular",
	"quick",
	"strategic",
	"unknownFutureValue",
}

func (v *MicrosoftGraphPostType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphPostType(value)
	for _, existing := range AllowedMicrosoftGraphPostTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphPostType", value)
}

// NewMicrosoftGraphPostTypeFromValue returns a pointer to a valid MicrosoftGraphPostType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphPostTypeFromValue(v string) (*MicrosoftGraphPostType, error) {
	ev := MicrosoftGraphPostType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphPostType: valid values are %v", v, AllowedMicrosoftGraphPostTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphPostType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphPostTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.postType value
func (v MicrosoftGraphPostType) Ptr() *MicrosoftGraphPostType {
	return &v
}

type NullableMicrosoftGraphPostType struct {
	value *MicrosoftGraphPostType
	isSet bool
}

func (v NullableMicrosoftGraphPostType) Get() *MicrosoftGraphPostType {
	return v.value
}

func (v *NullableMicrosoftGraphPostType) Set(val *MicrosoftGraphPostType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPostType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPostType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPostType(val *MicrosoftGraphPostType) *NullableMicrosoftGraphPostType {
	return &NullableMicrosoftGraphPostType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPostType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPostType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

