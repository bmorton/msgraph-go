/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AdminServiceAnnouncementApiService AdminServiceAnnouncementApi service
type AdminServiceAnnouncementApiService service

type ApiAdminDeleteServiceAnnouncementRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	ifMatch *string
}

// ETag
func (r ApiAdminDeleteServiceAnnouncementRequest) IfMatch(ifMatch string) ApiAdminDeleteServiceAnnouncementRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiAdminDeleteServiceAnnouncementRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AdminDeleteServiceAnnouncementExecute(r)
}

/*
AdminDeleteServiceAnnouncement Delete navigation property serviceAnnouncement for admin

A container for service communications resources. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminDeleteServiceAnnouncementRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminDeleteServiceAnnouncement(ctx _context.Context) ApiAdminDeleteServiceAnnouncementRequest {
	return ApiAdminDeleteServiceAnnouncementRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AdminServiceAnnouncementApiService) AdminDeleteServiceAnnouncementExecute(r ApiAdminDeleteServiceAnnouncementRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminDeleteServiceAnnouncement")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminGetServiceAnnouncementRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiAdminGetServiceAnnouncementRequest) Select_(select_ []string) ApiAdminGetServiceAnnouncementRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAdminGetServiceAnnouncementRequest) Expand(expand []string) ApiAdminGetServiceAnnouncementRequest {
	r.expand = &expand
	return r
}

func (r ApiAdminGetServiceAnnouncementRequest) Execute() (MicrosoftGraphServiceAnnouncement, *_nethttp.Response, error) {
	return r.ApiService.AdminGetServiceAnnouncementExecute(r)
}

/*
AdminGetServiceAnnouncement Get serviceAnnouncement from admin

A container for service communications resources. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminGetServiceAnnouncementRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminGetServiceAnnouncement(ctx _context.Context) ApiAdminGetServiceAnnouncementRequest {
	return ApiAdminGetServiceAnnouncementRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphServiceAnnouncement
func (a *AdminServiceAnnouncementApiService) AdminGetServiceAnnouncementExecute(r ApiAdminGetServiceAnnouncementRequest) (MicrosoftGraphServiceAnnouncement, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphServiceAnnouncement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminGetServiceAnnouncement")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementCreateHealthOverviewsRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	microsoftGraphServiceHealth *MicrosoftGraphServiceHealth
}

// New navigation property
func (r ApiAdminServiceAnnouncementCreateHealthOverviewsRequest) MicrosoftGraphServiceHealth(microsoftGraphServiceHealth MicrosoftGraphServiceHealth) ApiAdminServiceAnnouncementCreateHealthOverviewsRequest {
	r.microsoftGraphServiceHealth = &microsoftGraphServiceHealth
	return r
}

func (r ApiAdminServiceAnnouncementCreateHealthOverviewsRequest) Execute() (MicrosoftGraphServiceHealth, *_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementCreateHealthOverviewsExecute(r)
}

/*
AdminServiceAnnouncementCreateHealthOverviews Create new navigation property to healthOverviews for admin

A collection of service health information for tenant. This property is a contained navigation property, it is nullable and readonly.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminServiceAnnouncementCreateHealthOverviewsRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementCreateHealthOverviews(ctx _context.Context) ApiAdminServiceAnnouncementCreateHealthOverviewsRequest {
	return ApiAdminServiceAnnouncementCreateHealthOverviewsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphServiceHealth
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementCreateHealthOverviewsExecute(r ApiAdminServiceAnnouncementCreateHealthOverviewsRequest) (MicrosoftGraphServiceHealth, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphServiceHealth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementCreateHealthOverviews")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/healthOverviews"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphServiceHealth == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphServiceHealth is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphServiceHealth
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementCreateIssuesRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	microsoftGraphServiceHealthIssue *MicrosoftGraphServiceHealthIssue
}

// New navigation property
func (r ApiAdminServiceAnnouncementCreateIssuesRequest) MicrosoftGraphServiceHealthIssue(microsoftGraphServiceHealthIssue MicrosoftGraphServiceHealthIssue) ApiAdminServiceAnnouncementCreateIssuesRequest {
	r.microsoftGraphServiceHealthIssue = &microsoftGraphServiceHealthIssue
	return r
}

func (r ApiAdminServiceAnnouncementCreateIssuesRequest) Execute() (MicrosoftGraphServiceHealthIssue, *_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementCreateIssuesExecute(r)
}

/*
AdminServiceAnnouncementCreateIssues Create new navigation property to issues for admin

A collection of service issues for tenant. This property is a contained navigation property, it is nullable and readonly.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminServiceAnnouncementCreateIssuesRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementCreateIssues(ctx _context.Context) ApiAdminServiceAnnouncementCreateIssuesRequest {
	return ApiAdminServiceAnnouncementCreateIssuesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphServiceHealthIssue
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementCreateIssuesExecute(r ApiAdminServiceAnnouncementCreateIssuesRequest) (MicrosoftGraphServiceHealthIssue, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphServiceHealthIssue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementCreateIssues")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/issues"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphServiceHealthIssue == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphServiceHealthIssue is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphServiceHealthIssue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementCreateMessagesRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	microsoftGraphServiceUpdateMessage *MicrosoftGraphServiceUpdateMessage
}

// New navigation property
func (r ApiAdminServiceAnnouncementCreateMessagesRequest) MicrosoftGraphServiceUpdateMessage(microsoftGraphServiceUpdateMessage MicrosoftGraphServiceUpdateMessage) ApiAdminServiceAnnouncementCreateMessagesRequest {
	r.microsoftGraphServiceUpdateMessage = &microsoftGraphServiceUpdateMessage
	return r
}

func (r ApiAdminServiceAnnouncementCreateMessagesRequest) Execute() (MicrosoftGraphServiceUpdateMessage, *_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementCreateMessagesExecute(r)
}

/*
AdminServiceAnnouncementCreateMessages Create new navigation property to messages for admin

A collection of service messages for tenant. This property is a contained navigation property, it is nullable and readonly.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminServiceAnnouncementCreateMessagesRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementCreateMessages(ctx _context.Context) ApiAdminServiceAnnouncementCreateMessagesRequest {
	return ApiAdminServiceAnnouncementCreateMessagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphServiceUpdateMessage
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementCreateMessagesExecute(r ApiAdminServiceAnnouncementCreateMessagesRequest) (MicrosoftGraphServiceUpdateMessage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphServiceUpdateMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementCreateMessages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/messages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphServiceUpdateMessage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphServiceUpdateMessage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphServiceUpdateMessage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementDeleteHealthOverviewsRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	serviceHealthId string
	ifMatch *string
}

// ETag
func (r ApiAdminServiceAnnouncementDeleteHealthOverviewsRequest) IfMatch(ifMatch string) ApiAdminServiceAnnouncementDeleteHealthOverviewsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiAdminServiceAnnouncementDeleteHealthOverviewsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementDeleteHealthOverviewsExecute(r)
}

/*
AdminServiceAnnouncementDeleteHealthOverviews Delete navigation property healthOverviews for admin

A collection of service health information for tenant. This property is a contained navigation property, it is nullable and readonly.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceHealthId key: id of serviceHealth
 @return ApiAdminServiceAnnouncementDeleteHealthOverviewsRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementDeleteHealthOverviews(ctx _context.Context, serviceHealthId string) ApiAdminServiceAnnouncementDeleteHealthOverviewsRequest {
	return ApiAdminServiceAnnouncementDeleteHealthOverviewsRequest{
		ApiService: a,
		ctx: ctx,
		serviceHealthId: serviceHealthId,
	}
}

// Execute executes the request
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementDeleteHealthOverviewsExecute(r ApiAdminServiceAnnouncementDeleteHealthOverviewsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementDeleteHealthOverviews")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/healthOverviews/{serviceHealth-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceHealth-id"+"}", _neturl.PathEscape(parameterToString(r.serviceHealthId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementDeleteIssuesRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	serviceHealthIssueId string
	ifMatch *string
}

// ETag
func (r ApiAdminServiceAnnouncementDeleteIssuesRequest) IfMatch(ifMatch string) ApiAdminServiceAnnouncementDeleteIssuesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiAdminServiceAnnouncementDeleteIssuesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementDeleteIssuesExecute(r)
}

/*
AdminServiceAnnouncementDeleteIssues Delete navigation property issues for admin

A collection of service issues for tenant. This property is a contained navigation property, it is nullable and readonly.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceHealthIssueId key: id of serviceHealthIssue
 @return ApiAdminServiceAnnouncementDeleteIssuesRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementDeleteIssues(ctx _context.Context, serviceHealthIssueId string) ApiAdminServiceAnnouncementDeleteIssuesRequest {
	return ApiAdminServiceAnnouncementDeleteIssuesRequest{
		ApiService: a,
		ctx: ctx,
		serviceHealthIssueId: serviceHealthIssueId,
	}
}

// Execute executes the request
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementDeleteIssuesExecute(r ApiAdminServiceAnnouncementDeleteIssuesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementDeleteIssues")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/issues/{serviceHealthIssue-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceHealthIssue-id"+"}", _neturl.PathEscape(parameterToString(r.serviceHealthIssueId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementDeleteMessagesRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	serviceUpdateMessageId string
	ifMatch *string
}

// ETag
func (r ApiAdminServiceAnnouncementDeleteMessagesRequest) IfMatch(ifMatch string) ApiAdminServiceAnnouncementDeleteMessagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiAdminServiceAnnouncementDeleteMessagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementDeleteMessagesExecute(r)
}

/*
AdminServiceAnnouncementDeleteMessages Delete navigation property messages for admin

A collection of service messages for tenant. This property is a contained navigation property, it is nullable and readonly.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceUpdateMessageId key: id of serviceUpdateMessage
 @return ApiAdminServiceAnnouncementDeleteMessagesRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementDeleteMessages(ctx _context.Context, serviceUpdateMessageId string) ApiAdminServiceAnnouncementDeleteMessagesRequest {
	return ApiAdminServiceAnnouncementDeleteMessagesRequest{
		ApiService: a,
		ctx: ctx,
		serviceUpdateMessageId: serviceUpdateMessageId,
	}
}

// Execute executes the request
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementDeleteMessagesExecute(r ApiAdminServiceAnnouncementDeleteMessagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementDeleteMessages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/messages/{serviceUpdateMessage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceUpdateMessage-id"+"}", _neturl.PathEscape(parameterToString(r.serviceUpdateMessageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementGetHealthOverviewsRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	serviceHealthId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiAdminServiceAnnouncementGetHealthOverviewsRequest) Select_(select_ []string) ApiAdminServiceAnnouncementGetHealthOverviewsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAdminServiceAnnouncementGetHealthOverviewsRequest) Expand(expand []string) ApiAdminServiceAnnouncementGetHealthOverviewsRequest {
	r.expand = &expand
	return r
}

func (r ApiAdminServiceAnnouncementGetHealthOverviewsRequest) Execute() (MicrosoftGraphServiceHealth, *_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementGetHealthOverviewsExecute(r)
}

/*
AdminServiceAnnouncementGetHealthOverviews Get healthOverviews from admin

A collection of service health information for tenant. This property is a contained navigation property, it is nullable and readonly.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceHealthId key: id of serviceHealth
 @return ApiAdminServiceAnnouncementGetHealthOverviewsRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementGetHealthOverviews(ctx _context.Context, serviceHealthId string) ApiAdminServiceAnnouncementGetHealthOverviewsRequest {
	return ApiAdminServiceAnnouncementGetHealthOverviewsRequest{
		ApiService: a,
		ctx: ctx,
		serviceHealthId: serviceHealthId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphServiceHealth
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementGetHealthOverviewsExecute(r ApiAdminServiceAnnouncementGetHealthOverviewsRequest) (MicrosoftGraphServiceHealth, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphServiceHealth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementGetHealthOverviews")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/healthOverviews/{serviceHealth-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceHealth-id"+"}", _neturl.PathEscape(parameterToString(r.serviceHealthId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementGetIssuesRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	serviceHealthIssueId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiAdminServiceAnnouncementGetIssuesRequest) Select_(select_ []string) ApiAdminServiceAnnouncementGetIssuesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAdminServiceAnnouncementGetIssuesRequest) Expand(expand []string) ApiAdminServiceAnnouncementGetIssuesRequest {
	r.expand = &expand
	return r
}

func (r ApiAdminServiceAnnouncementGetIssuesRequest) Execute() (MicrosoftGraphServiceHealthIssue, *_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementGetIssuesExecute(r)
}

/*
AdminServiceAnnouncementGetIssues Get issues from admin

A collection of service issues for tenant. This property is a contained navigation property, it is nullable and readonly.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceHealthIssueId key: id of serviceHealthIssue
 @return ApiAdminServiceAnnouncementGetIssuesRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementGetIssues(ctx _context.Context, serviceHealthIssueId string) ApiAdminServiceAnnouncementGetIssuesRequest {
	return ApiAdminServiceAnnouncementGetIssuesRequest{
		ApiService: a,
		ctx: ctx,
		serviceHealthIssueId: serviceHealthIssueId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphServiceHealthIssue
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementGetIssuesExecute(r ApiAdminServiceAnnouncementGetIssuesRequest) (MicrosoftGraphServiceHealthIssue, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphServiceHealthIssue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementGetIssues")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/issues/{serviceHealthIssue-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceHealthIssue-id"+"}", _neturl.PathEscape(parameterToString(r.serviceHealthIssueId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementGetMessagesRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	serviceUpdateMessageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiAdminServiceAnnouncementGetMessagesRequest) Select_(select_ []string) ApiAdminServiceAnnouncementGetMessagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAdminServiceAnnouncementGetMessagesRequest) Expand(expand []string) ApiAdminServiceAnnouncementGetMessagesRequest {
	r.expand = &expand
	return r
}

func (r ApiAdminServiceAnnouncementGetMessagesRequest) Execute() (MicrosoftGraphServiceUpdateMessage, *_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementGetMessagesExecute(r)
}

/*
AdminServiceAnnouncementGetMessages Get messages from admin

A collection of service messages for tenant. This property is a contained navigation property, it is nullable and readonly.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceUpdateMessageId key: id of serviceUpdateMessage
 @return ApiAdminServiceAnnouncementGetMessagesRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementGetMessages(ctx _context.Context, serviceUpdateMessageId string) ApiAdminServiceAnnouncementGetMessagesRequest {
	return ApiAdminServiceAnnouncementGetMessagesRequest{
		ApiService: a,
		ctx: ctx,
		serviceUpdateMessageId: serviceUpdateMessageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphServiceUpdateMessage
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementGetMessagesExecute(r ApiAdminServiceAnnouncementGetMessagesRequest) (MicrosoftGraphServiceUpdateMessage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphServiceUpdateMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementGetMessages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/messages/{serviceUpdateMessage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceUpdateMessage-id"+"}", _neturl.PathEscape(parameterToString(r.serviceUpdateMessageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementHealthOverviewsCreateIssuesRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	serviceHealthId string
	microsoftGraphServiceHealthIssue *MicrosoftGraphServiceHealthIssue
}

// New navigation property
func (r ApiAdminServiceAnnouncementHealthOverviewsCreateIssuesRequest) MicrosoftGraphServiceHealthIssue(microsoftGraphServiceHealthIssue MicrosoftGraphServiceHealthIssue) ApiAdminServiceAnnouncementHealthOverviewsCreateIssuesRequest {
	r.microsoftGraphServiceHealthIssue = &microsoftGraphServiceHealthIssue
	return r
}

func (r ApiAdminServiceAnnouncementHealthOverviewsCreateIssuesRequest) Execute() (MicrosoftGraphServiceHealthIssue, *_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementHealthOverviewsCreateIssuesExecute(r)
}

/*
AdminServiceAnnouncementHealthOverviewsCreateIssues Create new navigation property to issues for admin

A collection of issues happened on the service, with detailed information for each issue.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceHealthId key: id of serviceHealth
 @return ApiAdminServiceAnnouncementHealthOverviewsCreateIssuesRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementHealthOverviewsCreateIssues(ctx _context.Context, serviceHealthId string) ApiAdminServiceAnnouncementHealthOverviewsCreateIssuesRequest {
	return ApiAdminServiceAnnouncementHealthOverviewsCreateIssuesRequest{
		ApiService: a,
		ctx: ctx,
		serviceHealthId: serviceHealthId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphServiceHealthIssue
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementHealthOverviewsCreateIssuesExecute(r ApiAdminServiceAnnouncementHealthOverviewsCreateIssuesRequest) (MicrosoftGraphServiceHealthIssue, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphServiceHealthIssue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementHealthOverviewsCreateIssues")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/healthOverviews/{serviceHealth-id}/issues"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceHealth-id"+"}", _neturl.PathEscape(parameterToString(r.serviceHealthId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphServiceHealthIssue == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphServiceHealthIssue is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphServiceHealthIssue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementHealthOverviewsDeleteIssuesRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	serviceHealthId string
	serviceHealthIssueId string
	ifMatch *string
}

// ETag
func (r ApiAdminServiceAnnouncementHealthOverviewsDeleteIssuesRequest) IfMatch(ifMatch string) ApiAdminServiceAnnouncementHealthOverviewsDeleteIssuesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiAdminServiceAnnouncementHealthOverviewsDeleteIssuesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementHealthOverviewsDeleteIssuesExecute(r)
}

/*
AdminServiceAnnouncementHealthOverviewsDeleteIssues Delete navigation property issues for admin

A collection of issues happened on the service, with detailed information for each issue.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceHealthId key: id of serviceHealth
 @param serviceHealthIssueId key: id of serviceHealthIssue
 @return ApiAdminServiceAnnouncementHealthOverviewsDeleteIssuesRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementHealthOverviewsDeleteIssues(ctx _context.Context, serviceHealthId string, serviceHealthIssueId string) ApiAdminServiceAnnouncementHealthOverviewsDeleteIssuesRequest {
	return ApiAdminServiceAnnouncementHealthOverviewsDeleteIssuesRequest{
		ApiService: a,
		ctx: ctx,
		serviceHealthId: serviceHealthId,
		serviceHealthIssueId: serviceHealthIssueId,
	}
}

// Execute executes the request
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementHealthOverviewsDeleteIssuesExecute(r ApiAdminServiceAnnouncementHealthOverviewsDeleteIssuesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementHealthOverviewsDeleteIssues")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/healthOverviews/{serviceHealth-id}/issues/{serviceHealthIssue-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceHealth-id"+"}", _neturl.PathEscape(parameterToString(r.serviceHealthId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceHealthIssue-id"+"}", _neturl.PathEscape(parameterToString(r.serviceHealthIssueId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementHealthOverviewsGetIssuesRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	serviceHealthId string
	serviceHealthIssueId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiAdminServiceAnnouncementHealthOverviewsGetIssuesRequest) Select_(select_ []string) ApiAdminServiceAnnouncementHealthOverviewsGetIssuesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAdminServiceAnnouncementHealthOverviewsGetIssuesRequest) Expand(expand []string) ApiAdminServiceAnnouncementHealthOverviewsGetIssuesRequest {
	r.expand = &expand
	return r
}

func (r ApiAdminServiceAnnouncementHealthOverviewsGetIssuesRequest) Execute() (MicrosoftGraphServiceHealthIssue, *_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementHealthOverviewsGetIssuesExecute(r)
}

/*
AdminServiceAnnouncementHealthOverviewsGetIssues Get issues from admin

A collection of issues happened on the service, with detailed information for each issue.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceHealthId key: id of serviceHealth
 @param serviceHealthIssueId key: id of serviceHealthIssue
 @return ApiAdminServiceAnnouncementHealthOverviewsGetIssuesRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementHealthOverviewsGetIssues(ctx _context.Context, serviceHealthId string, serviceHealthIssueId string) ApiAdminServiceAnnouncementHealthOverviewsGetIssuesRequest {
	return ApiAdminServiceAnnouncementHealthOverviewsGetIssuesRequest{
		ApiService: a,
		ctx: ctx,
		serviceHealthId: serviceHealthId,
		serviceHealthIssueId: serviceHealthIssueId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphServiceHealthIssue
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementHealthOverviewsGetIssuesExecute(r ApiAdminServiceAnnouncementHealthOverviewsGetIssuesRequest) (MicrosoftGraphServiceHealthIssue, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphServiceHealthIssue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementHealthOverviewsGetIssues")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/healthOverviews/{serviceHealth-id}/issues/{serviceHealthIssue-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceHealth-id"+"}", _neturl.PathEscape(parameterToString(r.serviceHealthId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceHealthIssue-id"+"}", _neturl.PathEscape(parameterToString(r.serviceHealthIssueId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	serviceHealthId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest) Top(top int32) ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest) Skip(skip int32) ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest) Search(search string) ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest) Filter(filter string) ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest) Count(count bool) ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest) Orderby(orderby []string) ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest) Select_(select_ []string) ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest) Expand(expand []string) ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest {
	r.expand = &expand
	return r
}

func (r ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest) Execute() (CollectionOfServiceHealthIssue, *_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementHealthOverviewsListIssuesExecute(r)
}

/*
AdminServiceAnnouncementHealthOverviewsListIssues Get issues from admin

A collection of issues happened on the service, with detailed information for each issue.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceHealthId key: id of serviceHealth
 @return ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementHealthOverviewsListIssues(ctx _context.Context, serviceHealthId string) ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest {
	return ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest{
		ApiService: a,
		ctx: ctx,
		serviceHealthId: serviceHealthId,
	}
}

// Execute executes the request
//  @return CollectionOfServiceHealthIssue
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementHealthOverviewsListIssuesExecute(r ApiAdminServiceAnnouncementHealthOverviewsListIssuesRequest) (CollectionOfServiceHealthIssue, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfServiceHealthIssue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementHealthOverviewsListIssues")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/healthOverviews/{serviceHealth-id}/issues"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceHealth-id"+"}", _neturl.PathEscape(parameterToString(r.serviceHealthId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementHealthOverviewsUpdateIssuesRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	serviceHealthId string
	serviceHealthIssueId string
	microsoftGraphServiceHealthIssue *MicrosoftGraphServiceHealthIssue
}

// New navigation property values
func (r ApiAdminServiceAnnouncementHealthOverviewsUpdateIssuesRequest) MicrosoftGraphServiceHealthIssue(microsoftGraphServiceHealthIssue MicrosoftGraphServiceHealthIssue) ApiAdminServiceAnnouncementHealthOverviewsUpdateIssuesRequest {
	r.microsoftGraphServiceHealthIssue = &microsoftGraphServiceHealthIssue
	return r
}

func (r ApiAdminServiceAnnouncementHealthOverviewsUpdateIssuesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementHealthOverviewsUpdateIssuesExecute(r)
}

/*
AdminServiceAnnouncementHealthOverviewsUpdateIssues Update the navigation property issues in admin

A collection of issues happened on the service, with detailed information for each issue.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceHealthId key: id of serviceHealth
 @param serviceHealthIssueId key: id of serviceHealthIssue
 @return ApiAdminServiceAnnouncementHealthOverviewsUpdateIssuesRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementHealthOverviewsUpdateIssues(ctx _context.Context, serviceHealthId string, serviceHealthIssueId string) ApiAdminServiceAnnouncementHealthOverviewsUpdateIssuesRequest {
	return ApiAdminServiceAnnouncementHealthOverviewsUpdateIssuesRequest{
		ApiService: a,
		ctx: ctx,
		serviceHealthId: serviceHealthId,
		serviceHealthIssueId: serviceHealthIssueId,
	}
}

// Execute executes the request
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementHealthOverviewsUpdateIssuesExecute(r ApiAdminServiceAnnouncementHealthOverviewsUpdateIssuesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementHealthOverviewsUpdateIssues")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/healthOverviews/{serviceHealth-id}/issues/{serviceHealthIssue-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceHealth-id"+"}", _neturl.PathEscape(parameterToString(r.serviceHealthId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceHealthIssue-id"+"}", _neturl.PathEscape(parameterToString(r.serviceHealthIssueId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphServiceHealthIssue == nil {
		return nil, reportError("microsoftGraphServiceHealthIssue is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphServiceHealthIssue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementListHealthOverviewsRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiAdminServiceAnnouncementListHealthOverviewsRequest) Top(top int32) ApiAdminServiceAnnouncementListHealthOverviewsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiAdminServiceAnnouncementListHealthOverviewsRequest) Skip(skip int32) ApiAdminServiceAnnouncementListHealthOverviewsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiAdminServiceAnnouncementListHealthOverviewsRequest) Search(search string) ApiAdminServiceAnnouncementListHealthOverviewsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiAdminServiceAnnouncementListHealthOverviewsRequest) Filter(filter string) ApiAdminServiceAnnouncementListHealthOverviewsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiAdminServiceAnnouncementListHealthOverviewsRequest) Count(count bool) ApiAdminServiceAnnouncementListHealthOverviewsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiAdminServiceAnnouncementListHealthOverviewsRequest) Orderby(orderby []string) ApiAdminServiceAnnouncementListHealthOverviewsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiAdminServiceAnnouncementListHealthOverviewsRequest) Select_(select_ []string) ApiAdminServiceAnnouncementListHealthOverviewsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAdminServiceAnnouncementListHealthOverviewsRequest) Expand(expand []string) ApiAdminServiceAnnouncementListHealthOverviewsRequest {
	r.expand = &expand
	return r
}

func (r ApiAdminServiceAnnouncementListHealthOverviewsRequest) Execute() (CollectionOfServiceHealth, *_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementListHealthOverviewsExecute(r)
}

/*
AdminServiceAnnouncementListHealthOverviews Get healthOverviews from admin

A collection of service health information for tenant. This property is a contained navigation property, it is nullable and readonly.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminServiceAnnouncementListHealthOverviewsRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementListHealthOverviews(ctx _context.Context) ApiAdminServiceAnnouncementListHealthOverviewsRequest {
	return ApiAdminServiceAnnouncementListHealthOverviewsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfServiceHealth
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementListHealthOverviewsExecute(r ApiAdminServiceAnnouncementListHealthOverviewsRequest) (CollectionOfServiceHealth, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfServiceHealth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementListHealthOverviews")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/healthOverviews"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementListIssuesRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiAdminServiceAnnouncementListIssuesRequest) Top(top int32) ApiAdminServiceAnnouncementListIssuesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiAdminServiceAnnouncementListIssuesRequest) Skip(skip int32) ApiAdminServiceAnnouncementListIssuesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiAdminServiceAnnouncementListIssuesRequest) Search(search string) ApiAdminServiceAnnouncementListIssuesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiAdminServiceAnnouncementListIssuesRequest) Filter(filter string) ApiAdminServiceAnnouncementListIssuesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiAdminServiceAnnouncementListIssuesRequest) Count(count bool) ApiAdminServiceAnnouncementListIssuesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiAdminServiceAnnouncementListIssuesRequest) Orderby(orderby []string) ApiAdminServiceAnnouncementListIssuesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiAdminServiceAnnouncementListIssuesRequest) Select_(select_ []string) ApiAdminServiceAnnouncementListIssuesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAdminServiceAnnouncementListIssuesRequest) Expand(expand []string) ApiAdminServiceAnnouncementListIssuesRequest {
	r.expand = &expand
	return r
}

func (r ApiAdminServiceAnnouncementListIssuesRequest) Execute() (CollectionOfServiceHealthIssue, *_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementListIssuesExecute(r)
}

/*
AdminServiceAnnouncementListIssues Get issues from admin

A collection of service issues for tenant. This property is a contained navigation property, it is nullable and readonly.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminServiceAnnouncementListIssuesRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementListIssues(ctx _context.Context) ApiAdminServiceAnnouncementListIssuesRequest {
	return ApiAdminServiceAnnouncementListIssuesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfServiceHealthIssue
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementListIssuesExecute(r ApiAdminServiceAnnouncementListIssuesRequest) (CollectionOfServiceHealthIssue, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfServiceHealthIssue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementListIssues")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/issues"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementListMessagesRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiAdminServiceAnnouncementListMessagesRequest) Top(top int32) ApiAdminServiceAnnouncementListMessagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiAdminServiceAnnouncementListMessagesRequest) Skip(skip int32) ApiAdminServiceAnnouncementListMessagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiAdminServiceAnnouncementListMessagesRequest) Search(search string) ApiAdminServiceAnnouncementListMessagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiAdminServiceAnnouncementListMessagesRequest) Filter(filter string) ApiAdminServiceAnnouncementListMessagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiAdminServiceAnnouncementListMessagesRequest) Count(count bool) ApiAdminServiceAnnouncementListMessagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiAdminServiceAnnouncementListMessagesRequest) Orderby(orderby []string) ApiAdminServiceAnnouncementListMessagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiAdminServiceAnnouncementListMessagesRequest) Select_(select_ []string) ApiAdminServiceAnnouncementListMessagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAdminServiceAnnouncementListMessagesRequest) Expand(expand []string) ApiAdminServiceAnnouncementListMessagesRequest {
	r.expand = &expand
	return r
}

func (r ApiAdminServiceAnnouncementListMessagesRequest) Execute() (CollectionOfServiceUpdateMessage, *_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementListMessagesExecute(r)
}

/*
AdminServiceAnnouncementListMessages Get messages from admin

A collection of service messages for tenant. This property is a contained navigation property, it is nullable and readonly.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminServiceAnnouncementListMessagesRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementListMessages(ctx _context.Context) ApiAdminServiceAnnouncementListMessagesRequest {
	return ApiAdminServiceAnnouncementListMessagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfServiceUpdateMessage
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementListMessagesExecute(r ApiAdminServiceAnnouncementListMessagesRequest) (CollectionOfServiceUpdateMessage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfServiceUpdateMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementListMessages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/messages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementUpdateHealthOverviewsRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	serviceHealthId string
	microsoftGraphServiceHealth *MicrosoftGraphServiceHealth
}

// New navigation property values
func (r ApiAdminServiceAnnouncementUpdateHealthOverviewsRequest) MicrosoftGraphServiceHealth(microsoftGraphServiceHealth MicrosoftGraphServiceHealth) ApiAdminServiceAnnouncementUpdateHealthOverviewsRequest {
	r.microsoftGraphServiceHealth = &microsoftGraphServiceHealth
	return r
}

func (r ApiAdminServiceAnnouncementUpdateHealthOverviewsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementUpdateHealthOverviewsExecute(r)
}

/*
AdminServiceAnnouncementUpdateHealthOverviews Update the navigation property healthOverviews in admin

A collection of service health information for tenant. This property is a contained navigation property, it is nullable and readonly.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceHealthId key: id of serviceHealth
 @return ApiAdminServiceAnnouncementUpdateHealthOverviewsRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementUpdateHealthOverviews(ctx _context.Context, serviceHealthId string) ApiAdminServiceAnnouncementUpdateHealthOverviewsRequest {
	return ApiAdminServiceAnnouncementUpdateHealthOverviewsRequest{
		ApiService: a,
		ctx: ctx,
		serviceHealthId: serviceHealthId,
	}
}

// Execute executes the request
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementUpdateHealthOverviewsExecute(r ApiAdminServiceAnnouncementUpdateHealthOverviewsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementUpdateHealthOverviews")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/healthOverviews/{serviceHealth-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceHealth-id"+"}", _neturl.PathEscape(parameterToString(r.serviceHealthId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphServiceHealth == nil {
		return nil, reportError("microsoftGraphServiceHealth is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphServiceHealth
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementUpdateIssuesRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	serviceHealthIssueId string
	microsoftGraphServiceHealthIssue *MicrosoftGraphServiceHealthIssue
}

// New navigation property values
func (r ApiAdminServiceAnnouncementUpdateIssuesRequest) MicrosoftGraphServiceHealthIssue(microsoftGraphServiceHealthIssue MicrosoftGraphServiceHealthIssue) ApiAdminServiceAnnouncementUpdateIssuesRequest {
	r.microsoftGraphServiceHealthIssue = &microsoftGraphServiceHealthIssue
	return r
}

func (r ApiAdminServiceAnnouncementUpdateIssuesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementUpdateIssuesExecute(r)
}

/*
AdminServiceAnnouncementUpdateIssues Update the navigation property issues in admin

A collection of service issues for tenant. This property is a contained navigation property, it is nullable and readonly.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceHealthIssueId key: id of serviceHealthIssue
 @return ApiAdminServiceAnnouncementUpdateIssuesRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementUpdateIssues(ctx _context.Context, serviceHealthIssueId string) ApiAdminServiceAnnouncementUpdateIssuesRequest {
	return ApiAdminServiceAnnouncementUpdateIssuesRequest{
		ApiService: a,
		ctx: ctx,
		serviceHealthIssueId: serviceHealthIssueId,
	}
}

// Execute executes the request
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementUpdateIssuesExecute(r ApiAdminServiceAnnouncementUpdateIssuesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementUpdateIssues")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/issues/{serviceHealthIssue-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceHealthIssue-id"+"}", _neturl.PathEscape(parameterToString(r.serviceHealthIssueId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphServiceHealthIssue == nil {
		return nil, reportError("microsoftGraphServiceHealthIssue is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphServiceHealthIssue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminServiceAnnouncementUpdateMessagesRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	serviceUpdateMessageId string
	microsoftGraphServiceUpdateMessage *MicrosoftGraphServiceUpdateMessage
}

// New navigation property values
func (r ApiAdminServiceAnnouncementUpdateMessagesRequest) MicrosoftGraphServiceUpdateMessage(microsoftGraphServiceUpdateMessage MicrosoftGraphServiceUpdateMessage) ApiAdminServiceAnnouncementUpdateMessagesRequest {
	r.microsoftGraphServiceUpdateMessage = &microsoftGraphServiceUpdateMessage
	return r
}

func (r ApiAdminServiceAnnouncementUpdateMessagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AdminServiceAnnouncementUpdateMessagesExecute(r)
}

/*
AdminServiceAnnouncementUpdateMessages Update the navigation property messages in admin

A collection of service messages for tenant. This property is a contained navigation property, it is nullable and readonly.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceUpdateMessageId key: id of serviceUpdateMessage
 @return ApiAdminServiceAnnouncementUpdateMessagesRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementUpdateMessages(ctx _context.Context, serviceUpdateMessageId string) ApiAdminServiceAnnouncementUpdateMessagesRequest {
	return ApiAdminServiceAnnouncementUpdateMessagesRequest{
		ApiService: a,
		ctx: ctx,
		serviceUpdateMessageId: serviceUpdateMessageId,
	}
}

// Execute executes the request
func (a *AdminServiceAnnouncementApiService) AdminServiceAnnouncementUpdateMessagesExecute(r ApiAdminServiceAnnouncementUpdateMessagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminServiceAnnouncementUpdateMessages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement/messages/{serviceUpdateMessage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceUpdateMessage-id"+"}", _neturl.PathEscape(parameterToString(r.serviceUpdateMessageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphServiceUpdateMessage == nil {
		return nil, reportError("microsoftGraphServiceUpdateMessage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphServiceUpdateMessage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminUpdateServiceAnnouncementRequest struct {
	ctx _context.Context
	ApiService *AdminServiceAnnouncementApiService
	microsoftGraphServiceAnnouncement *MicrosoftGraphServiceAnnouncement
}

// New navigation property values
func (r ApiAdminUpdateServiceAnnouncementRequest) MicrosoftGraphServiceAnnouncement(microsoftGraphServiceAnnouncement MicrosoftGraphServiceAnnouncement) ApiAdminUpdateServiceAnnouncementRequest {
	r.microsoftGraphServiceAnnouncement = &microsoftGraphServiceAnnouncement
	return r
}

func (r ApiAdminUpdateServiceAnnouncementRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AdminUpdateServiceAnnouncementExecute(r)
}

/*
AdminUpdateServiceAnnouncement Update the navigation property serviceAnnouncement in admin

A container for service communications resources. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUpdateServiceAnnouncementRequest
*/
func (a *AdminServiceAnnouncementApiService) AdminUpdateServiceAnnouncement(ctx _context.Context) ApiAdminUpdateServiceAnnouncementRequest {
	return ApiAdminUpdateServiceAnnouncementRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AdminServiceAnnouncementApiService) AdminUpdateServiceAnnouncementExecute(r ApiAdminUpdateServiceAnnouncementRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminServiceAnnouncementApiService.AdminUpdateServiceAnnouncement")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/serviceAnnouncement"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphServiceAnnouncement == nil {
		return nil, reportError("microsoftGraphServiceAnnouncement is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphServiceAnnouncement
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
