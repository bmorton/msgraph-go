/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SectionGroup struct for SectionGroup
type SectionGroup struct {
	// The URL for the sectionGroups navigation property, which returns all the section groups in the section group. Read-only.
	SectionGroupsUrl NullableString `json:"sectionGroupsUrl,omitempty"`
	// The URL for the sections navigation property, which returns all the sections in the section group. Read-only.
	SectionsUrl NullableString `json:"sectionsUrl,omitempty"`
	// The notebook that contains the section group. Read-only.
	ParentNotebook AnyOfmicrosoftGraphNotebook `json:"parentNotebook,omitempty"`
	// The section group that contains the section group. Read-only.
	ParentSectionGroup AnyOfmicrosoftGraphSectionGroup `json:"parentSectionGroup,omitempty"`
	// The section groups in the section. Read-only. Nullable.
	SectionGroups *[]MicrosoftGraphSectionGroup `json:"sectionGroups,omitempty"`
	// The sections in the section group. Read-only. Nullable.
	Sections *[]MicrosoftGraphOnenoteSection `json:"sections,omitempty"`
}

// NewSectionGroup instantiates a new SectionGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSectionGroup() *SectionGroup {
	this := SectionGroup{}
	return &this
}

// NewSectionGroupWithDefaults instantiates a new SectionGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectionGroupWithDefaults() *SectionGroup {
	this := SectionGroup{}
	return &this
}

// GetSectionGroupsUrl returns the SectionGroupsUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SectionGroup) GetSectionGroupsUrl() string {
	if o == nil || o.SectionGroupsUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.SectionGroupsUrl.Get()
}

// GetSectionGroupsUrlOk returns a tuple with the SectionGroupsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SectionGroup) GetSectionGroupsUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SectionGroupsUrl.Get(), o.SectionGroupsUrl.IsSet()
}

// HasSectionGroupsUrl returns a boolean if a field has been set.
func (o *SectionGroup) HasSectionGroupsUrl() bool {
	if o != nil && o.SectionGroupsUrl.IsSet() {
		return true
	}

	return false
}

// SetSectionGroupsUrl gets a reference to the given NullableString and assigns it to the SectionGroupsUrl field.
func (o *SectionGroup) SetSectionGroupsUrl(v string) {
	o.SectionGroupsUrl.Set(&v)
}
// SetSectionGroupsUrlNil sets the value for SectionGroupsUrl to be an explicit nil
func (o *SectionGroup) SetSectionGroupsUrlNil() {
	o.SectionGroupsUrl.Set(nil)
}

// UnsetSectionGroupsUrl ensures that no value is present for SectionGroupsUrl, not even an explicit nil
func (o *SectionGroup) UnsetSectionGroupsUrl() {
	o.SectionGroupsUrl.Unset()
}

// GetSectionsUrl returns the SectionsUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SectionGroup) GetSectionsUrl() string {
	if o == nil || o.SectionsUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.SectionsUrl.Get()
}

// GetSectionsUrlOk returns a tuple with the SectionsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SectionGroup) GetSectionsUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SectionsUrl.Get(), o.SectionsUrl.IsSet()
}

// HasSectionsUrl returns a boolean if a field has been set.
func (o *SectionGroup) HasSectionsUrl() bool {
	if o != nil && o.SectionsUrl.IsSet() {
		return true
	}

	return false
}

// SetSectionsUrl gets a reference to the given NullableString and assigns it to the SectionsUrl field.
func (o *SectionGroup) SetSectionsUrl(v string) {
	o.SectionsUrl.Set(&v)
}
// SetSectionsUrlNil sets the value for SectionsUrl to be an explicit nil
func (o *SectionGroup) SetSectionsUrlNil() {
	o.SectionsUrl.Set(nil)
}

// UnsetSectionsUrl ensures that no value is present for SectionsUrl, not even an explicit nil
func (o *SectionGroup) UnsetSectionsUrl() {
	o.SectionsUrl.Unset()
}

// GetParentNotebook returns the ParentNotebook field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SectionGroup) GetParentNotebook() AnyOfmicrosoftGraphNotebook {
	if o == nil  {
		var ret AnyOfmicrosoftGraphNotebook
		return ret
	}
	return o.ParentNotebook
}

// GetParentNotebookOk returns a tuple with the ParentNotebook field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SectionGroup) GetParentNotebookOk() (*AnyOfmicrosoftGraphNotebook, bool) {
	if o == nil || o.ParentNotebook == nil {
		return nil, false
	}
	return &o.ParentNotebook, true
}

// HasParentNotebook returns a boolean if a field has been set.
func (o *SectionGroup) HasParentNotebook() bool {
	if o != nil && o.ParentNotebook != nil {
		return true
	}

	return false
}

// SetParentNotebook gets a reference to the given AnyOfmicrosoftGraphNotebook and assigns it to the ParentNotebook field.
func (o *SectionGroup) SetParentNotebook(v AnyOfmicrosoftGraphNotebook) {
	o.ParentNotebook = v
}

// GetParentSectionGroup returns the ParentSectionGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SectionGroup) GetParentSectionGroup() AnyOfmicrosoftGraphSectionGroup {
	if o == nil  {
		var ret AnyOfmicrosoftGraphSectionGroup
		return ret
	}
	return o.ParentSectionGroup
}

// GetParentSectionGroupOk returns a tuple with the ParentSectionGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SectionGroup) GetParentSectionGroupOk() (*AnyOfmicrosoftGraphSectionGroup, bool) {
	if o == nil || o.ParentSectionGroup == nil {
		return nil, false
	}
	return &o.ParentSectionGroup, true
}

// HasParentSectionGroup returns a boolean if a field has been set.
func (o *SectionGroup) HasParentSectionGroup() bool {
	if o != nil && o.ParentSectionGroup != nil {
		return true
	}

	return false
}

// SetParentSectionGroup gets a reference to the given AnyOfmicrosoftGraphSectionGroup and assigns it to the ParentSectionGroup field.
func (o *SectionGroup) SetParentSectionGroup(v AnyOfmicrosoftGraphSectionGroup) {
	o.ParentSectionGroup = v
}

// GetSectionGroups returns the SectionGroups field value if set, zero value otherwise.
func (o *SectionGroup) GetSectionGroups() []MicrosoftGraphSectionGroup {
	if o == nil || o.SectionGroups == nil {
		var ret []MicrosoftGraphSectionGroup
		return ret
	}
	return *o.SectionGroups
}

// GetSectionGroupsOk returns a tuple with the SectionGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionGroup) GetSectionGroupsOk() (*[]MicrosoftGraphSectionGroup, bool) {
	if o == nil || o.SectionGroups == nil {
		return nil, false
	}
	return o.SectionGroups, true
}

// HasSectionGroups returns a boolean if a field has been set.
func (o *SectionGroup) HasSectionGroups() bool {
	if o != nil && o.SectionGroups != nil {
		return true
	}

	return false
}

// SetSectionGroups gets a reference to the given []MicrosoftGraphSectionGroup and assigns it to the SectionGroups field.
func (o *SectionGroup) SetSectionGroups(v []MicrosoftGraphSectionGroup) {
	o.SectionGroups = &v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *SectionGroup) GetSections() []MicrosoftGraphOnenoteSection {
	if o == nil || o.Sections == nil {
		var ret []MicrosoftGraphOnenoteSection
		return ret
	}
	return *o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionGroup) GetSectionsOk() (*[]MicrosoftGraphOnenoteSection, bool) {
	if o == nil || o.Sections == nil {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *SectionGroup) HasSections() bool {
	if o != nil && o.Sections != nil {
		return true
	}

	return false
}

// SetSections gets a reference to the given []MicrosoftGraphOnenoteSection and assigns it to the Sections field.
func (o *SectionGroup) SetSections(v []MicrosoftGraphOnenoteSection) {
	o.Sections = &v
}

func (o SectionGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SectionGroupsUrl.IsSet() {
		toSerialize["sectionGroupsUrl"] = o.SectionGroupsUrl.Get()
	}
	if o.SectionsUrl.IsSet() {
		toSerialize["sectionsUrl"] = o.SectionsUrl.Get()
	}
	if o.ParentNotebook != nil {
		toSerialize["parentNotebook"] = o.ParentNotebook
	}
	if o.ParentSectionGroup != nil {
		toSerialize["parentSectionGroup"] = o.ParentSectionGroup
	}
	if o.SectionGroups != nil {
		toSerialize["sectionGroups"] = o.SectionGroups
	}
	if o.Sections != nil {
		toSerialize["sections"] = o.Sections
	}
	return json.Marshal(toSerialize)
}

type NullableSectionGroup struct {
	value *SectionGroup
	isSet bool
}

func (v NullableSectionGroup) Get() *SectionGroup {
	return v.value
}

func (v *NullableSectionGroup) Set(val *SectionGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableSectionGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableSectionGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSectionGroup(val *SectionGroup) *NullableSectionGroup {
	return &NullableSectionGroup{value: val, isSet: true}
}

func (v NullableSectionGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSectionGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


