/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// PrivacySubjectRightsRequestApiService PrivacySubjectRightsRequestApi service
type PrivacySubjectRightsRequestApiService service

type ApiPrivacyCreateSubjectRightsRequestsRequest struct {
	ctx _context.Context
	ApiService *PrivacySubjectRightsRequestApiService
	microsoftGraphSubjectRightsRequest *MicrosoftGraphSubjectRightsRequest
}

// New navigation property
func (r ApiPrivacyCreateSubjectRightsRequestsRequest) MicrosoftGraphSubjectRightsRequest(microsoftGraphSubjectRightsRequest MicrosoftGraphSubjectRightsRequest) ApiPrivacyCreateSubjectRightsRequestsRequest {
	r.microsoftGraphSubjectRightsRequest = &microsoftGraphSubjectRightsRequest
	return r
}

func (r ApiPrivacyCreateSubjectRightsRequestsRequest) Execute() (MicrosoftGraphSubjectRightsRequest, *_nethttp.Response, error) {
	return r.ApiService.PrivacyCreateSubjectRightsRequestsExecute(r)
}

/*
PrivacyCreateSubjectRightsRequests Create new navigation property to subjectRightsRequests for privacy

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPrivacyCreateSubjectRightsRequestsRequest
*/
func (a *PrivacySubjectRightsRequestApiService) PrivacyCreateSubjectRightsRequests(ctx _context.Context) ApiPrivacyCreateSubjectRightsRequestsRequest {
	return ApiPrivacyCreateSubjectRightsRequestsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSubjectRightsRequest
func (a *PrivacySubjectRightsRequestApiService) PrivacyCreateSubjectRightsRequestsExecute(r ApiPrivacyCreateSubjectRightsRequestsRequest) (MicrosoftGraphSubjectRightsRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSubjectRightsRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivacySubjectRightsRequestApiService.PrivacyCreateSubjectRightsRequests")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/privacy/subjectRightsRequests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSubjectRightsRequest == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSubjectRightsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSubjectRightsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrivacyDeleteSubjectRightsRequestsRequest struct {
	ctx _context.Context
	ApiService *PrivacySubjectRightsRequestApiService
	subjectRightsRequestId string
	ifMatch *string
}

// ETag
func (r ApiPrivacyDeleteSubjectRightsRequestsRequest) IfMatch(ifMatch string) ApiPrivacyDeleteSubjectRightsRequestsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiPrivacyDeleteSubjectRightsRequestsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrivacyDeleteSubjectRightsRequestsExecute(r)
}

/*
PrivacyDeleteSubjectRightsRequests Delete navigation property subjectRightsRequests for privacy

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subjectRightsRequestId key: id of subjectRightsRequest
 @return ApiPrivacyDeleteSubjectRightsRequestsRequest
*/
func (a *PrivacySubjectRightsRequestApiService) PrivacyDeleteSubjectRightsRequests(ctx _context.Context, subjectRightsRequestId string) ApiPrivacyDeleteSubjectRightsRequestsRequest {
	return ApiPrivacyDeleteSubjectRightsRequestsRequest{
		ApiService: a,
		ctx: ctx,
		subjectRightsRequestId: subjectRightsRequestId,
	}
}

// Execute executes the request
func (a *PrivacySubjectRightsRequestApiService) PrivacyDeleteSubjectRightsRequestsExecute(r ApiPrivacyDeleteSubjectRightsRequestsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivacySubjectRightsRequestApiService.PrivacyDeleteSubjectRightsRequests")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/privacy/subjectRightsRequests/{subjectRightsRequest-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"subjectRightsRequest-id"+"}", _neturl.PathEscape(parameterToString(r.subjectRightsRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrivacyGetSubjectRightsRequestsRequest struct {
	ctx _context.Context
	ApiService *PrivacySubjectRightsRequestApiService
	subjectRightsRequestId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiPrivacyGetSubjectRightsRequestsRequest) Select_(select_ []string) ApiPrivacyGetSubjectRightsRequestsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrivacyGetSubjectRightsRequestsRequest) Expand(expand []string) ApiPrivacyGetSubjectRightsRequestsRequest {
	r.expand = &expand
	return r
}

func (r ApiPrivacyGetSubjectRightsRequestsRequest) Execute() (MicrosoftGraphSubjectRightsRequest, *_nethttp.Response, error) {
	return r.ApiService.PrivacyGetSubjectRightsRequestsExecute(r)
}

/*
PrivacyGetSubjectRightsRequests Get subjectRightsRequests from privacy

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subjectRightsRequestId key: id of subjectRightsRequest
 @return ApiPrivacyGetSubjectRightsRequestsRequest
*/
func (a *PrivacySubjectRightsRequestApiService) PrivacyGetSubjectRightsRequests(ctx _context.Context, subjectRightsRequestId string) ApiPrivacyGetSubjectRightsRequestsRequest {
	return ApiPrivacyGetSubjectRightsRequestsRequest{
		ApiService: a,
		ctx: ctx,
		subjectRightsRequestId: subjectRightsRequestId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSubjectRightsRequest
func (a *PrivacySubjectRightsRequestApiService) PrivacyGetSubjectRightsRequestsExecute(r ApiPrivacyGetSubjectRightsRequestsRequest) (MicrosoftGraphSubjectRightsRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSubjectRightsRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivacySubjectRightsRequestApiService.PrivacyGetSubjectRightsRequests")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/privacy/subjectRightsRequests/{subjectRightsRequest-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"subjectRightsRequest-id"+"}", _neturl.PathEscape(parameterToString(r.subjectRightsRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrivacyListSubjectRightsRequestsRequest struct {
	ctx _context.Context
	ApiService *PrivacySubjectRightsRequestApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiPrivacyListSubjectRightsRequestsRequest) Top(top int32) ApiPrivacyListSubjectRightsRequestsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiPrivacyListSubjectRightsRequestsRequest) Skip(skip int32) ApiPrivacyListSubjectRightsRequestsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiPrivacyListSubjectRightsRequestsRequest) Search(search string) ApiPrivacyListSubjectRightsRequestsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiPrivacyListSubjectRightsRequestsRequest) Filter(filter string) ApiPrivacyListSubjectRightsRequestsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiPrivacyListSubjectRightsRequestsRequest) Count(count bool) ApiPrivacyListSubjectRightsRequestsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiPrivacyListSubjectRightsRequestsRequest) Orderby(orderby []string) ApiPrivacyListSubjectRightsRequestsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiPrivacyListSubjectRightsRequestsRequest) Select_(select_ []string) ApiPrivacyListSubjectRightsRequestsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrivacyListSubjectRightsRequestsRequest) Expand(expand []string) ApiPrivacyListSubjectRightsRequestsRequest {
	r.expand = &expand
	return r
}

func (r ApiPrivacyListSubjectRightsRequestsRequest) Execute() (CollectionOfSubjectRightsRequest, *_nethttp.Response, error) {
	return r.ApiService.PrivacyListSubjectRightsRequestsExecute(r)
}

/*
PrivacyListSubjectRightsRequests Get subjectRightsRequests from privacy

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPrivacyListSubjectRightsRequestsRequest
*/
func (a *PrivacySubjectRightsRequestApiService) PrivacyListSubjectRightsRequests(ctx _context.Context) ApiPrivacyListSubjectRightsRequestsRequest {
	return ApiPrivacyListSubjectRightsRequestsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfSubjectRightsRequest
func (a *PrivacySubjectRightsRequestApiService) PrivacyListSubjectRightsRequestsExecute(r ApiPrivacyListSubjectRightsRequestsRequest) (CollectionOfSubjectRightsRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSubjectRightsRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivacySubjectRightsRequestApiService.PrivacyListSubjectRightsRequests")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/privacy/subjectRightsRequests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrivacySubjectRightsRequestsCreateNotesRequest struct {
	ctx _context.Context
	ApiService *PrivacySubjectRightsRequestApiService
	subjectRightsRequestId string
	microsoftGraphAuthoredNote *MicrosoftGraphAuthoredNote
}

// New navigation property
func (r ApiPrivacySubjectRightsRequestsCreateNotesRequest) MicrosoftGraphAuthoredNote(microsoftGraphAuthoredNote MicrosoftGraphAuthoredNote) ApiPrivacySubjectRightsRequestsCreateNotesRequest {
	r.microsoftGraphAuthoredNote = &microsoftGraphAuthoredNote
	return r
}

func (r ApiPrivacySubjectRightsRequestsCreateNotesRequest) Execute() (MicrosoftGraphAuthoredNote, *_nethttp.Response, error) {
	return r.ApiService.PrivacySubjectRightsRequestsCreateNotesExecute(r)
}

/*
PrivacySubjectRightsRequestsCreateNotes Create new navigation property to notes for privacy

List of notes associcated with the request.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subjectRightsRequestId key: id of subjectRightsRequest
 @return ApiPrivacySubjectRightsRequestsCreateNotesRequest
*/
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsCreateNotes(ctx _context.Context, subjectRightsRequestId string) ApiPrivacySubjectRightsRequestsCreateNotesRequest {
	return ApiPrivacySubjectRightsRequestsCreateNotesRequest{
		ApiService: a,
		ctx: ctx,
		subjectRightsRequestId: subjectRightsRequestId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAuthoredNote
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsCreateNotesExecute(r ApiPrivacySubjectRightsRequestsCreateNotesRequest) (MicrosoftGraphAuthoredNote, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAuthoredNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivacySubjectRightsRequestApiService.PrivacySubjectRightsRequestsCreateNotes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/privacy/subjectRightsRequests/{subjectRightsRequest-id}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"subjectRightsRequest-id"+"}", _neturl.PathEscape(parameterToString(r.subjectRightsRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAuthoredNote == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAuthoredNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAuthoredNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrivacySubjectRightsRequestsDeleteNotesRequest struct {
	ctx _context.Context
	ApiService *PrivacySubjectRightsRequestApiService
	subjectRightsRequestId string
	authoredNoteId string
	ifMatch *string
}

// ETag
func (r ApiPrivacySubjectRightsRequestsDeleteNotesRequest) IfMatch(ifMatch string) ApiPrivacySubjectRightsRequestsDeleteNotesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiPrivacySubjectRightsRequestsDeleteNotesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrivacySubjectRightsRequestsDeleteNotesExecute(r)
}

/*
PrivacySubjectRightsRequestsDeleteNotes Delete navigation property notes for privacy

List of notes associcated with the request.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subjectRightsRequestId key: id of subjectRightsRequest
 @param authoredNoteId key: id of authoredNote
 @return ApiPrivacySubjectRightsRequestsDeleteNotesRequest
*/
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsDeleteNotes(ctx _context.Context, subjectRightsRequestId string, authoredNoteId string) ApiPrivacySubjectRightsRequestsDeleteNotesRequest {
	return ApiPrivacySubjectRightsRequestsDeleteNotesRequest{
		ApiService: a,
		ctx: ctx,
		subjectRightsRequestId: subjectRightsRequestId,
		authoredNoteId: authoredNoteId,
	}
}

// Execute executes the request
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsDeleteNotesExecute(r ApiPrivacySubjectRightsRequestsDeleteNotesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivacySubjectRightsRequestApiService.PrivacySubjectRightsRequestsDeleteNotes")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/privacy/subjectRightsRequests/{subjectRightsRequest-id}/notes/{authoredNote-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"subjectRightsRequest-id"+"}", _neturl.PathEscape(parameterToString(r.subjectRightsRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authoredNote-id"+"}", _neturl.PathEscape(parameterToString(r.authoredNoteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrivacySubjectRightsRequestsDeleteRefTeamRequest struct {
	ctx _context.Context
	ApiService *PrivacySubjectRightsRequestApiService
	subjectRightsRequestId string
	ifMatch *string
}

// ETag
func (r ApiPrivacySubjectRightsRequestsDeleteRefTeamRequest) IfMatch(ifMatch string) ApiPrivacySubjectRightsRequestsDeleteRefTeamRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiPrivacySubjectRightsRequestsDeleteRefTeamRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrivacySubjectRightsRequestsDeleteRefTeamExecute(r)
}

/*
PrivacySubjectRightsRequestsDeleteRefTeam Delete ref of navigation property team for privacy

Information about the Microsoft Teams team that was created for the request.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subjectRightsRequestId key: id of subjectRightsRequest
 @return ApiPrivacySubjectRightsRequestsDeleteRefTeamRequest
*/
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsDeleteRefTeam(ctx _context.Context, subjectRightsRequestId string) ApiPrivacySubjectRightsRequestsDeleteRefTeamRequest {
	return ApiPrivacySubjectRightsRequestsDeleteRefTeamRequest{
		ApiService: a,
		ctx: ctx,
		subjectRightsRequestId: subjectRightsRequestId,
	}
}

// Execute executes the request
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsDeleteRefTeamExecute(r ApiPrivacySubjectRightsRequestsDeleteRefTeamRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivacySubjectRightsRequestApiService.PrivacySubjectRightsRequestsDeleteRefTeam")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/privacy/subjectRightsRequests/{subjectRightsRequest-id}/team/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"subjectRightsRequest-id"+"}", _neturl.PathEscape(parameterToString(r.subjectRightsRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrivacySubjectRightsRequestsGetNotesRequest struct {
	ctx _context.Context
	ApiService *PrivacySubjectRightsRequestApiService
	subjectRightsRequestId string
	authoredNoteId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiPrivacySubjectRightsRequestsGetNotesRequest) Select_(select_ []string) ApiPrivacySubjectRightsRequestsGetNotesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrivacySubjectRightsRequestsGetNotesRequest) Expand(expand []string) ApiPrivacySubjectRightsRequestsGetNotesRequest {
	r.expand = &expand
	return r
}

func (r ApiPrivacySubjectRightsRequestsGetNotesRequest) Execute() (MicrosoftGraphAuthoredNote, *_nethttp.Response, error) {
	return r.ApiService.PrivacySubjectRightsRequestsGetNotesExecute(r)
}

/*
PrivacySubjectRightsRequestsGetNotes Get notes from privacy

List of notes associcated with the request.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subjectRightsRequestId key: id of subjectRightsRequest
 @param authoredNoteId key: id of authoredNote
 @return ApiPrivacySubjectRightsRequestsGetNotesRequest
*/
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsGetNotes(ctx _context.Context, subjectRightsRequestId string, authoredNoteId string) ApiPrivacySubjectRightsRequestsGetNotesRequest {
	return ApiPrivacySubjectRightsRequestsGetNotesRequest{
		ApiService: a,
		ctx: ctx,
		subjectRightsRequestId: subjectRightsRequestId,
		authoredNoteId: authoredNoteId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAuthoredNote
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsGetNotesExecute(r ApiPrivacySubjectRightsRequestsGetNotesRequest) (MicrosoftGraphAuthoredNote, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAuthoredNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivacySubjectRightsRequestApiService.PrivacySubjectRightsRequestsGetNotes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/privacy/subjectRightsRequests/{subjectRightsRequest-id}/notes/{authoredNote-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"subjectRightsRequest-id"+"}", _neturl.PathEscape(parameterToString(r.subjectRightsRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authoredNote-id"+"}", _neturl.PathEscape(parameterToString(r.authoredNoteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrivacySubjectRightsRequestsGetRefTeamRequest struct {
	ctx _context.Context
	ApiService *PrivacySubjectRightsRequestApiService
	subjectRightsRequestId string
}


func (r ApiPrivacySubjectRightsRequestsGetRefTeamRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.PrivacySubjectRightsRequestsGetRefTeamExecute(r)
}

/*
PrivacySubjectRightsRequestsGetRefTeam Get ref of team from privacy

Information about the Microsoft Teams team that was created for the request.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subjectRightsRequestId key: id of subjectRightsRequest
 @return ApiPrivacySubjectRightsRequestsGetRefTeamRequest
*/
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsGetRefTeam(ctx _context.Context, subjectRightsRequestId string) ApiPrivacySubjectRightsRequestsGetRefTeamRequest {
	return ApiPrivacySubjectRightsRequestsGetRefTeamRequest{
		ApiService: a,
		ctx: ctx,
		subjectRightsRequestId: subjectRightsRequestId,
	}
}

// Execute executes the request
//  @return string
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsGetRefTeamExecute(r ApiPrivacySubjectRightsRequestsGetRefTeamRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivacySubjectRightsRequestApiService.PrivacySubjectRightsRequestsGetRefTeam")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/privacy/subjectRightsRequests/{subjectRightsRequest-id}/team/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"subjectRightsRequest-id"+"}", _neturl.PathEscape(parameterToString(r.subjectRightsRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrivacySubjectRightsRequestsGetTeamRequest struct {
	ctx _context.Context
	ApiService *PrivacySubjectRightsRequestApiService
	subjectRightsRequestId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiPrivacySubjectRightsRequestsGetTeamRequest) Select_(select_ []string) ApiPrivacySubjectRightsRequestsGetTeamRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrivacySubjectRightsRequestsGetTeamRequest) Expand(expand []string) ApiPrivacySubjectRightsRequestsGetTeamRequest {
	r.expand = &expand
	return r
}

func (r ApiPrivacySubjectRightsRequestsGetTeamRequest) Execute() (MicrosoftGraphTeam, *_nethttp.Response, error) {
	return r.ApiService.PrivacySubjectRightsRequestsGetTeamExecute(r)
}

/*
PrivacySubjectRightsRequestsGetTeam Get team from privacy

Information about the Microsoft Teams team that was created for the request.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subjectRightsRequestId key: id of subjectRightsRequest
 @return ApiPrivacySubjectRightsRequestsGetTeamRequest
*/
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsGetTeam(ctx _context.Context, subjectRightsRequestId string) ApiPrivacySubjectRightsRequestsGetTeamRequest {
	return ApiPrivacySubjectRightsRequestsGetTeamRequest{
		ApiService: a,
		ctx: ctx,
		subjectRightsRequestId: subjectRightsRequestId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeam
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsGetTeamExecute(r ApiPrivacySubjectRightsRequestsGetTeamRequest) (MicrosoftGraphTeam, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeam
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivacySubjectRightsRequestApiService.PrivacySubjectRightsRequestsGetTeam")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/privacy/subjectRightsRequests/{subjectRightsRequest-id}/team"
	localVarPath = strings.Replace(localVarPath, "{"+"subjectRightsRequest-id"+"}", _neturl.PathEscape(parameterToString(r.subjectRightsRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrivacySubjectRightsRequestsListNotesRequest struct {
	ctx _context.Context
	ApiService *PrivacySubjectRightsRequestApiService
	subjectRightsRequestId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiPrivacySubjectRightsRequestsListNotesRequest) Top(top int32) ApiPrivacySubjectRightsRequestsListNotesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiPrivacySubjectRightsRequestsListNotesRequest) Skip(skip int32) ApiPrivacySubjectRightsRequestsListNotesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiPrivacySubjectRightsRequestsListNotesRequest) Search(search string) ApiPrivacySubjectRightsRequestsListNotesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiPrivacySubjectRightsRequestsListNotesRequest) Filter(filter string) ApiPrivacySubjectRightsRequestsListNotesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiPrivacySubjectRightsRequestsListNotesRequest) Count(count bool) ApiPrivacySubjectRightsRequestsListNotesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiPrivacySubjectRightsRequestsListNotesRequest) Orderby(orderby []string) ApiPrivacySubjectRightsRequestsListNotesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiPrivacySubjectRightsRequestsListNotesRequest) Select_(select_ []string) ApiPrivacySubjectRightsRequestsListNotesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrivacySubjectRightsRequestsListNotesRequest) Expand(expand []string) ApiPrivacySubjectRightsRequestsListNotesRequest {
	r.expand = &expand
	return r
}

func (r ApiPrivacySubjectRightsRequestsListNotesRequest) Execute() (CollectionOfAuthoredNote, *_nethttp.Response, error) {
	return r.ApiService.PrivacySubjectRightsRequestsListNotesExecute(r)
}

/*
PrivacySubjectRightsRequestsListNotes Get notes from privacy

List of notes associcated with the request.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subjectRightsRequestId key: id of subjectRightsRequest
 @return ApiPrivacySubjectRightsRequestsListNotesRequest
*/
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsListNotes(ctx _context.Context, subjectRightsRequestId string) ApiPrivacySubjectRightsRequestsListNotesRequest {
	return ApiPrivacySubjectRightsRequestsListNotesRequest{
		ApiService: a,
		ctx: ctx,
		subjectRightsRequestId: subjectRightsRequestId,
	}
}

// Execute executes the request
//  @return CollectionOfAuthoredNote
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsListNotesExecute(r ApiPrivacySubjectRightsRequestsListNotesRequest) (CollectionOfAuthoredNote, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAuthoredNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivacySubjectRightsRequestApiService.PrivacySubjectRightsRequestsListNotes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/privacy/subjectRightsRequests/{subjectRightsRequest-id}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"subjectRightsRequest-id"+"}", _neturl.PathEscape(parameterToString(r.subjectRightsRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrivacySubjectRightsRequestsUpdateNotesRequest struct {
	ctx _context.Context
	ApiService *PrivacySubjectRightsRequestApiService
	subjectRightsRequestId string
	authoredNoteId string
	microsoftGraphAuthoredNote *MicrosoftGraphAuthoredNote
}

// New navigation property values
func (r ApiPrivacySubjectRightsRequestsUpdateNotesRequest) MicrosoftGraphAuthoredNote(microsoftGraphAuthoredNote MicrosoftGraphAuthoredNote) ApiPrivacySubjectRightsRequestsUpdateNotesRequest {
	r.microsoftGraphAuthoredNote = &microsoftGraphAuthoredNote
	return r
}

func (r ApiPrivacySubjectRightsRequestsUpdateNotesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrivacySubjectRightsRequestsUpdateNotesExecute(r)
}

/*
PrivacySubjectRightsRequestsUpdateNotes Update the navigation property notes in privacy

List of notes associcated with the request.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subjectRightsRequestId key: id of subjectRightsRequest
 @param authoredNoteId key: id of authoredNote
 @return ApiPrivacySubjectRightsRequestsUpdateNotesRequest
*/
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsUpdateNotes(ctx _context.Context, subjectRightsRequestId string, authoredNoteId string) ApiPrivacySubjectRightsRequestsUpdateNotesRequest {
	return ApiPrivacySubjectRightsRequestsUpdateNotesRequest{
		ApiService: a,
		ctx: ctx,
		subjectRightsRequestId: subjectRightsRequestId,
		authoredNoteId: authoredNoteId,
	}
}

// Execute executes the request
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsUpdateNotesExecute(r ApiPrivacySubjectRightsRequestsUpdateNotesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivacySubjectRightsRequestApiService.PrivacySubjectRightsRequestsUpdateNotes")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/privacy/subjectRightsRequests/{subjectRightsRequest-id}/notes/{authoredNote-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"subjectRightsRequest-id"+"}", _neturl.PathEscape(parameterToString(r.subjectRightsRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authoredNote-id"+"}", _neturl.PathEscape(parameterToString(r.authoredNoteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAuthoredNote == nil {
		return nil, reportError("microsoftGraphAuthoredNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAuthoredNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrivacySubjectRightsRequestsUpdateRefTeamRequest struct {
	ctx _context.Context
	ApiService *PrivacySubjectRightsRequestApiService
	subjectRightsRequestId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref values
func (r ApiPrivacySubjectRightsRequestsUpdateRefTeamRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiPrivacySubjectRightsRequestsUpdateRefTeamRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiPrivacySubjectRightsRequestsUpdateRefTeamRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrivacySubjectRightsRequestsUpdateRefTeamExecute(r)
}

/*
PrivacySubjectRightsRequestsUpdateRefTeam Update the ref of navigation property team in privacy

Information about the Microsoft Teams team that was created for the request.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subjectRightsRequestId key: id of subjectRightsRequest
 @return ApiPrivacySubjectRightsRequestsUpdateRefTeamRequest
*/
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsUpdateRefTeam(ctx _context.Context, subjectRightsRequestId string) ApiPrivacySubjectRightsRequestsUpdateRefTeamRequest {
	return ApiPrivacySubjectRightsRequestsUpdateRefTeamRequest{
		ApiService: a,
		ctx: ctx,
		subjectRightsRequestId: subjectRightsRequestId,
	}
}

// Execute executes the request
func (a *PrivacySubjectRightsRequestApiService) PrivacySubjectRightsRequestsUpdateRefTeamExecute(r ApiPrivacySubjectRightsRequestsUpdateRefTeamRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivacySubjectRightsRequestApiService.PrivacySubjectRightsRequestsUpdateRefTeam")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/privacy/subjectRightsRequests/{subjectRightsRequest-id}/team/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"subjectRightsRequest-id"+"}", _neturl.PathEscape(parameterToString(r.subjectRightsRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrivacyUpdateSubjectRightsRequestsRequest struct {
	ctx _context.Context
	ApiService *PrivacySubjectRightsRequestApiService
	subjectRightsRequestId string
	microsoftGraphSubjectRightsRequest *MicrosoftGraphSubjectRightsRequest
}

// New navigation property values
func (r ApiPrivacyUpdateSubjectRightsRequestsRequest) MicrosoftGraphSubjectRightsRequest(microsoftGraphSubjectRightsRequest MicrosoftGraphSubjectRightsRequest) ApiPrivacyUpdateSubjectRightsRequestsRequest {
	r.microsoftGraphSubjectRightsRequest = &microsoftGraphSubjectRightsRequest
	return r
}

func (r ApiPrivacyUpdateSubjectRightsRequestsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrivacyUpdateSubjectRightsRequestsExecute(r)
}

/*
PrivacyUpdateSubjectRightsRequests Update the navigation property subjectRightsRequests in privacy

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subjectRightsRequestId key: id of subjectRightsRequest
 @return ApiPrivacyUpdateSubjectRightsRequestsRequest
*/
func (a *PrivacySubjectRightsRequestApiService) PrivacyUpdateSubjectRightsRequests(ctx _context.Context, subjectRightsRequestId string) ApiPrivacyUpdateSubjectRightsRequestsRequest {
	return ApiPrivacyUpdateSubjectRightsRequestsRequest{
		ApiService: a,
		ctx: ctx,
		subjectRightsRequestId: subjectRightsRequestId,
	}
}

// Execute executes the request
func (a *PrivacySubjectRightsRequestApiService) PrivacyUpdateSubjectRightsRequestsExecute(r ApiPrivacyUpdateSubjectRightsRequestsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivacySubjectRightsRequestApiService.PrivacyUpdateSubjectRightsRequests")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/privacy/subjectRightsRequests/{subjectRightsRequest-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"subjectRightsRequest-id"+"}", _neturl.PathEscape(parameterToString(r.subjectRightsRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSubjectRightsRequest == nil {
		return nil, reportError("microsoftGraphSubjectRightsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSubjectRightsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
