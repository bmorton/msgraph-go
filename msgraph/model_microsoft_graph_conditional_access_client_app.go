/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphConditionalAccessClientApp the model 'MicrosoftGraphConditionalAccessClientApp'
type MicrosoftGraphConditionalAccessClientApp string

// List of microsoft.graph.conditionalAccessClientApp
const (
	ALL MicrosoftGraphConditionalAccessClientApp = "all"
	BROWSER MicrosoftGraphConditionalAccessClientApp = "browser"
	MOBILE_APPS_AND_DESKTOP_CLIENTS MicrosoftGraphConditionalAccessClientApp = "mobileAppsAndDesktopClients"
	EXCHANGE_ACTIVE_SYNC MicrosoftGraphConditionalAccessClientApp = "exchangeActiveSync"
	EAS_SUPPORTED MicrosoftGraphConditionalAccessClientApp = "easSupported"
	OTHER MicrosoftGraphConditionalAccessClientApp = "other"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphConditionalAccessClientApp = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphConditionalAccessClientApp enum
var AllowedMicrosoftGraphConditionalAccessClientAppEnumValues = []MicrosoftGraphConditionalAccessClientApp{
	"all",
	"browser",
	"mobileAppsAndDesktopClients",
	"exchangeActiveSync",
	"easSupported",
	"other",
	"unknownFutureValue",
}

func (v *MicrosoftGraphConditionalAccessClientApp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphConditionalAccessClientApp(value)
	for _, existing := range AllowedMicrosoftGraphConditionalAccessClientAppEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphConditionalAccessClientApp", value)
}

// NewMicrosoftGraphConditionalAccessClientAppFromValue returns a pointer to a valid MicrosoftGraphConditionalAccessClientApp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphConditionalAccessClientAppFromValue(v string) (*MicrosoftGraphConditionalAccessClientApp, error) {
	ev := MicrosoftGraphConditionalAccessClientApp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphConditionalAccessClientApp: valid values are %v", v, AllowedMicrosoftGraphConditionalAccessClientAppEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphConditionalAccessClientApp) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphConditionalAccessClientAppEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.conditionalAccessClientApp value
func (v MicrosoftGraphConditionalAccessClientApp) Ptr() *MicrosoftGraphConditionalAccessClientApp {
	return &v
}

type NullableMicrosoftGraphConditionalAccessClientApp struct {
	value *MicrosoftGraphConditionalAccessClientApp
	isSet bool
}

func (v NullableMicrosoftGraphConditionalAccessClientApp) Get() *MicrosoftGraphConditionalAccessClientApp {
	return v.value
}

func (v *NullableMicrosoftGraphConditionalAccessClientApp) Set(val *MicrosoftGraphConditionalAccessClientApp) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphConditionalAccessClientApp) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphConditionalAccessClientApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphConditionalAccessClientApp(val *MicrosoftGraphConditionalAccessClientApp) *NullableMicrosoftGraphConditionalAccessClientApp {
	return &NullableMicrosoftGraphConditionalAccessClientApp{value: val, isSet: true}
}

func (v NullableMicrosoftGraphConditionalAccessClientApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphConditionalAccessClientApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

