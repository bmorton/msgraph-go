/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// MeAuthenticationApiService MeAuthenticationApi service
type MeAuthenticationApiService service

type ApiMeAuthenticationCreateFido2MethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	microsoftGraphFido2AuthenticationMethod *MicrosoftGraphFido2AuthenticationMethod
}

// New navigation property
func (r ApiMeAuthenticationCreateFido2MethodsRequest) MicrosoftGraphFido2AuthenticationMethod(microsoftGraphFido2AuthenticationMethod MicrosoftGraphFido2AuthenticationMethod) ApiMeAuthenticationCreateFido2MethodsRequest {
	r.microsoftGraphFido2AuthenticationMethod = &microsoftGraphFido2AuthenticationMethod
	return r
}

func (r ApiMeAuthenticationCreateFido2MethodsRequest) Execute() (MicrosoftGraphFido2AuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationCreateFido2MethodsExecute(r)
}

/*
MeAuthenticationCreateFido2Methods Create new navigation property to fido2Methods for me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeAuthenticationCreateFido2MethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationCreateFido2Methods(ctx _context.Context) ApiMeAuthenticationCreateFido2MethodsRequest {
	return ApiMeAuthenticationCreateFido2MethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphFido2AuthenticationMethod
func (a *MeAuthenticationApiService) MeAuthenticationCreateFido2MethodsExecute(r ApiMeAuthenticationCreateFido2MethodsRequest) (MicrosoftGraphFido2AuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphFido2AuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationCreateFido2Methods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/fido2Methods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphFido2AuthenticationMethod == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphFido2AuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphFido2AuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeAuthenticationCreateMethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	microsoftGraphAuthenticationMethod *MicrosoftGraphAuthenticationMethod
}

// New navigation property
func (r ApiMeAuthenticationCreateMethodsRequest) MicrosoftGraphAuthenticationMethod(microsoftGraphAuthenticationMethod MicrosoftGraphAuthenticationMethod) ApiMeAuthenticationCreateMethodsRequest {
	r.microsoftGraphAuthenticationMethod = &microsoftGraphAuthenticationMethod
	return r
}

func (r ApiMeAuthenticationCreateMethodsRequest) Execute() (MicrosoftGraphAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationCreateMethodsExecute(r)
}

/*
MeAuthenticationCreateMethods Create new navigation property to methods for me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeAuthenticationCreateMethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationCreateMethods(ctx _context.Context) ApiMeAuthenticationCreateMethodsRequest {
	return ApiMeAuthenticationCreateMethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAuthenticationMethod
func (a *MeAuthenticationApiService) MeAuthenticationCreateMethodsExecute(r ApiMeAuthenticationCreateMethodsRequest) (MicrosoftGraphAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationCreateMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/methods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAuthenticationMethod == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeAuthenticationCreateMicrosoftAuthenticatorMethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	microsoftGraphMicrosoftAuthenticatorAuthenticationMethod *MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod
}

// New navigation property
func (r ApiMeAuthenticationCreateMicrosoftAuthenticatorMethodsRequest) MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod(microsoftGraphMicrosoftAuthenticatorAuthenticationMethod MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod) ApiMeAuthenticationCreateMicrosoftAuthenticatorMethodsRequest {
	r.microsoftGraphMicrosoftAuthenticatorAuthenticationMethod = &microsoftGraphMicrosoftAuthenticatorAuthenticationMethod
	return r
}

func (r ApiMeAuthenticationCreateMicrosoftAuthenticatorMethodsRequest) Execute() (MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationCreateMicrosoftAuthenticatorMethodsExecute(r)
}

/*
MeAuthenticationCreateMicrosoftAuthenticatorMethods Create new navigation property to microsoftAuthenticatorMethods for me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeAuthenticationCreateMicrosoftAuthenticatorMethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationCreateMicrosoftAuthenticatorMethods(ctx _context.Context) ApiMeAuthenticationCreateMicrosoftAuthenticatorMethodsRequest {
	return ApiMeAuthenticationCreateMicrosoftAuthenticatorMethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod
func (a *MeAuthenticationApiService) MeAuthenticationCreateMicrosoftAuthenticatorMethodsExecute(r ApiMeAuthenticationCreateMicrosoftAuthenticatorMethodsRequest) (MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationCreateMicrosoftAuthenticatorMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/microsoftAuthenticatorMethods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMicrosoftAuthenticatorAuthenticationMethod == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphMicrosoftAuthenticatorAuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMicrosoftAuthenticatorAuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeAuthenticationCreateWindowsHelloForBusinessMethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	microsoftGraphWindowsHelloForBusinessAuthenticationMethod *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod
}

// New navigation property
func (r ApiMeAuthenticationCreateWindowsHelloForBusinessMethodsRequest) MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod(microsoftGraphWindowsHelloForBusinessAuthenticationMethod MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod) ApiMeAuthenticationCreateWindowsHelloForBusinessMethodsRequest {
	r.microsoftGraphWindowsHelloForBusinessAuthenticationMethod = &microsoftGraphWindowsHelloForBusinessAuthenticationMethod
	return r
}

func (r ApiMeAuthenticationCreateWindowsHelloForBusinessMethodsRequest) Execute() (MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationCreateWindowsHelloForBusinessMethodsExecute(r)
}

/*
MeAuthenticationCreateWindowsHelloForBusinessMethods Create new navigation property to windowsHelloForBusinessMethods for me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeAuthenticationCreateWindowsHelloForBusinessMethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationCreateWindowsHelloForBusinessMethods(ctx _context.Context) ApiMeAuthenticationCreateWindowsHelloForBusinessMethodsRequest {
	return ApiMeAuthenticationCreateWindowsHelloForBusinessMethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod
func (a *MeAuthenticationApiService) MeAuthenticationCreateWindowsHelloForBusinessMethodsExecute(r ApiMeAuthenticationCreateWindowsHelloForBusinessMethodsRequest) (MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationCreateWindowsHelloForBusinessMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/windowsHelloForBusinessMethods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWindowsHelloForBusinessAuthenticationMethod == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWindowsHelloForBusinessAuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWindowsHelloForBusinessAuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeAuthenticationDeleteFido2MethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	fido2AuthenticationMethodId string
	ifMatch *string
}

// ETag
func (r ApiMeAuthenticationDeleteFido2MethodsRequest) IfMatch(ifMatch string) ApiMeAuthenticationDeleteFido2MethodsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeAuthenticationDeleteFido2MethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationDeleteFido2MethodsExecute(r)
}

/*
MeAuthenticationDeleteFido2Methods Delete navigation property fido2Methods for me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fido2AuthenticationMethodId key: id of fido2AuthenticationMethod
 @return ApiMeAuthenticationDeleteFido2MethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationDeleteFido2Methods(ctx _context.Context, fido2AuthenticationMethodId string) ApiMeAuthenticationDeleteFido2MethodsRequest {
	return ApiMeAuthenticationDeleteFido2MethodsRequest{
		ApiService: a,
		ctx: ctx,
		fido2AuthenticationMethodId: fido2AuthenticationMethodId,
	}
}

// Execute executes the request
func (a *MeAuthenticationApiService) MeAuthenticationDeleteFido2MethodsExecute(r ApiMeAuthenticationDeleteFido2MethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationDeleteFido2Methods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/fido2Methods/{fido2AuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"fido2AuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.fido2AuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeAuthenticationDeleteMethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	authenticationMethodId string
	ifMatch *string
}

// ETag
func (r ApiMeAuthenticationDeleteMethodsRequest) IfMatch(ifMatch string) ApiMeAuthenticationDeleteMethodsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeAuthenticationDeleteMethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationDeleteMethodsExecute(r)
}

/*
MeAuthenticationDeleteMethods Delete navigation property methods for me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param authenticationMethodId key: id of authenticationMethod
 @return ApiMeAuthenticationDeleteMethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationDeleteMethods(ctx _context.Context, authenticationMethodId string) ApiMeAuthenticationDeleteMethodsRequest {
	return ApiMeAuthenticationDeleteMethodsRequest{
		ApiService: a,
		ctx: ctx,
		authenticationMethodId: authenticationMethodId,
	}
}

// Execute executes the request
func (a *MeAuthenticationApiService) MeAuthenticationDeleteMethodsExecute(r ApiMeAuthenticationDeleteMethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationDeleteMethods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/methods/{authenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"authenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.authenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	microsoftAuthenticatorAuthenticationMethodId string
	ifMatch *string
}

// ETag
func (r ApiMeAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest) IfMatch(ifMatch string) ApiMeAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationDeleteMicrosoftAuthenticatorMethodsExecute(r)
}

/*
MeAuthenticationDeleteMicrosoftAuthenticatorMethods Delete navigation property microsoftAuthenticatorMethods for me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param microsoftAuthenticatorAuthenticationMethodId key: id of microsoftAuthenticatorAuthenticationMethod
 @return ApiMeAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationDeleteMicrosoftAuthenticatorMethods(ctx _context.Context, microsoftAuthenticatorAuthenticationMethodId string) ApiMeAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest {
	return ApiMeAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest{
		ApiService: a,
		ctx: ctx,
		microsoftAuthenticatorAuthenticationMethodId: microsoftAuthenticatorAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *MeAuthenticationApiService) MeAuthenticationDeleteMicrosoftAuthenticatorMethodsExecute(r ApiMeAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationDeleteMicrosoftAuthenticatorMethods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/microsoftAuthenticatorMethods/{microsoftAuthenticatorAuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"microsoftAuthenticatorAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.microsoftAuthenticatorAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeAuthenticationDeleteWindowsHelloForBusinessMethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	windowsHelloForBusinessAuthenticationMethodId string
	ifMatch *string
}

// ETag
func (r ApiMeAuthenticationDeleteWindowsHelloForBusinessMethodsRequest) IfMatch(ifMatch string) ApiMeAuthenticationDeleteWindowsHelloForBusinessMethodsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeAuthenticationDeleteWindowsHelloForBusinessMethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationDeleteWindowsHelloForBusinessMethodsExecute(r)
}

/*
MeAuthenticationDeleteWindowsHelloForBusinessMethods Delete navigation property windowsHelloForBusinessMethods for me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param windowsHelloForBusinessAuthenticationMethodId key: id of windowsHelloForBusinessAuthenticationMethod
 @return ApiMeAuthenticationDeleteWindowsHelloForBusinessMethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationDeleteWindowsHelloForBusinessMethods(ctx _context.Context, windowsHelloForBusinessAuthenticationMethodId string) ApiMeAuthenticationDeleteWindowsHelloForBusinessMethodsRequest {
	return ApiMeAuthenticationDeleteWindowsHelloForBusinessMethodsRequest{
		ApiService: a,
		ctx: ctx,
		windowsHelloForBusinessAuthenticationMethodId: windowsHelloForBusinessAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *MeAuthenticationApiService) MeAuthenticationDeleteWindowsHelloForBusinessMethodsExecute(r ApiMeAuthenticationDeleteWindowsHelloForBusinessMethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationDeleteWindowsHelloForBusinessMethods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/windowsHelloForBusinessMethods/{windowsHelloForBusinessAuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"windowsHelloForBusinessAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.windowsHelloForBusinessAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeAuthenticationGetFido2MethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	fido2AuthenticationMethodId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeAuthenticationGetFido2MethodsRequest) Select_(select_ []string) ApiMeAuthenticationGetFido2MethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeAuthenticationGetFido2MethodsRequest) Expand(expand []string) ApiMeAuthenticationGetFido2MethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeAuthenticationGetFido2MethodsRequest) Execute() (MicrosoftGraphFido2AuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationGetFido2MethodsExecute(r)
}

/*
MeAuthenticationGetFido2Methods Get fido2Methods from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fido2AuthenticationMethodId key: id of fido2AuthenticationMethod
 @return ApiMeAuthenticationGetFido2MethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationGetFido2Methods(ctx _context.Context, fido2AuthenticationMethodId string) ApiMeAuthenticationGetFido2MethodsRequest {
	return ApiMeAuthenticationGetFido2MethodsRequest{
		ApiService: a,
		ctx: ctx,
		fido2AuthenticationMethodId: fido2AuthenticationMethodId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphFido2AuthenticationMethod
func (a *MeAuthenticationApiService) MeAuthenticationGetFido2MethodsExecute(r ApiMeAuthenticationGetFido2MethodsRequest) (MicrosoftGraphFido2AuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphFido2AuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationGetFido2Methods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/fido2Methods/{fido2AuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"fido2AuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.fido2AuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeAuthenticationGetMethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	authenticationMethodId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeAuthenticationGetMethodsRequest) Select_(select_ []string) ApiMeAuthenticationGetMethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeAuthenticationGetMethodsRequest) Expand(expand []string) ApiMeAuthenticationGetMethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeAuthenticationGetMethodsRequest) Execute() (MicrosoftGraphAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationGetMethodsExecute(r)
}

/*
MeAuthenticationGetMethods Get methods from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param authenticationMethodId key: id of authenticationMethod
 @return ApiMeAuthenticationGetMethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationGetMethods(ctx _context.Context, authenticationMethodId string) ApiMeAuthenticationGetMethodsRequest {
	return ApiMeAuthenticationGetMethodsRequest{
		ApiService: a,
		ctx: ctx,
		authenticationMethodId: authenticationMethodId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAuthenticationMethod
func (a *MeAuthenticationApiService) MeAuthenticationGetMethodsExecute(r ApiMeAuthenticationGetMethodsRequest) (MicrosoftGraphAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationGetMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/methods/{authenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"authenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.authenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeAuthenticationGetMicrosoftAuthenticatorMethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	microsoftAuthenticatorAuthenticationMethodId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeAuthenticationGetMicrosoftAuthenticatorMethodsRequest) Select_(select_ []string) ApiMeAuthenticationGetMicrosoftAuthenticatorMethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeAuthenticationGetMicrosoftAuthenticatorMethodsRequest) Expand(expand []string) ApiMeAuthenticationGetMicrosoftAuthenticatorMethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeAuthenticationGetMicrosoftAuthenticatorMethodsRequest) Execute() (MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationGetMicrosoftAuthenticatorMethodsExecute(r)
}

/*
MeAuthenticationGetMicrosoftAuthenticatorMethods Get microsoftAuthenticatorMethods from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param microsoftAuthenticatorAuthenticationMethodId key: id of microsoftAuthenticatorAuthenticationMethod
 @return ApiMeAuthenticationGetMicrosoftAuthenticatorMethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationGetMicrosoftAuthenticatorMethods(ctx _context.Context, microsoftAuthenticatorAuthenticationMethodId string) ApiMeAuthenticationGetMicrosoftAuthenticatorMethodsRequest {
	return ApiMeAuthenticationGetMicrosoftAuthenticatorMethodsRequest{
		ApiService: a,
		ctx: ctx,
		microsoftAuthenticatorAuthenticationMethodId: microsoftAuthenticatorAuthenticationMethodId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod
func (a *MeAuthenticationApiService) MeAuthenticationGetMicrosoftAuthenticatorMethodsExecute(r ApiMeAuthenticationGetMicrosoftAuthenticatorMethodsRequest) (MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationGetMicrosoftAuthenticatorMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/microsoftAuthenticatorMethods/{microsoftAuthenticatorAuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"microsoftAuthenticatorAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.microsoftAuthenticatorAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeAuthenticationGetWindowsHelloForBusinessMethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	windowsHelloForBusinessAuthenticationMethodId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeAuthenticationGetWindowsHelloForBusinessMethodsRequest) Select_(select_ []string) ApiMeAuthenticationGetWindowsHelloForBusinessMethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeAuthenticationGetWindowsHelloForBusinessMethodsRequest) Expand(expand []string) ApiMeAuthenticationGetWindowsHelloForBusinessMethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeAuthenticationGetWindowsHelloForBusinessMethodsRequest) Execute() (MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationGetWindowsHelloForBusinessMethodsExecute(r)
}

/*
MeAuthenticationGetWindowsHelloForBusinessMethods Get windowsHelloForBusinessMethods from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param windowsHelloForBusinessAuthenticationMethodId key: id of windowsHelloForBusinessAuthenticationMethod
 @return ApiMeAuthenticationGetWindowsHelloForBusinessMethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationGetWindowsHelloForBusinessMethods(ctx _context.Context, windowsHelloForBusinessAuthenticationMethodId string) ApiMeAuthenticationGetWindowsHelloForBusinessMethodsRequest {
	return ApiMeAuthenticationGetWindowsHelloForBusinessMethodsRequest{
		ApiService: a,
		ctx: ctx,
		windowsHelloForBusinessAuthenticationMethodId: windowsHelloForBusinessAuthenticationMethodId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod
func (a *MeAuthenticationApiService) MeAuthenticationGetWindowsHelloForBusinessMethodsExecute(r ApiMeAuthenticationGetWindowsHelloForBusinessMethodsRequest) (MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationGetWindowsHelloForBusinessMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/windowsHelloForBusinessMethods/{windowsHelloForBusinessAuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"windowsHelloForBusinessAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.windowsHelloForBusinessAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeAuthenticationListFido2MethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeAuthenticationListFido2MethodsRequest) Top(top int32) ApiMeAuthenticationListFido2MethodsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeAuthenticationListFido2MethodsRequest) Skip(skip int32) ApiMeAuthenticationListFido2MethodsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeAuthenticationListFido2MethodsRequest) Search(search string) ApiMeAuthenticationListFido2MethodsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeAuthenticationListFido2MethodsRequest) Filter(filter string) ApiMeAuthenticationListFido2MethodsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeAuthenticationListFido2MethodsRequest) Count(count bool) ApiMeAuthenticationListFido2MethodsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeAuthenticationListFido2MethodsRequest) Orderby(orderby []string) ApiMeAuthenticationListFido2MethodsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeAuthenticationListFido2MethodsRequest) Select_(select_ []string) ApiMeAuthenticationListFido2MethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeAuthenticationListFido2MethodsRequest) Expand(expand []string) ApiMeAuthenticationListFido2MethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeAuthenticationListFido2MethodsRequest) Execute() (CollectionOfFido2AuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationListFido2MethodsExecute(r)
}

/*
MeAuthenticationListFido2Methods Get fido2Methods from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeAuthenticationListFido2MethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationListFido2Methods(ctx _context.Context) ApiMeAuthenticationListFido2MethodsRequest {
	return ApiMeAuthenticationListFido2MethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfFido2AuthenticationMethod
func (a *MeAuthenticationApiService) MeAuthenticationListFido2MethodsExecute(r ApiMeAuthenticationListFido2MethodsRequest) (CollectionOfFido2AuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfFido2AuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationListFido2Methods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/fido2Methods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeAuthenticationListMethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeAuthenticationListMethodsRequest) Top(top int32) ApiMeAuthenticationListMethodsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeAuthenticationListMethodsRequest) Skip(skip int32) ApiMeAuthenticationListMethodsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeAuthenticationListMethodsRequest) Search(search string) ApiMeAuthenticationListMethodsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeAuthenticationListMethodsRequest) Filter(filter string) ApiMeAuthenticationListMethodsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeAuthenticationListMethodsRequest) Count(count bool) ApiMeAuthenticationListMethodsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeAuthenticationListMethodsRequest) Orderby(orderby []string) ApiMeAuthenticationListMethodsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeAuthenticationListMethodsRequest) Select_(select_ []string) ApiMeAuthenticationListMethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeAuthenticationListMethodsRequest) Expand(expand []string) ApiMeAuthenticationListMethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeAuthenticationListMethodsRequest) Execute() (CollectionOfAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationListMethodsExecute(r)
}

/*
MeAuthenticationListMethods Get methods from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeAuthenticationListMethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationListMethods(ctx _context.Context) ApiMeAuthenticationListMethodsRequest {
	return ApiMeAuthenticationListMethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfAuthenticationMethod
func (a *MeAuthenticationApiService) MeAuthenticationListMethodsExecute(r ApiMeAuthenticationListMethodsRequest) (CollectionOfAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationListMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/methods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest) Top(top int32) ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest) Skip(skip int32) ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest) Search(search string) ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest) Filter(filter string) ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest) Count(count bool) ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest) Orderby(orderby []string) ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest) Select_(select_ []string) ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest) Expand(expand []string) ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest) Execute() (CollectionOfMicrosoftAuthenticatorAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationListMicrosoftAuthenticatorMethodsExecute(r)
}

/*
MeAuthenticationListMicrosoftAuthenticatorMethods Get microsoftAuthenticatorMethods from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationListMicrosoftAuthenticatorMethods(ctx _context.Context) ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	return ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfMicrosoftAuthenticatorAuthenticationMethod
func (a *MeAuthenticationApiService) MeAuthenticationListMicrosoftAuthenticatorMethodsExecute(r ApiMeAuthenticationListMicrosoftAuthenticatorMethodsRequest) (CollectionOfMicrosoftAuthenticatorAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfMicrosoftAuthenticatorAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationListMicrosoftAuthenticatorMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/microsoftAuthenticatorMethods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest) Top(top int32) ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest) Skip(skip int32) ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest) Search(search string) ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest) Filter(filter string) ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest) Count(count bool) ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest) Orderby(orderby []string) ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest) Select_(select_ []string) ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest) Expand(expand []string) ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest) Execute() (CollectionOfWindowsHelloForBusinessAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationListWindowsHelloForBusinessMethodsExecute(r)
}

/*
MeAuthenticationListWindowsHelloForBusinessMethods Get windowsHelloForBusinessMethods from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationListWindowsHelloForBusinessMethods(ctx _context.Context) ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest {
	return ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfWindowsHelloForBusinessAuthenticationMethod
func (a *MeAuthenticationApiService) MeAuthenticationListWindowsHelloForBusinessMethodsExecute(r ApiMeAuthenticationListWindowsHelloForBusinessMethodsRequest) (CollectionOfWindowsHelloForBusinessAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWindowsHelloForBusinessAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationListWindowsHelloForBusinessMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/windowsHelloForBusinessMethods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	microsoftAuthenticatorAuthenticationMethodId string
	ifMatch *string
}

// ETag
func (r ApiMeAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest) IfMatch(ifMatch string) ApiMeAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceExecute(r)
}

/*
MeAuthenticationMicrosoftAuthenticatorMethodsDeleteDevice Delete navigation property device for me

The registered device on which Microsoft Authenticator resides. This property is null if the device is not registered for passwordless Phone Sign-In.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param microsoftAuthenticatorAuthenticationMethodId key: id of microsoftAuthenticatorAuthenticationMethod
 @return ApiMeAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationMicrosoftAuthenticatorMethodsDeleteDevice(ctx _context.Context, microsoftAuthenticatorAuthenticationMethodId string) ApiMeAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest {
	return ApiMeAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest{
		ApiService: a,
		ctx: ctx,
		microsoftAuthenticatorAuthenticationMethodId: microsoftAuthenticatorAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *MeAuthenticationApiService) MeAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceExecute(r ApiMeAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationMicrosoftAuthenticatorMethodsDeleteDevice")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/microsoftAuthenticatorMethods/{microsoftAuthenticatorAuthenticationMethod-id}/device"
	localVarPath = strings.Replace(localVarPath, "{"+"microsoftAuthenticatorAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.microsoftAuthenticatorAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	microsoftAuthenticatorAuthenticationMethodId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest) Select_(select_ []string) ApiMeAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest) Expand(expand []string) ApiMeAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest {
	r.expand = &expand
	return r
}

func (r ApiMeAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest) Execute() (MicrosoftGraphDevice, *_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationMicrosoftAuthenticatorMethodsGetDeviceExecute(r)
}

/*
MeAuthenticationMicrosoftAuthenticatorMethodsGetDevice Get device from me

The registered device on which Microsoft Authenticator resides. This property is null if the device is not registered for passwordless Phone Sign-In.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param microsoftAuthenticatorAuthenticationMethodId key: id of microsoftAuthenticatorAuthenticationMethod
 @return ApiMeAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationMicrosoftAuthenticatorMethodsGetDevice(ctx _context.Context, microsoftAuthenticatorAuthenticationMethodId string) ApiMeAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest {
	return ApiMeAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest{
		ApiService: a,
		ctx: ctx,
		microsoftAuthenticatorAuthenticationMethodId: microsoftAuthenticatorAuthenticationMethodId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDevice
func (a *MeAuthenticationApiService) MeAuthenticationMicrosoftAuthenticatorMethodsGetDeviceExecute(r ApiMeAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest) (MicrosoftGraphDevice, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationMicrosoftAuthenticatorMethodsGetDevice")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/microsoftAuthenticatorMethods/{microsoftAuthenticatorAuthenticationMethod-id}/device"
	localVarPath = strings.Replace(localVarPath, "{"+"microsoftAuthenticatorAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.microsoftAuthenticatorAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	microsoftAuthenticatorAuthenticationMethodId string
	microsoftGraphDevice *MicrosoftGraphDevice
}

// New navigation property values
func (r ApiMeAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest) MicrosoftGraphDevice(microsoftGraphDevice MicrosoftGraphDevice) ApiMeAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest {
	r.microsoftGraphDevice = &microsoftGraphDevice
	return r
}

func (r ApiMeAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceExecute(r)
}

/*
MeAuthenticationMicrosoftAuthenticatorMethodsUpdateDevice Update the navigation property device in me

The registered device on which Microsoft Authenticator resides. This property is null if the device is not registered for passwordless Phone Sign-In.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param microsoftAuthenticatorAuthenticationMethodId key: id of microsoftAuthenticatorAuthenticationMethod
 @return ApiMeAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationMicrosoftAuthenticatorMethodsUpdateDevice(ctx _context.Context, microsoftAuthenticatorAuthenticationMethodId string) ApiMeAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest {
	return ApiMeAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest{
		ApiService: a,
		ctx: ctx,
		microsoftAuthenticatorAuthenticationMethodId: microsoftAuthenticatorAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *MeAuthenticationApiService) MeAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceExecute(r ApiMeAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationMicrosoftAuthenticatorMethodsUpdateDevice")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/microsoftAuthenticatorMethods/{microsoftAuthenticatorAuthenticationMethod-id}/device"
	localVarPath = strings.Replace(localVarPath, "{"+"microsoftAuthenticatorAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.microsoftAuthenticatorAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDevice == nil {
		return nil, reportError("microsoftGraphDevice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDevice
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeAuthenticationUpdateFido2MethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	fido2AuthenticationMethodId string
	microsoftGraphFido2AuthenticationMethod *MicrosoftGraphFido2AuthenticationMethod
}

// New navigation property values
func (r ApiMeAuthenticationUpdateFido2MethodsRequest) MicrosoftGraphFido2AuthenticationMethod(microsoftGraphFido2AuthenticationMethod MicrosoftGraphFido2AuthenticationMethod) ApiMeAuthenticationUpdateFido2MethodsRequest {
	r.microsoftGraphFido2AuthenticationMethod = &microsoftGraphFido2AuthenticationMethod
	return r
}

func (r ApiMeAuthenticationUpdateFido2MethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationUpdateFido2MethodsExecute(r)
}

/*
MeAuthenticationUpdateFido2Methods Update the navigation property fido2Methods in me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fido2AuthenticationMethodId key: id of fido2AuthenticationMethod
 @return ApiMeAuthenticationUpdateFido2MethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationUpdateFido2Methods(ctx _context.Context, fido2AuthenticationMethodId string) ApiMeAuthenticationUpdateFido2MethodsRequest {
	return ApiMeAuthenticationUpdateFido2MethodsRequest{
		ApiService: a,
		ctx: ctx,
		fido2AuthenticationMethodId: fido2AuthenticationMethodId,
	}
}

// Execute executes the request
func (a *MeAuthenticationApiService) MeAuthenticationUpdateFido2MethodsExecute(r ApiMeAuthenticationUpdateFido2MethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationUpdateFido2Methods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/fido2Methods/{fido2AuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"fido2AuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.fido2AuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphFido2AuthenticationMethod == nil {
		return nil, reportError("microsoftGraphFido2AuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphFido2AuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeAuthenticationUpdateMethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	authenticationMethodId string
	microsoftGraphAuthenticationMethod *MicrosoftGraphAuthenticationMethod
}

// New navigation property values
func (r ApiMeAuthenticationUpdateMethodsRequest) MicrosoftGraphAuthenticationMethod(microsoftGraphAuthenticationMethod MicrosoftGraphAuthenticationMethod) ApiMeAuthenticationUpdateMethodsRequest {
	r.microsoftGraphAuthenticationMethod = &microsoftGraphAuthenticationMethod
	return r
}

func (r ApiMeAuthenticationUpdateMethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationUpdateMethodsExecute(r)
}

/*
MeAuthenticationUpdateMethods Update the navigation property methods in me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param authenticationMethodId key: id of authenticationMethod
 @return ApiMeAuthenticationUpdateMethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationUpdateMethods(ctx _context.Context, authenticationMethodId string) ApiMeAuthenticationUpdateMethodsRequest {
	return ApiMeAuthenticationUpdateMethodsRequest{
		ApiService: a,
		ctx: ctx,
		authenticationMethodId: authenticationMethodId,
	}
}

// Execute executes the request
func (a *MeAuthenticationApiService) MeAuthenticationUpdateMethodsExecute(r ApiMeAuthenticationUpdateMethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationUpdateMethods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/methods/{authenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"authenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.authenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAuthenticationMethod == nil {
		return nil, reportError("microsoftGraphAuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	microsoftAuthenticatorAuthenticationMethodId string
	microsoftGraphMicrosoftAuthenticatorAuthenticationMethod *MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod
}

// New navigation property values
func (r ApiMeAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest) MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod(microsoftGraphMicrosoftAuthenticatorAuthenticationMethod MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod) ApiMeAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest {
	r.microsoftGraphMicrosoftAuthenticatorAuthenticationMethod = &microsoftGraphMicrosoftAuthenticatorAuthenticationMethod
	return r
}

func (r ApiMeAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationUpdateMicrosoftAuthenticatorMethodsExecute(r)
}

/*
MeAuthenticationUpdateMicrosoftAuthenticatorMethods Update the navigation property microsoftAuthenticatorMethods in me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param microsoftAuthenticatorAuthenticationMethodId key: id of microsoftAuthenticatorAuthenticationMethod
 @return ApiMeAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationUpdateMicrosoftAuthenticatorMethods(ctx _context.Context, microsoftAuthenticatorAuthenticationMethodId string) ApiMeAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest {
	return ApiMeAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest{
		ApiService: a,
		ctx: ctx,
		microsoftAuthenticatorAuthenticationMethodId: microsoftAuthenticatorAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *MeAuthenticationApiService) MeAuthenticationUpdateMicrosoftAuthenticatorMethodsExecute(r ApiMeAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationUpdateMicrosoftAuthenticatorMethods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/microsoftAuthenticatorMethods/{microsoftAuthenticatorAuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"microsoftAuthenticatorAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.microsoftAuthenticatorAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMicrosoftAuthenticatorAuthenticationMethod == nil {
		return nil, reportError("microsoftGraphMicrosoftAuthenticatorAuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMicrosoftAuthenticatorAuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeAuthenticationUpdateWindowsHelloForBusinessMethodsRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	windowsHelloForBusinessAuthenticationMethodId string
	microsoftGraphWindowsHelloForBusinessAuthenticationMethod *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod
}

// New navigation property values
func (r ApiMeAuthenticationUpdateWindowsHelloForBusinessMethodsRequest) MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod(microsoftGraphWindowsHelloForBusinessAuthenticationMethod MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod) ApiMeAuthenticationUpdateWindowsHelloForBusinessMethodsRequest {
	r.microsoftGraphWindowsHelloForBusinessAuthenticationMethod = &microsoftGraphWindowsHelloForBusinessAuthenticationMethod
	return r
}

func (r ApiMeAuthenticationUpdateWindowsHelloForBusinessMethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationUpdateWindowsHelloForBusinessMethodsExecute(r)
}

/*
MeAuthenticationUpdateWindowsHelloForBusinessMethods Update the navigation property windowsHelloForBusinessMethods in me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param windowsHelloForBusinessAuthenticationMethodId key: id of windowsHelloForBusinessAuthenticationMethod
 @return ApiMeAuthenticationUpdateWindowsHelloForBusinessMethodsRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationUpdateWindowsHelloForBusinessMethods(ctx _context.Context, windowsHelloForBusinessAuthenticationMethodId string) ApiMeAuthenticationUpdateWindowsHelloForBusinessMethodsRequest {
	return ApiMeAuthenticationUpdateWindowsHelloForBusinessMethodsRequest{
		ApiService: a,
		ctx: ctx,
		windowsHelloForBusinessAuthenticationMethodId: windowsHelloForBusinessAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *MeAuthenticationApiService) MeAuthenticationUpdateWindowsHelloForBusinessMethodsExecute(r ApiMeAuthenticationUpdateWindowsHelloForBusinessMethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationUpdateWindowsHelloForBusinessMethods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/windowsHelloForBusinessMethods/{windowsHelloForBusinessAuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"windowsHelloForBusinessAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.windowsHelloForBusinessAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWindowsHelloForBusinessAuthenticationMethod == nil {
		return nil, reportError("microsoftGraphWindowsHelloForBusinessAuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWindowsHelloForBusinessAuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	windowsHelloForBusinessAuthenticationMethodId string
	ifMatch *string
}

// ETag
func (r ApiMeAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest) IfMatch(ifMatch string) ApiMeAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceExecute(r)
}

/*
MeAuthenticationWindowsHelloForBusinessMethodsDeleteDevice Delete navigation property device for me

The registered device on which this Windows Hello for Business key resides.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param windowsHelloForBusinessAuthenticationMethodId key: id of windowsHelloForBusinessAuthenticationMethod
 @return ApiMeAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationWindowsHelloForBusinessMethodsDeleteDevice(ctx _context.Context, windowsHelloForBusinessAuthenticationMethodId string) ApiMeAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest {
	return ApiMeAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest{
		ApiService: a,
		ctx: ctx,
		windowsHelloForBusinessAuthenticationMethodId: windowsHelloForBusinessAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *MeAuthenticationApiService) MeAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceExecute(r ApiMeAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationWindowsHelloForBusinessMethodsDeleteDevice")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/windowsHelloForBusinessMethods/{windowsHelloForBusinessAuthenticationMethod-id}/device"
	localVarPath = strings.Replace(localVarPath, "{"+"windowsHelloForBusinessAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.windowsHelloForBusinessAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	windowsHelloForBusinessAuthenticationMethodId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest) Select_(select_ []string) ApiMeAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest) Expand(expand []string) ApiMeAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest {
	r.expand = &expand
	return r
}

func (r ApiMeAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest) Execute() (MicrosoftGraphDevice, *_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationWindowsHelloForBusinessMethodsGetDeviceExecute(r)
}

/*
MeAuthenticationWindowsHelloForBusinessMethodsGetDevice Get device from me

The registered device on which this Windows Hello for Business key resides.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param windowsHelloForBusinessAuthenticationMethodId key: id of windowsHelloForBusinessAuthenticationMethod
 @return ApiMeAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationWindowsHelloForBusinessMethodsGetDevice(ctx _context.Context, windowsHelloForBusinessAuthenticationMethodId string) ApiMeAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest {
	return ApiMeAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest{
		ApiService: a,
		ctx: ctx,
		windowsHelloForBusinessAuthenticationMethodId: windowsHelloForBusinessAuthenticationMethodId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDevice
func (a *MeAuthenticationApiService) MeAuthenticationWindowsHelloForBusinessMethodsGetDeviceExecute(r ApiMeAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest) (MicrosoftGraphDevice, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationWindowsHelloForBusinessMethodsGetDevice")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/windowsHelloForBusinessMethods/{windowsHelloForBusinessAuthenticationMethod-id}/device"
	localVarPath = strings.Replace(localVarPath, "{"+"windowsHelloForBusinessAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.windowsHelloForBusinessAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	windowsHelloForBusinessAuthenticationMethodId string
	microsoftGraphDevice *MicrosoftGraphDevice
}

// New navigation property values
func (r ApiMeAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest) MicrosoftGraphDevice(microsoftGraphDevice MicrosoftGraphDevice) ApiMeAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest {
	r.microsoftGraphDevice = &microsoftGraphDevice
	return r
}

func (r ApiMeAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceExecute(r)
}

/*
MeAuthenticationWindowsHelloForBusinessMethodsUpdateDevice Update the navigation property device in me

The registered device on which this Windows Hello for Business key resides.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param windowsHelloForBusinessAuthenticationMethodId key: id of windowsHelloForBusinessAuthenticationMethod
 @return ApiMeAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest
*/
func (a *MeAuthenticationApiService) MeAuthenticationWindowsHelloForBusinessMethodsUpdateDevice(ctx _context.Context, windowsHelloForBusinessAuthenticationMethodId string) ApiMeAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest {
	return ApiMeAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest{
		ApiService: a,
		ctx: ctx,
		windowsHelloForBusinessAuthenticationMethodId: windowsHelloForBusinessAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *MeAuthenticationApiService) MeAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceExecute(r ApiMeAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeAuthenticationWindowsHelloForBusinessMethodsUpdateDevice")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication/windowsHelloForBusinessMethods/{windowsHelloForBusinessAuthenticationMethod-id}/device"
	localVarPath = strings.Replace(localVarPath, "{"+"windowsHelloForBusinessAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.windowsHelloForBusinessAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDevice == nil {
		return nil, reportError("microsoftGraphDevice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDevice
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeDeleteAuthenticationRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	ifMatch *string
}

// ETag
func (r ApiMeDeleteAuthenticationRequest) IfMatch(ifMatch string) ApiMeDeleteAuthenticationRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeDeleteAuthenticationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeDeleteAuthenticationExecute(r)
}

/*
MeDeleteAuthentication Delete navigation property authentication for me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeDeleteAuthenticationRequest
*/
func (a *MeAuthenticationApiService) MeDeleteAuthentication(ctx _context.Context) ApiMeDeleteAuthenticationRequest {
	return ApiMeDeleteAuthenticationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MeAuthenticationApiService) MeDeleteAuthenticationExecute(r ApiMeDeleteAuthenticationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeDeleteAuthentication")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeGetAuthenticationRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeGetAuthenticationRequest) Select_(select_ []string) ApiMeGetAuthenticationRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeGetAuthenticationRequest) Expand(expand []string) ApiMeGetAuthenticationRequest {
	r.expand = &expand
	return r
}

func (r ApiMeGetAuthenticationRequest) Execute() (MicrosoftGraphAuthentication, *_nethttp.Response, error) {
	return r.ApiService.MeGetAuthenticationExecute(r)
}

/*
MeGetAuthentication Get authentication from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeGetAuthenticationRequest
*/
func (a *MeAuthenticationApiService) MeGetAuthentication(ctx _context.Context) ApiMeGetAuthenticationRequest {
	return ApiMeGetAuthenticationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAuthentication
func (a *MeAuthenticationApiService) MeGetAuthenticationExecute(r ApiMeGetAuthenticationRequest) (MicrosoftGraphAuthentication, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAuthentication
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeGetAuthentication")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeUpdateAuthenticationRequest struct {
	ctx _context.Context
	ApiService *MeAuthenticationApiService
	microsoftGraphAuthentication *MicrosoftGraphAuthentication
}

// New navigation property values
func (r ApiMeUpdateAuthenticationRequest) MicrosoftGraphAuthentication(microsoftGraphAuthentication MicrosoftGraphAuthentication) ApiMeUpdateAuthenticationRequest {
	r.microsoftGraphAuthentication = &microsoftGraphAuthentication
	return r
}

func (r ApiMeUpdateAuthenticationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeUpdateAuthenticationExecute(r)
}

/*
MeUpdateAuthentication Update the navigation property authentication in me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeUpdateAuthenticationRequest
*/
func (a *MeAuthenticationApiService) MeUpdateAuthentication(ctx _context.Context) ApiMeUpdateAuthenticationRequest {
	return ApiMeUpdateAuthenticationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MeAuthenticationApiService) MeUpdateAuthenticationExecute(r ApiMeUpdateAuthenticationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeAuthenticationApiService.MeUpdateAuthentication")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/authentication"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAuthentication == nil {
		return nil, reportError("microsoftGraphAuthentication is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAuthentication
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
