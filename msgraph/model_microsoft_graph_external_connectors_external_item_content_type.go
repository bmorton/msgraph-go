/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphExternalConnectorsExternalItemContentType the model 'MicrosoftGraphExternalConnectorsExternalItemContentType'
type MicrosoftGraphExternalConnectorsExternalItemContentType string

// List of microsoft.graph.externalConnectors.externalItemContentType
const (
	TEXT MicrosoftGraphExternalConnectorsExternalItemContentType = "text"
	HTML MicrosoftGraphExternalConnectorsExternalItemContentType = "html"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphExternalConnectorsExternalItemContentType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphExternalConnectorsExternalItemContentType enum
var AllowedMicrosoftGraphExternalConnectorsExternalItemContentTypeEnumValues = []MicrosoftGraphExternalConnectorsExternalItemContentType{
	"text",
	"html",
	"unknownFutureValue",
}

func (v *MicrosoftGraphExternalConnectorsExternalItemContentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphExternalConnectorsExternalItemContentType(value)
	for _, existing := range AllowedMicrosoftGraphExternalConnectorsExternalItemContentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphExternalConnectorsExternalItemContentType", value)
}

// NewMicrosoftGraphExternalConnectorsExternalItemContentTypeFromValue returns a pointer to a valid MicrosoftGraphExternalConnectorsExternalItemContentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphExternalConnectorsExternalItemContentTypeFromValue(v string) (*MicrosoftGraphExternalConnectorsExternalItemContentType, error) {
	ev := MicrosoftGraphExternalConnectorsExternalItemContentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphExternalConnectorsExternalItemContentType: valid values are %v", v, AllowedMicrosoftGraphExternalConnectorsExternalItemContentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphExternalConnectorsExternalItemContentType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphExternalConnectorsExternalItemContentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.externalConnectors.externalItemContentType value
func (v MicrosoftGraphExternalConnectorsExternalItemContentType) Ptr() *MicrosoftGraphExternalConnectorsExternalItemContentType {
	return &v
}

type NullableMicrosoftGraphExternalConnectorsExternalItemContentType struct {
	value *MicrosoftGraphExternalConnectorsExternalItemContentType
	isSet bool
}

func (v NullableMicrosoftGraphExternalConnectorsExternalItemContentType) Get() *MicrosoftGraphExternalConnectorsExternalItemContentType {
	return v.value
}

func (v *NullableMicrosoftGraphExternalConnectorsExternalItemContentType) Set(val *MicrosoftGraphExternalConnectorsExternalItemContentType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphExternalConnectorsExternalItemContentType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphExternalConnectorsExternalItemContentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphExternalConnectorsExternalItemContentType(val *MicrosoftGraphExternalConnectorsExternalItemContentType) *NullableMicrosoftGraphExternalConnectorsExternalItemContentType {
	return &NullableMicrosoftGraphExternalConnectorsExternalItemContentType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphExternalConnectorsExternalItemContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphExternalConnectorsExternalItemContentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

