/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// InlineObject523 struct for InlineObject523
type InlineObject523 struct {
	ApplyTo *string `json:"applyTo,omitempty"`
}

// NewInlineObject523 instantiates a new InlineObject523 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject523() *InlineObject523 {
	this := InlineObject523{}
	return &this
}

// NewInlineObject523WithDefaults instantiates a new InlineObject523 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject523WithDefaults() *InlineObject523 {
	this := InlineObject523{}
	return &this
}

// GetApplyTo returns the ApplyTo field value if set, zero value otherwise.
func (o *InlineObject523) GetApplyTo() string {
	if o == nil || o.ApplyTo == nil {
		var ret string
		return ret
	}
	return *o.ApplyTo
}

// GetApplyToOk returns a tuple with the ApplyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject523) GetApplyToOk() (*string, bool) {
	if o == nil || o.ApplyTo == nil {
		return nil, false
	}
	return o.ApplyTo, true
}

// HasApplyTo returns a boolean if a field has been set.
func (o *InlineObject523) HasApplyTo() bool {
	if o != nil && o.ApplyTo != nil {
		return true
	}

	return false
}

// SetApplyTo gets a reference to the given string and assigns it to the ApplyTo field.
func (o *InlineObject523) SetApplyTo(v string) {
	o.ApplyTo = &v
}

func (o InlineObject523) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApplyTo != nil {
		toSerialize["applyTo"] = o.ApplyTo
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject523 struct {
	value *InlineObject523
	isSet bool
}

func (v NullableInlineObject523) Get() *InlineObject523 {
	return v.value
}

func (v *NullableInlineObject523) Set(val *InlineObject523) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject523) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject523) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject523(val *InlineObject523) *NullableInlineObject523 {
	return &NullableInlineObject523{value: val, isSet: true}
}

func (v NullableInlineObject523) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject523) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


