/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphResponseType the model 'MicrosoftGraphResponseType'
type MicrosoftGraphResponseType string

// List of microsoft.graph.responseType
const (
	NONE MicrosoftGraphResponseType = "none"
	ORGANIZER MicrosoftGraphResponseType = "organizer"
	TENTATIVELY_ACCEPTED MicrosoftGraphResponseType = "tentativelyAccepted"
	ACCEPTED MicrosoftGraphResponseType = "accepted"
	DECLINED MicrosoftGraphResponseType = "declined"
	NOT_RESPONDED MicrosoftGraphResponseType = "notResponded"
)

// All allowed values of MicrosoftGraphResponseType enum
var AllowedMicrosoftGraphResponseTypeEnumValues = []MicrosoftGraphResponseType{
	"none",
	"organizer",
	"tentativelyAccepted",
	"accepted",
	"declined",
	"notResponded",
}

func (v *MicrosoftGraphResponseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphResponseType(value)
	for _, existing := range AllowedMicrosoftGraphResponseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphResponseType", value)
}

// NewMicrosoftGraphResponseTypeFromValue returns a pointer to a valid MicrosoftGraphResponseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphResponseTypeFromValue(v string) (*MicrosoftGraphResponseType, error) {
	ev := MicrosoftGraphResponseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphResponseType: valid values are %v", v, AllowedMicrosoftGraphResponseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphResponseType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphResponseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.responseType value
func (v MicrosoftGraphResponseType) Ptr() *MicrosoftGraphResponseType {
	return &v
}

type NullableMicrosoftGraphResponseType struct {
	value *MicrosoftGraphResponseType
	isSet bool
}

func (v NullableMicrosoftGraphResponseType) Get() *MicrosoftGraphResponseType {
	return v.value
}

func (v *NullableMicrosoftGraphResponseType) Set(val *MicrosoftGraphResponseType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphResponseType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphResponseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphResponseType(val *MicrosoftGraphResponseType) *NullableMicrosoftGraphResponseType {
	return &NullableMicrosoftGraphResponseType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphResponseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphResponseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

