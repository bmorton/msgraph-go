/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MicrosoftGraphShiftAvailability struct for MicrosoftGraphShiftAvailability
type MicrosoftGraphShiftAvailability struct {
	// Specifies the pattern for recurrence
	Recurrence AnyOfmicrosoftGraphPatternedRecurrence `json:"recurrence,omitempty"`
	// The time slot(s) preferred by the user.
	TimeSlots *[]*AnyOfmicrosoftGraphTimeRange `json:"timeSlots,omitempty"`
	// Specifies the time zone for the indicated time.
	TimeZone NullableString `json:"timeZone,omitempty"`
}

// NewMicrosoftGraphShiftAvailability instantiates a new MicrosoftGraphShiftAvailability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphShiftAvailability() *MicrosoftGraphShiftAvailability {
	this := MicrosoftGraphShiftAvailability{}
	return &this
}

// NewMicrosoftGraphShiftAvailabilityWithDefaults instantiates a new MicrosoftGraphShiftAvailability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphShiftAvailabilityWithDefaults() *MicrosoftGraphShiftAvailability {
	this := MicrosoftGraphShiftAvailability{}
	return &this
}

// GetRecurrence returns the Recurrence field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphShiftAvailability) GetRecurrence() AnyOfmicrosoftGraphPatternedRecurrence {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPatternedRecurrence
		return ret
	}
	return o.Recurrence
}

// GetRecurrenceOk returns a tuple with the Recurrence field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphShiftAvailability) GetRecurrenceOk() (*AnyOfmicrosoftGraphPatternedRecurrence, bool) {
	if o == nil || o.Recurrence == nil {
		return nil, false
	}
	return &o.Recurrence, true
}

// HasRecurrence returns a boolean if a field has been set.
func (o *MicrosoftGraphShiftAvailability) HasRecurrence() bool {
	if o != nil && o.Recurrence != nil {
		return true
	}

	return false
}

// SetRecurrence gets a reference to the given AnyOfmicrosoftGraphPatternedRecurrence and assigns it to the Recurrence field.
func (o *MicrosoftGraphShiftAvailability) SetRecurrence(v AnyOfmicrosoftGraphPatternedRecurrence) {
	o.Recurrence = v
}

// GetTimeSlots returns the TimeSlots field value if set, zero value otherwise.
func (o *MicrosoftGraphShiftAvailability) GetTimeSlots() []*AnyOfmicrosoftGraphTimeRange {
	if o == nil || o.TimeSlots == nil {
		var ret []*AnyOfmicrosoftGraphTimeRange
		return ret
	}
	return *o.TimeSlots
}

// GetTimeSlotsOk returns a tuple with the TimeSlots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphShiftAvailability) GetTimeSlotsOk() (*[]*AnyOfmicrosoftGraphTimeRange, bool) {
	if o == nil || o.TimeSlots == nil {
		return nil, false
	}
	return o.TimeSlots, true
}

// HasTimeSlots returns a boolean if a field has been set.
func (o *MicrosoftGraphShiftAvailability) HasTimeSlots() bool {
	if o != nil && o.TimeSlots != nil {
		return true
	}

	return false
}

// SetTimeSlots gets a reference to the given []*AnyOfmicrosoftGraphTimeRange and assigns it to the TimeSlots field.
func (o *MicrosoftGraphShiftAvailability) SetTimeSlots(v []*AnyOfmicrosoftGraphTimeRange) {
	o.TimeSlots = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphShiftAvailability) GetTimeZone() string {
	if o == nil || o.TimeZone.Get() == nil {
		var ret string
		return ret
	}
	return *o.TimeZone.Get()
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphShiftAvailability) GetTimeZoneOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimeZone.Get(), o.TimeZone.IsSet()
}

// HasTimeZone returns a boolean if a field has been set.
func (o *MicrosoftGraphShiftAvailability) HasTimeZone() bool {
	if o != nil && o.TimeZone.IsSet() {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given NullableString and assigns it to the TimeZone field.
func (o *MicrosoftGraphShiftAvailability) SetTimeZone(v string) {
	o.TimeZone.Set(&v)
}
// SetTimeZoneNil sets the value for TimeZone to be an explicit nil
func (o *MicrosoftGraphShiftAvailability) SetTimeZoneNil() {
	o.TimeZone.Set(nil)
}

// UnsetTimeZone ensures that no value is present for TimeZone, not even an explicit nil
func (o *MicrosoftGraphShiftAvailability) UnsetTimeZone() {
	o.TimeZone.Unset()
}

func (o MicrosoftGraphShiftAvailability) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Recurrence != nil {
		toSerialize["recurrence"] = o.Recurrence
	}
	if o.TimeSlots != nil {
		toSerialize["timeSlots"] = o.TimeSlots
	}
	if o.TimeZone.IsSet() {
		toSerialize["timeZone"] = o.TimeZone.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphShiftAvailability struct {
	value *MicrosoftGraphShiftAvailability
	isSet bool
}

func (v NullableMicrosoftGraphShiftAvailability) Get() *MicrosoftGraphShiftAvailability {
	return v.value
}

func (v *NullableMicrosoftGraphShiftAvailability) Set(val *MicrosoftGraphShiftAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphShiftAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphShiftAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphShiftAvailability(val *MicrosoftGraphShiftAvailability) *NullableMicrosoftGraphShiftAvailability {
	return &NullableMicrosoftGraphShiftAvailability{value: val, isSet: true}
}

func (v NullableMicrosoftGraphShiftAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphShiftAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


