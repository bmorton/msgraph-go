/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphTargetedManagedAppGroupType Indicates a collection of apps to target which can be one of several pre-defined lists of apps or a manually selected list of apps
type MicrosoftGraphTargetedManagedAppGroupType string

// List of microsoft.graph.targetedManagedAppGroupType
const (
	SELECTED_PUBLIC_APPS MicrosoftGraphTargetedManagedAppGroupType = "selectedPublicApps"
	ALL_CORE_MICROSOFT_APPS MicrosoftGraphTargetedManagedAppGroupType = "allCoreMicrosoftApps"
	ALL_MICROSOFT_APPS MicrosoftGraphTargetedManagedAppGroupType = "allMicrosoftApps"
	ALL_APPS MicrosoftGraphTargetedManagedAppGroupType = "allApps"
)

// All allowed values of MicrosoftGraphTargetedManagedAppGroupType enum
var AllowedMicrosoftGraphTargetedManagedAppGroupTypeEnumValues = []MicrosoftGraphTargetedManagedAppGroupType{
	"selectedPublicApps",
	"allCoreMicrosoftApps",
	"allMicrosoftApps",
	"allApps",
}

func (v *MicrosoftGraphTargetedManagedAppGroupType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphTargetedManagedAppGroupType(value)
	for _, existing := range AllowedMicrosoftGraphTargetedManagedAppGroupTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphTargetedManagedAppGroupType", value)
}

// NewMicrosoftGraphTargetedManagedAppGroupTypeFromValue returns a pointer to a valid MicrosoftGraphTargetedManagedAppGroupType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphTargetedManagedAppGroupTypeFromValue(v string) (*MicrosoftGraphTargetedManagedAppGroupType, error) {
	ev := MicrosoftGraphTargetedManagedAppGroupType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphTargetedManagedAppGroupType: valid values are %v", v, AllowedMicrosoftGraphTargetedManagedAppGroupTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphTargetedManagedAppGroupType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphTargetedManagedAppGroupTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.targetedManagedAppGroupType value
func (v MicrosoftGraphTargetedManagedAppGroupType) Ptr() *MicrosoftGraphTargetedManagedAppGroupType {
	return &v
}

type NullableMicrosoftGraphTargetedManagedAppGroupType struct {
	value *MicrosoftGraphTargetedManagedAppGroupType
	isSet bool
}

func (v NullableMicrosoftGraphTargetedManagedAppGroupType) Get() *MicrosoftGraphTargetedManagedAppGroupType {
	return v.value
}

func (v *NullableMicrosoftGraphTargetedManagedAppGroupType) Set(val *MicrosoftGraphTargetedManagedAppGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphTargetedManagedAppGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphTargetedManagedAppGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphTargetedManagedAppGroupType(val *MicrosoftGraphTargetedManagedAppGroupType) *NullableMicrosoftGraphTargetedManagedAppGroupType {
	return &NullableMicrosoftGraphTargetedManagedAppGroupType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphTargetedManagedAppGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphTargetedManagedAppGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

