/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"time"
)

// Permission struct for Permission
type Permission struct {
	// A format of yyyy-MM-ddTHH:mm:ssZ of DateTimeOffset indicates the expiration time of the permission. DateTime.MinValue indicates there is no expiration set for this permission. Optional.
	ExpirationDateTime NullableTime `json:"expirationDateTime,omitempty"`
	GrantedTo AnyOfmicrosoftGraphIdentitySet `json:"grantedTo,omitempty"`
	GrantedToIdentities *[]*AnyOfmicrosoftGraphIdentitySet `json:"grantedToIdentities,omitempty"`
	// For link type permissions, the details of the users to whom permission was granted. Read-only.
	GrantedToIdentitiesV2 *[]*AnyOfmicrosoftGraphSharePointIdentitySet `json:"grantedToIdentitiesV2,omitempty"`
	// For user type permissions, the details of the users and applications for this permission. Read-only.
	GrantedToV2 AnyOfmicrosoftGraphSharePointIdentitySet `json:"grantedToV2,omitempty"`
	// Indicates whether the password is set for this permission. This property only appears in the response. Optional. Read-only. For OneDrive Personal only..
	HasPassword NullableBool `json:"hasPassword,omitempty"`
	// Provides a reference to the ancestor of the current permission, if it is inherited from an ancestor. Read-only.
	InheritedFrom AnyOfmicrosoftGraphItemReference `json:"inheritedFrom,omitempty"`
	// Details of any associated sharing invitation for this permission. Read-only.
	Invitation AnyOfmicrosoftGraphSharingInvitation `json:"invitation,omitempty"`
	// Provides the link details of the current permission, if it is a link type permissions. Read-only.
	Link AnyOfmicrosoftGraphSharingLink `json:"link,omitempty"`
	// The type of permission, for example, read. See below for the full list of roles. Read-only.
	Roles *[]*string `json:"roles,omitempty"`
	// A unique token that can be used to access this shared item via the **shares** API. Read-only.
	ShareId NullableString `json:"shareId,omitempty"`
}

// NewPermission instantiates a new Permission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermission() *Permission {
	this := Permission{}
	return &this
}

// NewPermissionWithDefaults instantiates a new Permission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionWithDefaults() *Permission {
	this := Permission{}
	return &this
}

// GetExpirationDateTime returns the ExpirationDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Permission) GetExpirationDateTime() time.Time {
	if o == nil || o.ExpirationDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDateTime.Get()
}

// GetExpirationDateTimeOk returns a tuple with the ExpirationDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Permission) GetExpirationDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpirationDateTime.Get(), o.ExpirationDateTime.IsSet()
}

// HasExpirationDateTime returns a boolean if a field has been set.
func (o *Permission) HasExpirationDateTime() bool {
	if o != nil && o.ExpirationDateTime.IsSet() {
		return true
	}

	return false
}

// SetExpirationDateTime gets a reference to the given NullableTime and assigns it to the ExpirationDateTime field.
func (o *Permission) SetExpirationDateTime(v time.Time) {
	o.ExpirationDateTime.Set(&v)
}
// SetExpirationDateTimeNil sets the value for ExpirationDateTime to be an explicit nil
func (o *Permission) SetExpirationDateTimeNil() {
	o.ExpirationDateTime.Set(nil)
}

// UnsetExpirationDateTime ensures that no value is present for ExpirationDateTime, not even an explicit nil
func (o *Permission) UnsetExpirationDateTime() {
	o.ExpirationDateTime.Unset()
}

// GetGrantedTo returns the GrantedTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Permission) GetGrantedTo() AnyOfmicrosoftGraphIdentitySet {
	if o == nil  {
		var ret AnyOfmicrosoftGraphIdentitySet
		return ret
	}
	return o.GrantedTo
}

// GetGrantedToOk returns a tuple with the GrantedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Permission) GetGrantedToOk() (*AnyOfmicrosoftGraphIdentitySet, bool) {
	if o == nil || o.GrantedTo == nil {
		return nil, false
	}
	return &o.GrantedTo, true
}

// HasGrantedTo returns a boolean if a field has been set.
func (o *Permission) HasGrantedTo() bool {
	if o != nil && o.GrantedTo != nil {
		return true
	}

	return false
}

// SetGrantedTo gets a reference to the given AnyOfmicrosoftGraphIdentitySet and assigns it to the GrantedTo field.
func (o *Permission) SetGrantedTo(v AnyOfmicrosoftGraphIdentitySet) {
	o.GrantedTo = v
}

// GetGrantedToIdentities returns the GrantedToIdentities field value if set, zero value otherwise.
func (o *Permission) GetGrantedToIdentities() []*AnyOfmicrosoftGraphIdentitySet {
	if o == nil || o.GrantedToIdentities == nil {
		var ret []*AnyOfmicrosoftGraphIdentitySet
		return ret
	}
	return *o.GrantedToIdentities
}

// GetGrantedToIdentitiesOk returns a tuple with the GrantedToIdentities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetGrantedToIdentitiesOk() (*[]*AnyOfmicrosoftGraphIdentitySet, bool) {
	if o == nil || o.GrantedToIdentities == nil {
		return nil, false
	}
	return o.GrantedToIdentities, true
}

// HasGrantedToIdentities returns a boolean if a field has been set.
func (o *Permission) HasGrantedToIdentities() bool {
	if o != nil && o.GrantedToIdentities != nil {
		return true
	}

	return false
}

// SetGrantedToIdentities gets a reference to the given []*AnyOfmicrosoftGraphIdentitySet and assigns it to the GrantedToIdentities field.
func (o *Permission) SetGrantedToIdentities(v []*AnyOfmicrosoftGraphIdentitySet) {
	o.GrantedToIdentities = &v
}

// GetGrantedToIdentitiesV2 returns the GrantedToIdentitiesV2 field value if set, zero value otherwise.
func (o *Permission) GetGrantedToIdentitiesV2() []*AnyOfmicrosoftGraphSharePointIdentitySet {
	if o == nil || o.GrantedToIdentitiesV2 == nil {
		var ret []*AnyOfmicrosoftGraphSharePointIdentitySet
		return ret
	}
	return *o.GrantedToIdentitiesV2
}

// GetGrantedToIdentitiesV2Ok returns a tuple with the GrantedToIdentitiesV2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetGrantedToIdentitiesV2Ok() (*[]*AnyOfmicrosoftGraphSharePointIdentitySet, bool) {
	if o == nil || o.GrantedToIdentitiesV2 == nil {
		return nil, false
	}
	return o.GrantedToIdentitiesV2, true
}

// HasGrantedToIdentitiesV2 returns a boolean if a field has been set.
func (o *Permission) HasGrantedToIdentitiesV2() bool {
	if o != nil && o.GrantedToIdentitiesV2 != nil {
		return true
	}

	return false
}

// SetGrantedToIdentitiesV2 gets a reference to the given []*AnyOfmicrosoftGraphSharePointIdentitySet and assigns it to the GrantedToIdentitiesV2 field.
func (o *Permission) SetGrantedToIdentitiesV2(v []*AnyOfmicrosoftGraphSharePointIdentitySet) {
	o.GrantedToIdentitiesV2 = &v
}

// GetGrantedToV2 returns the GrantedToV2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Permission) GetGrantedToV2() AnyOfmicrosoftGraphSharePointIdentitySet {
	if o == nil  {
		var ret AnyOfmicrosoftGraphSharePointIdentitySet
		return ret
	}
	return o.GrantedToV2
}

// GetGrantedToV2Ok returns a tuple with the GrantedToV2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Permission) GetGrantedToV2Ok() (*AnyOfmicrosoftGraphSharePointIdentitySet, bool) {
	if o == nil || o.GrantedToV2 == nil {
		return nil, false
	}
	return &o.GrantedToV2, true
}

// HasGrantedToV2 returns a boolean if a field has been set.
func (o *Permission) HasGrantedToV2() bool {
	if o != nil && o.GrantedToV2 != nil {
		return true
	}

	return false
}

// SetGrantedToV2 gets a reference to the given AnyOfmicrosoftGraphSharePointIdentitySet and assigns it to the GrantedToV2 field.
func (o *Permission) SetGrantedToV2(v AnyOfmicrosoftGraphSharePointIdentitySet) {
	o.GrantedToV2 = v
}

// GetHasPassword returns the HasPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Permission) GetHasPassword() bool {
	if o == nil || o.HasPassword.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HasPassword.Get()
}

// GetHasPasswordOk returns a tuple with the HasPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Permission) GetHasPasswordOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HasPassword.Get(), o.HasPassword.IsSet()
}

// HasHasPassword returns a boolean if a field has been set.
func (o *Permission) HasHasPassword() bool {
	if o != nil && o.HasPassword.IsSet() {
		return true
	}

	return false
}

// SetHasPassword gets a reference to the given NullableBool and assigns it to the HasPassword field.
func (o *Permission) SetHasPassword(v bool) {
	o.HasPassword.Set(&v)
}
// SetHasPasswordNil sets the value for HasPassword to be an explicit nil
func (o *Permission) SetHasPasswordNil() {
	o.HasPassword.Set(nil)
}

// UnsetHasPassword ensures that no value is present for HasPassword, not even an explicit nil
func (o *Permission) UnsetHasPassword() {
	o.HasPassword.Unset()
}

// GetInheritedFrom returns the InheritedFrom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Permission) GetInheritedFrom() AnyOfmicrosoftGraphItemReference {
	if o == nil  {
		var ret AnyOfmicrosoftGraphItemReference
		return ret
	}
	return o.InheritedFrom
}

// GetInheritedFromOk returns a tuple with the InheritedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Permission) GetInheritedFromOk() (*AnyOfmicrosoftGraphItemReference, bool) {
	if o == nil || o.InheritedFrom == nil {
		return nil, false
	}
	return &o.InheritedFrom, true
}

// HasInheritedFrom returns a boolean if a field has been set.
func (o *Permission) HasInheritedFrom() bool {
	if o != nil && o.InheritedFrom != nil {
		return true
	}

	return false
}

// SetInheritedFrom gets a reference to the given AnyOfmicrosoftGraphItemReference and assigns it to the InheritedFrom field.
func (o *Permission) SetInheritedFrom(v AnyOfmicrosoftGraphItemReference) {
	o.InheritedFrom = v
}

// GetInvitation returns the Invitation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Permission) GetInvitation() AnyOfmicrosoftGraphSharingInvitation {
	if o == nil  {
		var ret AnyOfmicrosoftGraphSharingInvitation
		return ret
	}
	return o.Invitation
}

// GetInvitationOk returns a tuple with the Invitation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Permission) GetInvitationOk() (*AnyOfmicrosoftGraphSharingInvitation, bool) {
	if o == nil || o.Invitation == nil {
		return nil, false
	}
	return &o.Invitation, true
}

// HasInvitation returns a boolean if a field has been set.
func (o *Permission) HasInvitation() bool {
	if o != nil && o.Invitation != nil {
		return true
	}

	return false
}

// SetInvitation gets a reference to the given AnyOfmicrosoftGraphSharingInvitation and assigns it to the Invitation field.
func (o *Permission) SetInvitation(v AnyOfmicrosoftGraphSharingInvitation) {
	o.Invitation = v
}

// GetLink returns the Link field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Permission) GetLink() AnyOfmicrosoftGraphSharingLink {
	if o == nil  {
		var ret AnyOfmicrosoftGraphSharingLink
		return ret
	}
	return o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Permission) GetLinkOk() (*AnyOfmicrosoftGraphSharingLink, bool) {
	if o == nil || o.Link == nil {
		return nil, false
	}
	return &o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *Permission) HasLink() bool {
	if o != nil && o.Link != nil {
		return true
	}

	return false
}

// SetLink gets a reference to the given AnyOfmicrosoftGraphSharingLink and assigns it to the Link field.
func (o *Permission) SetLink(v AnyOfmicrosoftGraphSharingLink) {
	o.Link = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Permission) GetRoles() []*string {
	if o == nil || o.Roles == nil {
		var ret []*string
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetRolesOk() (*[]*string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Permission) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []*string and assigns it to the Roles field.
func (o *Permission) SetRoles(v []*string) {
	o.Roles = &v
}

// GetShareId returns the ShareId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Permission) GetShareId() string {
	if o == nil || o.ShareId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ShareId.Get()
}

// GetShareIdOk returns a tuple with the ShareId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Permission) GetShareIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ShareId.Get(), o.ShareId.IsSet()
}

// HasShareId returns a boolean if a field has been set.
func (o *Permission) HasShareId() bool {
	if o != nil && o.ShareId.IsSet() {
		return true
	}

	return false
}

// SetShareId gets a reference to the given NullableString and assigns it to the ShareId field.
func (o *Permission) SetShareId(v string) {
	o.ShareId.Set(&v)
}
// SetShareIdNil sets the value for ShareId to be an explicit nil
func (o *Permission) SetShareIdNil() {
	o.ShareId.Set(nil)
}

// UnsetShareId ensures that no value is present for ShareId, not even an explicit nil
func (o *Permission) UnsetShareId() {
	o.ShareId.Unset()
}

func (o Permission) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpirationDateTime.IsSet() {
		toSerialize["expirationDateTime"] = o.ExpirationDateTime.Get()
	}
	if o.GrantedTo != nil {
		toSerialize["grantedTo"] = o.GrantedTo
	}
	if o.GrantedToIdentities != nil {
		toSerialize["grantedToIdentities"] = o.GrantedToIdentities
	}
	if o.GrantedToIdentitiesV2 != nil {
		toSerialize["grantedToIdentitiesV2"] = o.GrantedToIdentitiesV2
	}
	if o.GrantedToV2 != nil {
		toSerialize["grantedToV2"] = o.GrantedToV2
	}
	if o.HasPassword.IsSet() {
		toSerialize["hasPassword"] = o.HasPassword.Get()
	}
	if o.InheritedFrom != nil {
		toSerialize["inheritedFrom"] = o.InheritedFrom
	}
	if o.Invitation != nil {
		toSerialize["invitation"] = o.Invitation
	}
	if o.Link != nil {
		toSerialize["link"] = o.Link
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.ShareId.IsSet() {
		toSerialize["shareId"] = o.ShareId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePermission struct {
	value *Permission
	isSet bool
}

func (v NullablePermission) Get() *Permission {
	return v.value
}

func (v *NullablePermission) Set(val *Permission) {
	v.value = val
	v.isSet = true
}

func (v NullablePermission) IsSet() bool {
	return v.isSet
}

func (v *NullablePermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermission(val *Permission) *NullablePermission {
	return &NullablePermission{value: val, isSet: true}
}

func (v NullablePermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


