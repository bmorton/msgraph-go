/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AppConsentRequest struct for AppConsentRequest
type AppConsentRequest struct {
	// The display name of the app for which consent is requested. Required. Supports $filter (eq only) and $orderby.
	AppDisplayName NullableString `json:"appDisplayName,omitempty"`
	// The identifier of the application. Required. Supports $filter (eq only) and $orderby.
	AppId *string `json:"appId,omitempty"`
	// A list of pending scopes waiting for approval. Required.
	PendingScopes *[]*AnyOfmicrosoftGraphAppConsentRequestScope `json:"pendingScopes,omitempty"`
	// A list of pending user consent requests.
	UserConsentRequests *[]MicrosoftGraphUserConsentRequest `json:"userConsentRequests,omitempty"`
}

// NewAppConsentRequest instantiates a new AppConsentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppConsentRequest() *AppConsentRequest {
	this := AppConsentRequest{}
	return &this
}

// NewAppConsentRequestWithDefaults instantiates a new AppConsentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppConsentRequestWithDefaults() *AppConsentRequest {
	this := AppConsentRequest{}
	return &this
}

// GetAppDisplayName returns the AppDisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppConsentRequest) GetAppDisplayName() string {
	if o == nil || o.AppDisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AppDisplayName.Get()
}

// GetAppDisplayNameOk returns a tuple with the AppDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppConsentRequest) GetAppDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppDisplayName.Get(), o.AppDisplayName.IsSet()
}

// HasAppDisplayName returns a boolean if a field has been set.
func (o *AppConsentRequest) HasAppDisplayName() bool {
	if o != nil && o.AppDisplayName.IsSet() {
		return true
	}

	return false
}

// SetAppDisplayName gets a reference to the given NullableString and assigns it to the AppDisplayName field.
func (o *AppConsentRequest) SetAppDisplayName(v string) {
	o.AppDisplayName.Set(&v)
}
// SetAppDisplayNameNil sets the value for AppDisplayName to be an explicit nil
func (o *AppConsentRequest) SetAppDisplayNameNil() {
	o.AppDisplayName.Set(nil)
}

// UnsetAppDisplayName ensures that no value is present for AppDisplayName, not even an explicit nil
func (o *AppConsentRequest) UnsetAppDisplayName() {
	o.AppDisplayName.Unset()
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *AppConsentRequest) GetAppId() string {
	if o == nil || o.AppId == nil {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppConsentRequest) GetAppIdOk() (*string, bool) {
	if o == nil || o.AppId == nil {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *AppConsentRequest) HasAppId() bool {
	if o != nil && o.AppId != nil {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *AppConsentRequest) SetAppId(v string) {
	o.AppId = &v
}

// GetPendingScopes returns the PendingScopes field value if set, zero value otherwise.
func (o *AppConsentRequest) GetPendingScopes() []*AnyOfmicrosoftGraphAppConsentRequestScope {
	if o == nil || o.PendingScopes == nil {
		var ret []*AnyOfmicrosoftGraphAppConsentRequestScope
		return ret
	}
	return *o.PendingScopes
}

// GetPendingScopesOk returns a tuple with the PendingScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppConsentRequest) GetPendingScopesOk() (*[]*AnyOfmicrosoftGraphAppConsentRequestScope, bool) {
	if o == nil || o.PendingScopes == nil {
		return nil, false
	}
	return o.PendingScopes, true
}

// HasPendingScopes returns a boolean if a field has been set.
func (o *AppConsentRequest) HasPendingScopes() bool {
	if o != nil && o.PendingScopes != nil {
		return true
	}

	return false
}

// SetPendingScopes gets a reference to the given []*AnyOfmicrosoftGraphAppConsentRequestScope and assigns it to the PendingScopes field.
func (o *AppConsentRequest) SetPendingScopes(v []*AnyOfmicrosoftGraphAppConsentRequestScope) {
	o.PendingScopes = &v
}

// GetUserConsentRequests returns the UserConsentRequests field value if set, zero value otherwise.
func (o *AppConsentRequest) GetUserConsentRequests() []MicrosoftGraphUserConsentRequest {
	if o == nil || o.UserConsentRequests == nil {
		var ret []MicrosoftGraphUserConsentRequest
		return ret
	}
	return *o.UserConsentRequests
}

// GetUserConsentRequestsOk returns a tuple with the UserConsentRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppConsentRequest) GetUserConsentRequestsOk() (*[]MicrosoftGraphUserConsentRequest, bool) {
	if o == nil || o.UserConsentRequests == nil {
		return nil, false
	}
	return o.UserConsentRequests, true
}

// HasUserConsentRequests returns a boolean if a field has been set.
func (o *AppConsentRequest) HasUserConsentRequests() bool {
	if o != nil && o.UserConsentRequests != nil {
		return true
	}

	return false
}

// SetUserConsentRequests gets a reference to the given []MicrosoftGraphUserConsentRequest and assigns it to the UserConsentRequests field.
func (o *AppConsentRequest) SetUserConsentRequests(v []MicrosoftGraphUserConsentRequest) {
	o.UserConsentRequests = &v
}

func (o AppConsentRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppDisplayName.IsSet() {
		toSerialize["appDisplayName"] = o.AppDisplayName.Get()
	}
	if o.AppId != nil {
		toSerialize["appId"] = o.AppId
	}
	if o.PendingScopes != nil {
		toSerialize["pendingScopes"] = o.PendingScopes
	}
	if o.UserConsentRequests != nil {
		toSerialize["userConsentRequests"] = o.UserConsentRequests
	}
	return json.Marshal(toSerialize)
}

type NullableAppConsentRequest struct {
	value *AppConsentRequest
	isSet bool
}

func (v NullableAppConsentRequest) Get() *AppConsentRequest {
	return v.value
}

func (v *NullableAppConsentRequest) Set(val *AppConsentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAppConsentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAppConsentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppConsentRequest(val *AppConsentRequest) *NullableAppConsentRequest {
	return &NullableAppConsentRequest{value: val, isSet: true}
}

func (v NullableAppConsentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppConsentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


