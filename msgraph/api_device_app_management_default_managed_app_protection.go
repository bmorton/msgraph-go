/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceAppManagementDefaultManagedAppProtectionApiService DeviceAppManagementDefaultManagedAppProtectionApi service
type DeviceAppManagementDefaultManagedAppProtectionApiService service

type ApiDeviceAppManagementCreateDefaultManagedAppProtectionsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementDefaultManagedAppProtectionApiService
	microsoftGraphDefaultManagedAppProtection *MicrosoftGraphDefaultManagedAppProtection
}

// New navigation property
func (r ApiDeviceAppManagementCreateDefaultManagedAppProtectionsRequest) MicrosoftGraphDefaultManagedAppProtection(microsoftGraphDefaultManagedAppProtection MicrosoftGraphDefaultManagedAppProtection) ApiDeviceAppManagementCreateDefaultManagedAppProtectionsRequest {
	r.microsoftGraphDefaultManagedAppProtection = &microsoftGraphDefaultManagedAppProtection
	return r
}

func (r ApiDeviceAppManagementCreateDefaultManagedAppProtectionsRequest) Execute() (MicrosoftGraphDefaultManagedAppProtection, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementCreateDefaultManagedAppProtectionsExecute(r)
}

/*
DeviceAppManagementCreateDefaultManagedAppProtections Create new navigation property to defaultManagedAppProtections for deviceAppManagement

Default managed app policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementCreateDefaultManagedAppProtectionsRequest
*/
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementCreateDefaultManagedAppProtections(ctx _context.Context) ApiDeviceAppManagementCreateDefaultManagedAppProtectionsRequest {
	return ApiDeviceAppManagementCreateDefaultManagedAppProtectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDefaultManagedAppProtection
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementCreateDefaultManagedAppProtectionsExecute(r ApiDeviceAppManagementCreateDefaultManagedAppProtectionsRequest) (MicrosoftGraphDefaultManagedAppProtection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDefaultManagedAppProtection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementDefaultManagedAppProtectionApiService.DeviceAppManagementCreateDefaultManagedAppProtections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/defaultManagedAppProtections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDefaultManagedAppProtection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDefaultManagedAppProtection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDefaultManagedAppProtection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDefaultManagedAppProtectionsCreateAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementDefaultManagedAppProtectionApiService
	defaultManagedAppProtectionId string
	microsoftGraphManagedMobileApp *MicrosoftGraphManagedMobileApp
}

// New navigation property
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsCreateAppsRequest) MicrosoftGraphManagedMobileApp(microsoftGraphManagedMobileApp MicrosoftGraphManagedMobileApp) ApiDeviceAppManagementDefaultManagedAppProtectionsCreateAppsRequest {
	r.microsoftGraphManagedMobileApp = &microsoftGraphManagedMobileApp
	return r
}

func (r ApiDeviceAppManagementDefaultManagedAppProtectionsCreateAppsRequest) Execute() (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDefaultManagedAppProtectionsCreateAppsExecute(r)
}

/*
DeviceAppManagementDefaultManagedAppProtectionsCreateApps Create new navigation property to apps for deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param defaultManagedAppProtectionId key: id of defaultManagedAppProtection
 @return ApiDeviceAppManagementDefaultManagedAppProtectionsCreateAppsRequest
*/
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsCreateApps(ctx _context.Context, defaultManagedAppProtectionId string) ApiDeviceAppManagementDefaultManagedAppProtectionsCreateAppsRequest {
	return ApiDeviceAppManagementDefaultManagedAppProtectionsCreateAppsRequest{
		ApiService: a,
		ctx: ctx,
		defaultManagedAppProtectionId: defaultManagedAppProtectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedMobileApp
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsCreateAppsExecute(r ApiDeviceAppManagementDefaultManagedAppProtectionsCreateAppsRequest) (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedMobileApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementDefaultManagedAppProtectionApiService.DeviceAppManagementDefaultManagedAppProtectionsCreateApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}/apps"
	localVarPath = strings.Replace(localVarPath, "{"+"defaultManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.defaultManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedMobileApp == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedMobileApp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedMobileApp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementDefaultManagedAppProtectionApiService
	defaultManagedAppProtectionId string
	managedMobileAppId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteAppsRequest) IfMatch(ifMatch string) ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteAppsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDefaultManagedAppProtectionsDeleteAppsExecute(r)
}

/*
DeviceAppManagementDefaultManagedAppProtectionsDeleteApps Delete navigation property apps for deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param defaultManagedAppProtectionId key: id of defaultManagedAppProtection
 @param managedMobileAppId key: id of managedMobileApp
 @return ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteAppsRequest
*/
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsDeleteApps(ctx _context.Context, defaultManagedAppProtectionId string, managedMobileAppId string) ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteAppsRequest {
	return ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteAppsRequest{
		ApiService: a,
		ctx: ctx,
		defaultManagedAppProtectionId: defaultManagedAppProtectionId,
		managedMobileAppId: managedMobileAppId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsDeleteAppsExecute(r ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementDefaultManagedAppProtectionApiService.DeviceAppManagementDefaultManagedAppProtectionsDeleteApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}/apps/{managedMobileApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"defaultManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.defaultManagedAppProtectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedMobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.managedMobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteDeploymentSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementDefaultManagedAppProtectionApiService
	defaultManagedAppProtectionId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteDeploymentSummaryRequest) IfMatch(ifMatch string) ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteDeploymentSummaryRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteDeploymentSummaryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDefaultManagedAppProtectionsDeleteDeploymentSummaryExecute(r)
}

/*
DeviceAppManagementDefaultManagedAppProtectionsDeleteDeploymentSummary Delete navigation property deploymentSummary for deviceAppManagement

Navigation property to deployment summary of the configuration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param defaultManagedAppProtectionId key: id of defaultManagedAppProtection
 @return ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteDeploymentSummaryRequest
*/
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsDeleteDeploymentSummary(ctx _context.Context, defaultManagedAppProtectionId string) ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteDeploymentSummaryRequest {
	return ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteDeploymentSummaryRequest{
		ApiService: a,
		ctx: ctx,
		defaultManagedAppProtectionId: defaultManagedAppProtectionId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsDeleteDeploymentSummaryExecute(r ApiDeviceAppManagementDefaultManagedAppProtectionsDeleteDeploymentSummaryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementDefaultManagedAppProtectionApiService.DeviceAppManagementDefaultManagedAppProtectionsDeleteDeploymentSummary")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}/deploymentSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"defaultManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.defaultManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDefaultManagedAppProtectionsGetAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementDefaultManagedAppProtectionApiService
	defaultManagedAppProtectionId string
	managedMobileAppId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsGetAppsRequest) Select_(select_ []string) ApiDeviceAppManagementDefaultManagedAppProtectionsGetAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsGetAppsRequest) Expand(expand []string) ApiDeviceAppManagementDefaultManagedAppProtectionsGetAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementDefaultManagedAppProtectionsGetAppsRequest) Execute() (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDefaultManagedAppProtectionsGetAppsExecute(r)
}

/*
DeviceAppManagementDefaultManagedAppProtectionsGetApps Get apps from deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param defaultManagedAppProtectionId key: id of defaultManagedAppProtection
 @param managedMobileAppId key: id of managedMobileApp
 @return ApiDeviceAppManagementDefaultManagedAppProtectionsGetAppsRequest
*/
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsGetApps(ctx _context.Context, defaultManagedAppProtectionId string, managedMobileAppId string) ApiDeviceAppManagementDefaultManagedAppProtectionsGetAppsRequest {
	return ApiDeviceAppManagementDefaultManagedAppProtectionsGetAppsRequest{
		ApiService: a,
		ctx: ctx,
		defaultManagedAppProtectionId: defaultManagedAppProtectionId,
		managedMobileAppId: managedMobileAppId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedMobileApp
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsGetAppsExecute(r ApiDeviceAppManagementDefaultManagedAppProtectionsGetAppsRequest) (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedMobileApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementDefaultManagedAppProtectionApiService.DeviceAppManagementDefaultManagedAppProtectionsGetApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}/apps/{managedMobileApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"defaultManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.defaultManagedAppProtectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedMobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.managedMobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDefaultManagedAppProtectionsGetDeploymentSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementDefaultManagedAppProtectionApiService
	defaultManagedAppProtectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsGetDeploymentSummaryRequest) Select_(select_ []string) ApiDeviceAppManagementDefaultManagedAppProtectionsGetDeploymentSummaryRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsGetDeploymentSummaryRequest) Expand(expand []string) ApiDeviceAppManagementDefaultManagedAppProtectionsGetDeploymentSummaryRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementDefaultManagedAppProtectionsGetDeploymentSummaryRequest) Execute() (MicrosoftGraphManagedAppPolicyDeploymentSummary, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDefaultManagedAppProtectionsGetDeploymentSummaryExecute(r)
}

/*
DeviceAppManagementDefaultManagedAppProtectionsGetDeploymentSummary Get deploymentSummary from deviceAppManagement

Navigation property to deployment summary of the configuration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param defaultManagedAppProtectionId key: id of defaultManagedAppProtection
 @return ApiDeviceAppManagementDefaultManagedAppProtectionsGetDeploymentSummaryRequest
*/
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsGetDeploymentSummary(ctx _context.Context, defaultManagedAppProtectionId string) ApiDeviceAppManagementDefaultManagedAppProtectionsGetDeploymentSummaryRequest {
	return ApiDeviceAppManagementDefaultManagedAppProtectionsGetDeploymentSummaryRequest{
		ApiService: a,
		ctx: ctx,
		defaultManagedAppProtectionId: defaultManagedAppProtectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedAppPolicyDeploymentSummary
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsGetDeploymentSummaryExecute(r ApiDeviceAppManagementDefaultManagedAppProtectionsGetDeploymentSummaryRequest) (MicrosoftGraphManagedAppPolicyDeploymentSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedAppPolicyDeploymentSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementDefaultManagedAppProtectionApiService.DeviceAppManagementDefaultManagedAppProtectionsGetDeploymentSummary")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}/deploymentSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"defaultManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.defaultManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementDefaultManagedAppProtectionApiService
	defaultManagedAppProtectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest) Top(top int32) ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest) Skip(skip int32) ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest) Search(search string) ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest) Filter(filter string) ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest) Count(count bool) ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest) Orderby(orderby []string) ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest) Select_(select_ []string) ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest) Expand(expand []string) ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest) Execute() (CollectionOfManagedMobileApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDefaultManagedAppProtectionsListAppsExecute(r)
}

/*
DeviceAppManagementDefaultManagedAppProtectionsListApps Get apps from deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param defaultManagedAppProtectionId key: id of defaultManagedAppProtection
 @return ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest
*/
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsListApps(ctx _context.Context, defaultManagedAppProtectionId string) ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest {
	return ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest{
		ApiService: a,
		ctx: ctx,
		defaultManagedAppProtectionId: defaultManagedAppProtectionId,
	}
}

// Execute executes the request
//  @return CollectionOfManagedMobileApp
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsListAppsExecute(r ApiDeviceAppManagementDefaultManagedAppProtectionsListAppsRequest) (CollectionOfManagedMobileApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedMobileApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementDefaultManagedAppProtectionApiService.DeviceAppManagementDefaultManagedAppProtectionsListApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}/apps"
	localVarPath = strings.Replace(localVarPath, "{"+"defaultManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.defaultManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementDefaultManagedAppProtectionApiService
	defaultManagedAppProtectionId string
	managedMobileAppId string
	microsoftGraphManagedMobileApp *MicrosoftGraphManagedMobileApp
}

// New navigation property values
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateAppsRequest) MicrosoftGraphManagedMobileApp(microsoftGraphManagedMobileApp MicrosoftGraphManagedMobileApp) ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateAppsRequest {
	r.microsoftGraphManagedMobileApp = &microsoftGraphManagedMobileApp
	return r
}

func (r ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDefaultManagedAppProtectionsUpdateAppsExecute(r)
}

/*
DeviceAppManagementDefaultManagedAppProtectionsUpdateApps Update the navigation property apps in deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param defaultManagedAppProtectionId key: id of defaultManagedAppProtection
 @param managedMobileAppId key: id of managedMobileApp
 @return ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateAppsRequest
*/
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsUpdateApps(ctx _context.Context, defaultManagedAppProtectionId string, managedMobileAppId string) ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateAppsRequest {
	return ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateAppsRequest{
		ApiService: a,
		ctx: ctx,
		defaultManagedAppProtectionId: defaultManagedAppProtectionId,
		managedMobileAppId: managedMobileAppId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsUpdateAppsExecute(r ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementDefaultManagedAppProtectionApiService.DeviceAppManagementDefaultManagedAppProtectionsUpdateApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}/apps/{managedMobileApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"defaultManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.defaultManagedAppProtectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedMobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.managedMobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedMobileApp == nil {
		return nil, reportError("microsoftGraphManagedMobileApp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedMobileApp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateDeploymentSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementDefaultManagedAppProtectionApiService
	defaultManagedAppProtectionId string
	microsoftGraphManagedAppPolicyDeploymentSummary *MicrosoftGraphManagedAppPolicyDeploymentSummary
}

// New navigation property values
func (r ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateDeploymentSummaryRequest) MicrosoftGraphManagedAppPolicyDeploymentSummary(microsoftGraphManagedAppPolicyDeploymentSummary MicrosoftGraphManagedAppPolicyDeploymentSummary) ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateDeploymentSummaryRequest {
	r.microsoftGraphManagedAppPolicyDeploymentSummary = &microsoftGraphManagedAppPolicyDeploymentSummary
	return r
}

func (r ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateDeploymentSummaryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDefaultManagedAppProtectionsUpdateDeploymentSummaryExecute(r)
}

/*
DeviceAppManagementDefaultManagedAppProtectionsUpdateDeploymentSummary Update the navigation property deploymentSummary in deviceAppManagement

Navigation property to deployment summary of the configuration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param defaultManagedAppProtectionId key: id of defaultManagedAppProtection
 @return ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateDeploymentSummaryRequest
*/
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsUpdateDeploymentSummary(ctx _context.Context, defaultManagedAppProtectionId string) ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateDeploymentSummaryRequest {
	return ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateDeploymentSummaryRequest{
		ApiService: a,
		ctx: ctx,
		defaultManagedAppProtectionId: defaultManagedAppProtectionId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDefaultManagedAppProtectionsUpdateDeploymentSummaryExecute(r ApiDeviceAppManagementDefaultManagedAppProtectionsUpdateDeploymentSummaryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementDefaultManagedAppProtectionApiService.DeviceAppManagementDefaultManagedAppProtectionsUpdateDeploymentSummary")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}/deploymentSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"defaultManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.defaultManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedAppPolicyDeploymentSummary == nil {
		return nil, reportError("microsoftGraphManagedAppPolicyDeploymentSummary is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedAppPolicyDeploymentSummary
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDeleteDefaultManagedAppProtectionsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementDefaultManagedAppProtectionApiService
	defaultManagedAppProtectionId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementDeleteDefaultManagedAppProtectionsRequest) IfMatch(ifMatch string) ApiDeviceAppManagementDeleteDefaultManagedAppProtectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementDeleteDefaultManagedAppProtectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDeleteDefaultManagedAppProtectionsExecute(r)
}

/*
DeviceAppManagementDeleteDefaultManagedAppProtections Delete navigation property defaultManagedAppProtections for deviceAppManagement

Default managed app policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param defaultManagedAppProtectionId key: id of defaultManagedAppProtection
 @return ApiDeviceAppManagementDeleteDefaultManagedAppProtectionsRequest
*/
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDeleteDefaultManagedAppProtections(ctx _context.Context, defaultManagedAppProtectionId string) ApiDeviceAppManagementDeleteDefaultManagedAppProtectionsRequest {
	return ApiDeviceAppManagementDeleteDefaultManagedAppProtectionsRequest{
		ApiService: a,
		ctx: ctx,
		defaultManagedAppProtectionId: defaultManagedAppProtectionId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementDeleteDefaultManagedAppProtectionsExecute(r ApiDeviceAppManagementDeleteDefaultManagedAppProtectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementDefaultManagedAppProtectionApiService.DeviceAppManagementDeleteDefaultManagedAppProtections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"defaultManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.defaultManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementGetDefaultManagedAppProtectionsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementDefaultManagedAppProtectionApiService
	defaultManagedAppProtectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementGetDefaultManagedAppProtectionsRequest) Select_(select_ []string) ApiDeviceAppManagementGetDefaultManagedAppProtectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementGetDefaultManagedAppProtectionsRequest) Expand(expand []string) ApiDeviceAppManagementGetDefaultManagedAppProtectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementGetDefaultManagedAppProtectionsRequest) Execute() (MicrosoftGraphDefaultManagedAppProtection, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementGetDefaultManagedAppProtectionsExecute(r)
}

/*
DeviceAppManagementGetDefaultManagedAppProtections Get defaultManagedAppProtections from deviceAppManagement

Default managed app policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param defaultManagedAppProtectionId key: id of defaultManagedAppProtection
 @return ApiDeviceAppManagementGetDefaultManagedAppProtectionsRequest
*/
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementGetDefaultManagedAppProtections(ctx _context.Context, defaultManagedAppProtectionId string) ApiDeviceAppManagementGetDefaultManagedAppProtectionsRequest {
	return ApiDeviceAppManagementGetDefaultManagedAppProtectionsRequest{
		ApiService: a,
		ctx: ctx,
		defaultManagedAppProtectionId: defaultManagedAppProtectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDefaultManagedAppProtection
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementGetDefaultManagedAppProtectionsExecute(r ApiDeviceAppManagementGetDefaultManagedAppProtectionsRequest) (MicrosoftGraphDefaultManagedAppProtection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDefaultManagedAppProtection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementDefaultManagedAppProtectionApiService.DeviceAppManagementGetDefaultManagedAppProtections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"defaultManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.defaultManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementDefaultManagedAppProtectionApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest) Top(top int32) ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest) Skip(skip int32) ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest) Search(search string) ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest) Filter(filter string) ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest) Count(count bool) ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest) Orderby(orderby []string) ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest) Select_(select_ []string) ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest) Expand(expand []string) ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest) Execute() (CollectionOfDefaultManagedAppProtection, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementListDefaultManagedAppProtectionsExecute(r)
}

/*
DeviceAppManagementListDefaultManagedAppProtections Get defaultManagedAppProtections from deviceAppManagement

Default managed app policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest
*/
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementListDefaultManagedAppProtections(ctx _context.Context) ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest {
	return ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfDefaultManagedAppProtection
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementListDefaultManagedAppProtectionsExecute(r ApiDeviceAppManagementListDefaultManagedAppProtectionsRequest) (CollectionOfDefaultManagedAppProtection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDefaultManagedAppProtection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementDefaultManagedAppProtectionApiService.DeviceAppManagementListDefaultManagedAppProtections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/defaultManagedAppProtections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementUpdateDefaultManagedAppProtectionsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementDefaultManagedAppProtectionApiService
	defaultManagedAppProtectionId string
	microsoftGraphDefaultManagedAppProtection *MicrosoftGraphDefaultManagedAppProtection
}

// New navigation property values
func (r ApiDeviceAppManagementUpdateDefaultManagedAppProtectionsRequest) MicrosoftGraphDefaultManagedAppProtection(microsoftGraphDefaultManagedAppProtection MicrosoftGraphDefaultManagedAppProtection) ApiDeviceAppManagementUpdateDefaultManagedAppProtectionsRequest {
	r.microsoftGraphDefaultManagedAppProtection = &microsoftGraphDefaultManagedAppProtection
	return r
}

func (r ApiDeviceAppManagementUpdateDefaultManagedAppProtectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementUpdateDefaultManagedAppProtectionsExecute(r)
}

/*
DeviceAppManagementUpdateDefaultManagedAppProtections Update the navigation property defaultManagedAppProtections in deviceAppManagement

Default managed app policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param defaultManagedAppProtectionId key: id of defaultManagedAppProtection
 @return ApiDeviceAppManagementUpdateDefaultManagedAppProtectionsRequest
*/
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementUpdateDefaultManagedAppProtections(ctx _context.Context, defaultManagedAppProtectionId string) ApiDeviceAppManagementUpdateDefaultManagedAppProtectionsRequest {
	return ApiDeviceAppManagementUpdateDefaultManagedAppProtectionsRequest{
		ApiService: a,
		ctx: ctx,
		defaultManagedAppProtectionId: defaultManagedAppProtectionId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementDefaultManagedAppProtectionApiService) DeviceAppManagementUpdateDefaultManagedAppProtectionsExecute(r ApiDeviceAppManagementUpdateDefaultManagedAppProtectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementDefaultManagedAppProtectionApiService.DeviceAppManagementUpdateDefaultManagedAppProtections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"defaultManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.defaultManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDefaultManagedAppProtection == nil {
		return nil, reportError("microsoftGraphDefaultManagedAppProtection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDefaultManagedAppProtection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
