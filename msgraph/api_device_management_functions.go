/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceManagementFunctionsApiService DeviceManagementFunctionsApi service
type DeviceManagementFunctionsApiService service

type ApiDeviceManagementApplePushNotificationCertificateDownloadApplePushNotificationCertificateSigningRequestRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementFunctionsApiService
}


func (r ApiDeviceManagementApplePushNotificationCertificateDownloadApplePushNotificationCertificateSigningRequestRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementApplePushNotificationCertificateDownloadApplePushNotificationCertificateSigningRequestExecute(r)
}

/*
DeviceManagementApplePushNotificationCertificateDownloadApplePushNotificationCertificateSigningRequest Invoke function downloadApplePushNotificationCertificateSigningRequest

Download Apple push notification certificate signing request

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementApplePushNotificationCertificateDownloadApplePushNotificationCertificateSigningRequestRequest
*/
func (a *DeviceManagementFunctionsApiService) DeviceManagementApplePushNotificationCertificateDownloadApplePushNotificationCertificateSigningRequest(ctx _context.Context) ApiDeviceManagementApplePushNotificationCertificateDownloadApplePushNotificationCertificateSigningRequestRequest {
	return ApiDeviceManagementApplePushNotificationCertificateDownloadApplePushNotificationCertificateSigningRequestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *DeviceManagementFunctionsApiService) DeviceManagementApplePushNotificationCertificateDownloadApplePushNotificationCertificateSigningRequestExecute(r ApiDeviceManagementApplePushNotificationCertificateDownloadApplePushNotificationCertificateSigningRequestRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementFunctionsApiService.DeviceManagementApplePushNotificationCertificateDownloadApplePushNotificationCertificateSigningRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/applePushNotificationCertificate/microsoft.graph.downloadApplePushNotificationCertificateSigningRequest()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsDeviceConfigurationGetOmaSettingPlainTextValueRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementFunctionsApiService
	deviceConfigurationId string
	secretReferenceValueId string
}


func (r ApiDeviceManagementDeviceConfigurationsDeviceConfigurationGetOmaSettingPlainTextValueRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsDeviceConfigurationGetOmaSettingPlainTextValueExecute(r)
}

/*
DeviceManagementDeviceConfigurationsDeviceConfigurationGetOmaSettingPlainTextValue Invoke function getOmaSettingPlainTextValue

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @param secretReferenceValueId Usage: secretReferenceValueId={secretReferenceValueId}
 @return ApiDeviceManagementDeviceConfigurationsDeviceConfigurationGetOmaSettingPlainTextValueRequest
*/
func (a *DeviceManagementFunctionsApiService) DeviceManagementDeviceConfigurationsDeviceConfigurationGetOmaSettingPlainTextValue(ctx _context.Context, deviceConfigurationId string, secretReferenceValueId string) ApiDeviceManagementDeviceConfigurationsDeviceConfigurationGetOmaSettingPlainTextValueRequest {
	return ApiDeviceManagementDeviceConfigurationsDeviceConfigurationGetOmaSettingPlainTextValueRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
		secretReferenceValueId: secretReferenceValueId,
	}
}

// Execute executes the request
//  @return string
func (a *DeviceManagementFunctionsApiService) DeviceManagementDeviceConfigurationsDeviceConfigurationGetOmaSettingPlainTextValueExecute(r ApiDeviceManagementDeviceConfigurationsDeviceConfigurationGetOmaSettingPlainTextValueRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementFunctionsApiService.DeviceManagementDeviceConfigurationsDeviceConfigurationGetOmaSettingPlainTextValue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/microsoft.graph.getOmaSettingPlainTextValue(secretReferenceValueId='{secretReferenceValueId}')"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretReferenceValueId"+"}", _neturl.PathEscape(parameterToString(r.secretReferenceValueId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementGetEffectivePermissionsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementFunctionsApiService
	scope string
}


func (r ApiDeviceManagementGetEffectivePermissionsRequest) Execute() ([]*AnyOfmicrosoftGraphRolePermission, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementGetEffectivePermissionsExecute(r)
}

/*
DeviceManagementGetEffectivePermissions Invoke function getEffectivePermissions

Retrieves the effective permissions of the currently authenticated user

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param scope Usage: scope={scope}
 @return ApiDeviceManagementGetEffectivePermissionsRequest
*/
func (a *DeviceManagementFunctionsApiService) DeviceManagementGetEffectivePermissions(ctx _context.Context, scope string) ApiDeviceManagementGetEffectivePermissionsRequest {
	return ApiDeviceManagementGetEffectivePermissionsRequest{
		ApiService: a,
		ctx: ctx,
		scope: scope,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphRolePermission
func (a *DeviceManagementFunctionsApiService) DeviceManagementGetEffectivePermissionsExecute(r ApiDeviceManagementGetEffectivePermissionsRequest) ([]*AnyOfmicrosoftGraphRolePermission, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphRolePermission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementFunctionsApiService.DeviceManagementGetEffectivePermissions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/microsoft.graph.getEffectivePermissions(scope='{scope}')"
	localVarPath = strings.Replace(localVarPath, "{"+"scope"+"}", _neturl.PathEscape(parameterToString(r.scope, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementVerifyWindowsEnrollmentAutoDiscoveryRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementFunctionsApiService
	domainName string
}


func (r ApiDeviceManagementVerifyWindowsEnrollmentAutoDiscoveryRequest) Execute() (bool, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementVerifyWindowsEnrollmentAutoDiscoveryExecute(r)
}

/*
DeviceManagementVerifyWindowsEnrollmentAutoDiscovery Invoke function verifyWindowsEnrollmentAutoDiscovery

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param domainName Usage: domainName={domainName}
 @return ApiDeviceManagementVerifyWindowsEnrollmentAutoDiscoveryRequest
*/
func (a *DeviceManagementFunctionsApiService) DeviceManagementVerifyWindowsEnrollmentAutoDiscovery(ctx _context.Context, domainName string) ApiDeviceManagementVerifyWindowsEnrollmentAutoDiscoveryRequest {
	return ApiDeviceManagementVerifyWindowsEnrollmentAutoDiscoveryRequest{
		ApiService: a,
		ctx: ctx,
		domainName: domainName,
	}
}

// Execute executes the request
//  @return bool
func (a *DeviceManagementFunctionsApiService) DeviceManagementVerifyWindowsEnrollmentAutoDiscoveryExecute(r ApiDeviceManagementVerifyWindowsEnrollmentAutoDiscoveryRequest) (bool, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementFunctionsApiService.DeviceManagementVerifyWindowsEnrollmentAutoDiscovery")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/microsoft.graph.verifyWindowsEnrollmentAutoDiscovery(domainName='{domainName}')"
	localVarPath = strings.Replace(localVarPath, "{"+"domainName"+"}", _neturl.PathEscape(parameterToString(r.domainName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
