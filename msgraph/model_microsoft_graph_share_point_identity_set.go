/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MicrosoftGraphSharePointIdentitySet struct for MicrosoftGraphSharePointIdentitySet
type MicrosoftGraphSharePointIdentitySet struct {
	// Optional. The application associated with this action.
	Application AnyOfmicrosoftGraphIdentity `json:"application,omitempty"`
	// Optional. The device associated with this action.
	Device AnyOfmicrosoftGraphIdentity `json:"device,omitempty"`
	// Optional. The user associated with this action.
	User AnyOfmicrosoftGraphIdentity `json:"user,omitempty"`
	// The group associated with this action. Optional.
	Group AnyOfmicrosoftGraphIdentity `json:"group,omitempty"`
	// The SharePoint group associated with this action. Optional.
	SiteGroup AnyOfmicrosoftGraphSharePointIdentity `json:"siteGroup,omitempty"`
	// The SharePoint user associated with this action. Optional.
	SiteUser AnyOfmicrosoftGraphSharePointIdentity `json:"siteUser,omitempty"`
}

// NewMicrosoftGraphSharePointIdentitySet instantiates a new MicrosoftGraphSharePointIdentitySet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphSharePointIdentitySet() *MicrosoftGraphSharePointIdentitySet {
	this := MicrosoftGraphSharePointIdentitySet{}
	return &this
}

// NewMicrosoftGraphSharePointIdentitySetWithDefaults instantiates a new MicrosoftGraphSharePointIdentitySet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphSharePointIdentitySetWithDefaults() *MicrosoftGraphSharePointIdentitySet {
	this := MicrosoftGraphSharePointIdentitySet{}
	return &this
}

// GetApplication returns the Application field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphSharePointIdentitySet) GetApplication() AnyOfmicrosoftGraphIdentity {
	if o == nil  {
		var ret AnyOfmicrosoftGraphIdentity
		return ret
	}
	return o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphSharePointIdentitySet) GetApplicationOk() (*AnyOfmicrosoftGraphIdentity, bool) {
	if o == nil || o.Application == nil {
		return nil, false
	}
	return &o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *MicrosoftGraphSharePointIdentitySet) HasApplication() bool {
	if o != nil && o.Application != nil {
		return true
	}

	return false
}

// SetApplication gets a reference to the given AnyOfmicrosoftGraphIdentity and assigns it to the Application field.
func (o *MicrosoftGraphSharePointIdentitySet) SetApplication(v AnyOfmicrosoftGraphIdentity) {
	o.Application = v
}

// GetDevice returns the Device field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphSharePointIdentitySet) GetDevice() AnyOfmicrosoftGraphIdentity {
	if o == nil  {
		var ret AnyOfmicrosoftGraphIdentity
		return ret
	}
	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphSharePointIdentitySet) GetDeviceOk() (*AnyOfmicrosoftGraphIdentity, bool) {
	if o == nil || o.Device == nil {
		return nil, false
	}
	return &o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *MicrosoftGraphSharePointIdentitySet) HasDevice() bool {
	if o != nil && o.Device != nil {
		return true
	}

	return false
}

// SetDevice gets a reference to the given AnyOfmicrosoftGraphIdentity and assigns it to the Device field.
func (o *MicrosoftGraphSharePointIdentitySet) SetDevice(v AnyOfmicrosoftGraphIdentity) {
	o.Device = v
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphSharePointIdentitySet) GetUser() AnyOfmicrosoftGraphIdentity {
	if o == nil  {
		var ret AnyOfmicrosoftGraphIdentity
		return ret
	}
	return o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphSharePointIdentitySet) GetUserOk() (*AnyOfmicrosoftGraphIdentity, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return &o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *MicrosoftGraphSharePointIdentitySet) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given AnyOfmicrosoftGraphIdentity and assigns it to the User field.
func (o *MicrosoftGraphSharePointIdentitySet) SetUser(v AnyOfmicrosoftGraphIdentity) {
	o.User = v
}

// GetGroup returns the Group field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphSharePointIdentitySet) GetGroup() AnyOfmicrosoftGraphIdentity {
	if o == nil  {
		var ret AnyOfmicrosoftGraphIdentity
		return ret
	}
	return o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphSharePointIdentitySet) GetGroupOk() (*AnyOfmicrosoftGraphIdentity, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return &o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *MicrosoftGraphSharePointIdentitySet) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given AnyOfmicrosoftGraphIdentity and assigns it to the Group field.
func (o *MicrosoftGraphSharePointIdentitySet) SetGroup(v AnyOfmicrosoftGraphIdentity) {
	o.Group = v
}

// GetSiteGroup returns the SiteGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphSharePointIdentitySet) GetSiteGroup() AnyOfmicrosoftGraphSharePointIdentity {
	if o == nil  {
		var ret AnyOfmicrosoftGraphSharePointIdentity
		return ret
	}
	return o.SiteGroup
}

// GetSiteGroupOk returns a tuple with the SiteGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphSharePointIdentitySet) GetSiteGroupOk() (*AnyOfmicrosoftGraphSharePointIdentity, bool) {
	if o == nil || o.SiteGroup == nil {
		return nil, false
	}
	return &o.SiteGroup, true
}

// HasSiteGroup returns a boolean if a field has been set.
func (o *MicrosoftGraphSharePointIdentitySet) HasSiteGroup() bool {
	if o != nil && o.SiteGroup != nil {
		return true
	}

	return false
}

// SetSiteGroup gets a reference to the given AnyOfmicrosoftGraphSharePointIdentity and assigns it to the SiteGroup field.
func (o *MicrosoftGraphSharePointIdentitySet) SetSiteGroup(v AnyOfmicrosoftGraphSharePointIdentity) {
	o.SiteGroup = v
}

// GetSiteUser returns the SiteUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphSharePointIdentitySet) GetSiteUser() AnyOfmicrosoftGraphSharePointIdentity {
	if o == nil  {
		var ret AnyOfmicrosoftGraphSharePointIdentity
		return ret
	}
	return o.SiteUser
}

// GetSiteUserOk returns a tuple with the SiteUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphSharePointIdentitySet) GetSiteUserOk() (*AnyOfmicrosoftGraphSharePointIdentity, bool) {
	if o == nil || o.SiteUser == nil {
		return nil, false
	}
	return &o.SiteUser, true
}

// HasSiteUser returns a boolean if a field has been set.
func (o *MicrosoftGraphSharePointIdentitySet) HasSiteUser() bool {
	if o != nil && o.SiteUser != nil {
		return true
	}

	return false
}

// SetSiteUser gets a reference to the given AnyOfmicrosoftGraphSharePointIdentity and assigns it to the SiteUser field.
func (o *MicrosoftGraphSharePointIdentitySet) SetSiteUser(v AnyOfmicrosoftGraphSharePointIdentity) {
	o.SiteUser = v
}

func (o MicrosoftGraphSharePointIdentitySet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Application != nil {
		toSerialize["application"] = o.Application
	}
	if o.Device != nil {
		toSerialize["device"] = o.Device
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if o.SiteGroup != nil {
		toSerialize["siteGroup"] = o.SiteGroup
	}
	if o.SiteUser != nil {
		toSerialize["siteUser"] = o.SiteUser
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphSharePointIdentitySet struct {
	value *MicrosoftGraphSharePointIdentitySet
	isSet bool
}

func (v NullableMicrosoftGraphSharePointIdentitySet) Get() *MicrosoftGraphSharePointIdentitySet {
	return v.value
}

func (v *NullableMicrosoftGraphSharePointIdentitySet) Set(val *MicrosoftGraphSharePointIdentitySet) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphSharePointIdentitySet) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphSharePointIdentitySet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphSharePointIdentitySet(val *MicrosoftGraphSharePointIdentitySet) *NullableMicrosoftGraphSharePointIdentitySet {
	return &NullableMicrosoftGraphSharePointIdentitySet{value: val, isSet: true}
}

func (v NullableMicrosoftGraphSharePointIdentitySet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphSharePointIdentitySet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


