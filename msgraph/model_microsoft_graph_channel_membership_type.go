/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphChannelMembershipType the model 'MicrosoftGraphChannelMembershipType'
type MicrosoftGraphChannelMembershipType string

// List of microsoft.graph.channelMembershipType
const (
	STANDARD MicrosoftGraphChannelMembershipType = "standard"
	PRIVATE MicrosoftGraphChannelMembershipType = "private"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphChannelMembershipType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphChannelMembershipType enum
var AllowedMicrosoftGraphChannelMembershipTypeEnumValues = []MicrosoftGraphChannelMembershipType{
	"standard",
	"private",
	"unknownFutureValue",
}

func (v *MicrosoftGraphChannelMembershipType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphChannelMembershipType(value)
	for _, existing := range AllowedMicrosoftGraphChannelMembershipTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphChannelMembershipType", value)
}

// NewMicrosoftGraphChannelMembershipTypeFromValue returns a pointer to a valid MicrosoftGraphChannelMembershipType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphChannelMembershipTypeFromValue(v string) (*MicrosoftGraphChannelMembershipType, error) {
	ev := MicrosoftGraphChannelMembershipType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphChannelMembershipType: valid values are %v", v, AllowedMicrosoftGraphChannelMembershipTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphChannelMembershipType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphChannelMembershipTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.channelMembershipType value
func (v MicrosoftGraphChannelMembershipType) Ptr() *MicrosoftGraphChannelMembershipType {
	return &v
}

type NullableMicrosoftGraphChannelMembershipType struct {
	value *MicrosoftGraphChannelMembershipType
	isSet bool
}

func (v NullableMicrosoftGraphChannelMembershipType) Get() *MicrosoftGraphChannelMembershipType {
	return v.value
}

func (v *NullableMicrosoftGraphChannelMembershipType) Set(val *MicrosoftGraphChannelMembershipType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphChannelMembershipType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphChannelMembershipType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphChannelMembershipType(val *MicrosoftGraphChannelMembershipType) *NullableMicrosoftGraphChannelMembershipType {
	return &NullableMicrosoftGraphChannelMembershipType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphChannelMembershipType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphChannelMembershipType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

