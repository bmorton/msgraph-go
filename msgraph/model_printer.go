/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Printer struct for Printer
type Printer struct {
	// True if the printer has a physical device for printing. Read-only.
	HasPhysicalDevice *bool `json:"hasPhysicalDevice,omitempty"`
	// True if the printer is shared; false otherwise. Read-only.
	IsShared *bool `json:"isShared,omitempty"`
	// The most recent dateTimeOffset when a printer interacted with Universal Print. Read-only.
	LastSeenDateTime NullableTime `json:"lastSeenDateTime,omitempty"`
	// The DateTimeOffset when the printer was registered. Read-only.
	RegisteredDateTime *time.Time `json:"registeredDateTime,omitempty"`
	// The connectors that are associated with the printer.
	Connectors *[]MicrosoftGraphPrintConnector `json:"connectors,omitempty"`
	// The list of printerShares that are associated with the printer. Currently, only one printerShare can be associated with the printer. Read-only. Nullable.
	Shares *[]MicrosoftGraphPrinterShare `json:"shares,omitempty"`
	// A list of task triggers that are associated with the printer.
	TaskTriggers *[]MicrosoftGraphPrintTaskTrigger `json:"taskTriggers,omitempty"`
}

// NewPrinter instantiates a new Printer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrinter() *Printer {
	this := Printer{}
	return &this
}

// NewPrinterWithDefaults instantiates a new Printer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrinterWithDefaults() *Printer {
	this := Printer{}
	return &this
}

// GetHasPhysicalDevice returns the HasPhysicalDevice field value if set, zero value otherwise.
func (o *Printer) GetHasPhysicalDevice() bool {
	if o == nil || o.HasPhysicalDevice == nil {
		var ret bool
		return ret
	}
	return *o.HasPhysicalDevice
}

// GetHasPhysicalDeviceOk returns a tuple with the HasPhysicalDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Printer) GetHasPhysicalDeviceOk() (*bool, bool) {
	if o == nil || o.HasPhysicalDevice == nil {
		return nil, false
	}
	return o.HasPhysicalDevice, true
}

// HasHasPhysicalDevice returns a boolean if a field has been set.
func (o *Printer) HasHasPhysicalDevice() bool {
	if o != nil && o.HasPhysicalDevice != nil {
		return true
	}

	return false
}

// SetHasPhysicalDevice gets a reference to the given bool and assigns it to the HasPhysicalDevice field.
func (o *Printer) SetHasPhysicalDevice(v bool) {
	o.HasPhysicalDevice = &v
}

// GetIsShared returns the IsShared field value if set, zero value otherwise.
func (o *Printer) GetIsShared() bool {
	if o == nil || o.IsShared == nil {
		var ret bool
		return ret
	}
	return *o.IsShared
}

// GetIsSharedOk returns a tuple with the IsShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Printer) GetIsSharedOk() (*bool, bool) {
	if o == nil || o.IsShared == nil {
		return nil, false
	}
	return o.IsShared, true
}

// HasIsShared returns a boolean if a field has been set.
func (o *Printer) HasIsShared() bool {
	if o != nil && o.IsShared != nil {
		return true
	}

	return false
}

// SetIsShared gets a reference to the given bool and assigns it to the IsShared field.
func (o *Printer) SetIsShared(v bool) {
	o.IsShared = &v
}

// GetLastSeenDateTime returns the LastSeenDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Printer) GetLastSeenDateTime() time.Time {
	if o == nil || o.LastSeenDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastSeenDateTime.Get()
}

// GetLastSeenDateTimeOk returns a tuple with the LastSeenDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Printer) GetLastSeenDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastSeenDateTime.Get(), o.LastSeenDateTime.IsSet()
}

// HasLastSeenDateTime returns a boolean if a field has been set.
func (o *Printer) HasLastSeenDateTime() bool {
	if o != nil && o.LastSeenDateTime.IsSet() {
		return true
	}

	return false
}

// SetLastSeenDateTime gets a reference to the given NullableTime and assigns it to the LastSeenDateTime field.
func (o *Printer) SetLastSeenDateTime(v time.Time) {
	o.LastSeenDateTime.Set(&v)
}
// SetLastSeenDateTimeNil sets the value for LastSeenDateTime to be an explicit nil
func (o *Printer) SetLastSeenDateTimeNil() {
	o.LastSeenDateTime.Set(nil)
}

// UnsetLastSeenDateTime ensures that no value is present for LastSeenDateTime, not even an explicit nil
func (o *Printer) UnsetLastSeenDateTime() {
	o.LastSeenDateTime.Unset()
}

// GetRegisteredDateTime returns the RegisteredDateTime field value if set, zero value otherwise.
func (o *Printer) GetRegisteredDateTime() time.Time {
	if o == nil || o.RegisteredDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.RegisteredDateTime
}

// GetRegisteredDateTimeOk returns a tuple with the RegisteredDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Printer) GetRegisteredDateTimeOk() (*time.Time, bool) {
	if o == nil || o.RegisteredDateTime == nil {
		return nil, false
	}
	return o.RegisteredDateTime, true
}

// HasRegisteredDateTime returns a boolean if a field has been set.
func (o *Printer) HasRegisteredDateTime() bool {
	if o != nil && o.RegisteredDateTime != nil {
		return true
	}

	return false
}

// SetRegisteredDateTime gets a reference to the given time.Time and assigns it to the RegisteredDateTime field.
func (o *Printer) SetRegisteredDateTime(v time.Time) {
	o.RegisteredDateTime = &v
}

// GetConnectors returns the Connectors field value if set, zero value otherwise.
func (o *Printer) GetConnectors() []MicrosoftGraphPrintConnector {
	if o == nil || o.Connectors == nil {
		var ret []MicrosoftGraphPrintConnector
		return ret
	}
	return *o.Connectors
}

// GetConnectorsOk returns a tuple with the Connectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Printer) GetConnectorsOk() (*[]MicrosoftGraphPrintConnector, bool) {
	if o == nil || o.Connectors == nil {
		return nil, false
	}
	return o.Connectors, true
}

// HasConnectors returns a boolean if a field has been set.
func (o *Printer) HasConnectors() bool {
	if o != nil && o.Connectors != nil {
		return true
	}

	return false
}

// SetConnectors gets a reference to the given []MicrosoftGraphPrintConnector and assigns it to the Connectors field.
func (o *Printer) SetConnectors(v []MicrosoftGraphPrintConnector) {
	o.Connectors = &v
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *Printer) GetShares() []MicrosoftGraphPrinterShare {
	if o == nil || o.Shares == nil {
		var ret []MicrosoftGraphPrinterShare
		return ret
	}
	return *o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Printer) GetSharesOk() (*[]MicrosoftGraphPrinterShare, bool) {
	if o == nil || o.Shares == nil {
		return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *Printer) HasShares() bool {
	if o != nil && o.Shares != nil {
		return true
	}

	return false
}

// SetShares gets a reference to the given []MicrosoftGraphPrinterShare and assigns it to the Shares field.
func (o *Printer) SetShares(v []MicrosoftGraphPrinterShare) {
	o.Shares = &v
}

// GetTaskTriggers returns the TaskTriggers field value if set, zero value otherwise.
func (o *Printer) GetTaskTriggers() []MicrosoftGraphPrintTaskTrigger {
	if o == nil || o.TaskTriggers == nil {
		var ret []MicrosoftGraphPrintTaskTrigger
		return ret
	}
	return *o.TaskTriggers
}

// GetTaskTriggersOk returns a tuple with the TaskTriggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Printer) GetTaskTriggersOk() (*[]MicrosoftGraphPrintTaskTrigger, bool) {
	if o == nil || o.TaskTriggers == nil {
		return nil, false
	}
	return o.TaskTriggers, true
}

// HasTaskTriggers returns a boolean if a field has been set.
func (o *Printer) HasTaskTriggers() bool {
	if o != nil && o.TaskTriggers != nil {
		return true
	}

	return false
}

// SetTaskTriggers gets a reference to the given []MicrosoftGraphPrintTaskTrigger and assigns it to the TaskTriggers field.
func (o *Printer) SetTaskTriggers(v []MicrosoftGraphPrintTaskTrigger) {
	o.TaskTriggers = &v
}

func (o Printer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HasPhysicalDevice != nil {
		toSerialize["hasPhysicalDevice"] = o.HasPhysicalDevice
	}
	if o.IsShared != nil {
		toSerialize["isShared"] = o.IsShared
	}
	if o.LastSeenDateTime.IsSet() {
		toSerialize["lastSeenDateTime"] = o.LastSeenDateTime.Get()
	}
	if o.RegisteredDateTime != nil {
		toSerialize["registeredDateTime"] = o.RegisteredDateTime
	}
	if o.Connectors != nil {
		toSerialize["connectors"] = o.Connectors
	}
	if o.Shares != nil {
		toSerialize["shares"] = o.Shares
	}
	if o.TaskTriggers != nil {
		toSerialize["taskTriggers"] = o.TaskTriggers
	}
	return json.Marshal(toSerialize)
}

type NullablePrinter struct {
	value *Printer
	isSet bool
}

func (v NullablePrinter) Get() *Printer {
	return v.value
}

func (v *NullablePrinter) Set(val *Printer) {
	v.value = val
	v.isSet = true
}

func (v NullablePrinter) IsSet() bool {
	return v.isSet
}

func (v *NullablePrinter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrinter(val *Printer) *NullablePrinter {
	return &NullablePrinter{value: val, isSet: true}
}

func (v NullablePrinter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrinter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


