/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceAppManagementManagedAppStatusApiService DeviceAppManagementManagedAppStatusApi service
type DeviceAppManagementManagedAppStatusApiService service

type ApiDeviceAppManagementCreateManagedAppStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppStatusApiService
	microsoftGraphManagedAppStatus *MicrosoftGraphManagedAppStatus
}

// New navigation property
func (r ApiDeviceAppManagementCreateManagedAppStatusesRequest) MicrosoftGraphManagedAppStatus(microsoftGraphManagedAppStatus MicrosoftGraphManagedAppStatus) ApiDeviceAppManagementCreateManagedAppStatusesRequest {
	r.microsoftGraphManagedAppStatus = &microsoftGraphManagedAppStatus
	return r
}

func (r ApiDeviceAppManagementCreateManagedAppStatusesRequest) Execute() (MicrosoftGraphManagedAppStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementCreateManagedAppStatusesExecute(r)
}

/*
DeviceAppManagementCreateManagedAppStatuses Create new navigation property to managedAppStatuses for deviceAppManagement

The managed app statuses.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementCreateManagedAppStatusesRequest
*/
func (a *DeviceAppManagementManagedAppStatusApiService) DeviceAppManagementCreateManagedAppStatuses(ctx _context.Context) ApiDeviceAppManagementCreateManagedAppStatusesRequest {
	return ApiDeviceAppManagementCreateManagedAppStatusesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedAppStatus
func (a *DeviceAppManagementManagedAppStatusApiService) DeviceAppManagementCreateManagedAppStatusesExecute(r ApiDeviceAppManagementCreateManagedAppStatusesRequest) (MicrosoftGraphManagedAppStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedAppStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppStatusApiService.DeviceAppManagementCreateManagedAppStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppStatuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedAppStatus == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedAppStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedAppStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDeleteManagedAppStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppStatusApiService
	managedAppStatusId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementDeleteManagedAppStatusesRequest) IfMatch(ifMatch string) ApiDeviceAppManagementDeleteManagedAppStatusesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementDeleteManagedAppStatusesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDeleteManagedAppStatusesExecute(r)
}

/*
DeviceAppManagementDeleteManagedAppStatuses Delete navigation property managedAppStatuses for deviceAppManagement

The managed app statuses.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppStatusId key: id of managedAppStatus
 @return ApiDeviceAppManagementDeleteManagedAppStatusesRequest
*/
func (a *DeviceAppManagementManagedAppStatusApiService) DeviceAppManagementDeleteManagedAppStatuses(ctx _context.Context, managedAppStatusId string) ApiDeviceAppManagementDeleteManagedAppStatusesRequest {
	return ApiDeviceAppManagementDeleteManagedAppStatusesRequest{
		ApiService: a,
		ctx: ctx,
		managedAppStatusId: managedAppStatusId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedAppStatusApiService) DeviceAppManagementDeleteManagedAppStatusesExecute(r ApiDeviceAppManagementDeleteManagedAppStatusesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppStatusApiService.DeviceAppManagementDeleteManagedAppStatuses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppStatuses/{managedAppStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppStatus-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementGetManagedAppStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppStatusApiService
	managedAppStatusId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementGetManagedAppStatusesRequest) Select_(select_ []string) ApiDeviceAppManagementGetManagedAppStatusesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementGetManagedAppStatusesRequest) Expand(expand []string) ApiDeviceAppManagementGetManagedAppStatusesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementGetManagedAppStatusesRequest) Execute() (MicrosoftGraphManagedAppStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementGetManagedAppStatusesExecute(r)
}

/*
DeviceAppManagementGetManagedAppStatuses Get managedAppStatuses from deviceAppManagement

The managed app statuses.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppStatusId key: id of managedAppStatus
 @return ApiDeviceAppManagementGetManagedAppStatusesRequest
*/
func (a *DeviceAppManagementManagedAppStatusApiService) DeviceAppManagementGetManagedAppStatuses(ctx _context.Context, managedAppStatusId string) ApiDeviceAppManagementGetManagedAppStatusesRequest {
	return ApiDeviceAppManagementGetManagedAppStatusesRequest{
		ApiService: a,
		ctx: ctx,
		managedAppStatusId: managedAppStatusId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedAppStatus
func (a *DeviceAppManagementManagedAppStatusApiService) DeviceAppManagementGetManagedAppStatusesExecute(r ApiDeviceAppManagementGetManagedAppStatusesRequest) (MicrosoftGraphManagedAppStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedAppStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppStatusApiService.DeviceAppManagementGetManagedAppStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppStatuses/{managedAppStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppStatus-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementListManagedAppStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppStatusApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementListManagedAppStatusesRequest) Top(top int32) ApiDeviceAppManagementListManagedAppStatusesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementListManagedAppStatusesRequest) Skip(skip int32) ApiDeviceAppManagementListManagedAppStatusesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementListManagedAppStatusesRequest) Search(search string) ApiDeviceAppManagementListManagedAppStatusesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementListManagedAppStatusesRequest) Filter(filter string) ApiDeviceAppManagementListManagedAppStatusesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementListManagedAppStatusesRequest) Count(count bool) ApiDeviceAppManagementListManagedAppStatusesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementListManagedAppStatusesRequest) Orderby(orderby []string) ApiDeviceAppManagementListManagedAppStatusesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementListManagedAppStatusesRequest) Select_(select_ []string) ApiDeviceAppManagementListManagedAppStatusesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementListManagedAppStatusesRequest) Expand(expand []string) ApiDeviceAppManagementListManagedAppStatusesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementListManagedAppStatusesRequest) Execute() (CollectionOfManagedAppStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementListManagedAppStatusesExecute(r)
}

/*
DeviceAppManagementListManagedAppStatuses Get managedAppStatuses from deviceAppManagement

The managed app statuses.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementListManagedAppStatusesRequest
*/
func (a *DeviceAppManagementManagedAppStatusApiService) DeviceAppManagementListManagedAppStatuses(ctx _context.Context) ApiDeviceAppManagementListManagedAppStatusesRequest {
	return ApiDeviceAppManagementListManagedAppStatusesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfManagedAppStatus
func (a *DeviceAppManagementManagedAppStatusApiService) DeviceAppManagementListManagedAppStatusesExecute(r ApiDeviceAppManagementListManagedAppStatusesRequest) (CollectionOfManagedAppStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedAppStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppStatusApiService.DeviceAppManagementListManagedAppStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppStatuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementUpdateManagedAppStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppStatusApiService
	managedAppStatusId string
	microsoftGraphManagedAppStatus *MicrosoftGraphManagedAppStatus
}

// New navigation property values
func (r ApiDeviceAppManagementUpdateManagedAppStatusesRequest) MicrosoftGraphManagedAppStatus(microsoftGraphManagedAppStatus MicrosoftGraphManagedAppStatus) ApiDeviceAppManagementUpdateManagedAppStatusesRequest {
	r.microsoftGraphManagedAppStatus = &microsoftGraphManagedAppStatus
	return r
}

func (r ApiDeviceAppManagementUpdateManagedAppStatusesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementUpdateManagedAppStatusesExecute(r)
}

/*
DeviceAppManagementUpdateManagedAppStatuses Update the navigation property managedAppStatuses in deviceAppManagement

The managed app statuses.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppStatusId key: id of managedAppStatus
 @return ApiDeviceAppManagementUpdateManagedAppStatusesRequest
*/
func (a *DeviceAppManagementManagedAppStatusApiService) DeviceAppManagementUpdateManagedAppStatuses(ctx _context.Context, managedAppStatusId string) ApiDeviceAppManagementUpdateManagedAppStatusesRequest {
	return ApiDeviceAppManagementUpdateManagedAppStatusesRequest{
		ApiService: a,
		ctx: ctx,
		managedAppStatusId: managedAppStatusId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedAppStatusApiService) DeviceAppManagementUpdateManagedAppStatusesExecute(r ApiDeviceAppManagementUpdateManagedAppStatusesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppStatusApiService.DeviceAppManagementUpdateManagedAppStatuses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppStatuses/{managedAppStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppStatus-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedAppStatus == nil {
		return nil, reportError("microsoftGraphManagedAppStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedAppStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
