/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// PrintPrintTaskDefinitionApiService PrintPrintTaskDefinitionApi service
type PrintPrintTaskDefinitionApiService service

type ApiPrintCreateTaskDefinitionsRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	microsoftGraphPrintTaskDefinition *MicrosoftGraphPrintTaskDefinition
}

// New navigation property
func (r ApiPrintCreateTaskDefinitionsRequest) MicrosoftGraphPrintTaskDefinition(microsoftGraphPrintTaskDefinition MicrosoftGraphPrintTaskDefinition) ApiPrintCreateTaskDefinitionsRequest {
	r.microsoftGraphPrintTaskDefinition = &microsoftGraphPrintTaskDefinition
	return r
}

func (r ApiPrintCreateTaskDefinitionsRequest) Execute() (MicrosoftGraphPrintTaskDefinition, *_nethttp.Response, error) {
	return r.ApiService.PrintCreateTaskDefinitionsExecute(r)
}

/*
PrintCreateTaskDefinitions Create new navigation property to taskDefinitions for print

List of abstract definition for a task that can be triggered when various events occur within Universal Print.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPrintCreateTaskDefinitionsRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintCreateTaskDefinitions(ctx _context.Context) ApiPrintCreateTaskDefinitionsRequest {
	return ApiPrintCreateTaskDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintTaskDefinition
func (a *PrintPrintTaskDefinitionApiService) PrintCreateTaskDefinitionsExecute(r ApiPrintCreateTaskDefinitionsRequest) (MicrosoftGraphPrintTaskDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintTaskDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintCreateTaskDefinitions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintTaskDefinition == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphPrintTaskDefinition is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintTaskDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintDeleteTaskDefinitionsRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	ifMatch *string
}

// ETag
func (r ApiPrintDeleteTaskDefinitionsRequest) IfMatch(ifMatch string) ApiPrintDeleteTaskDefinitionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiPrintDeleteTaskDefinitionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintDeleteTaskDefinitionsExecute(r)
}

/*
PrintDeleteTaskDefinitions Delete navigation property taskDefinitions for print

List of abstract definition for a task that can be triggered when various events occur within Universal Print.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @return ApiPrintDeleteTaskDefinitionsRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintDeleteTaskDefinitions(ctx _context.Context, printTaskDefinitionId string) ApiPrintDeleteTaskDefinitionsRequest {
	return ApiPrintDeleteTaskDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
	}
}

// Execute executes the request
func (a *PrintPrintTaskDefinitionApiService) PrintDeleteTaskDefinitionsExecute(r ApiPrintDeleteTaskDefinitionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintDeleteTaskDefinitions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrintGetTaskDefinitionsRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiPrintGetTaskDefinitionsRequest) Select_(select_ []string) ApiPrintGetTaskDefinitionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrintGetTaskDefinitionsRequest) Expand(expand []string) ApiPrintGetTaskDefinitionsRequest {
	r.expand = &expand
	return r
}

func (r ApiPrintGetTaskDefinitionsRequest) Execute() (MicrosoftGraphPrintTaskDefinition, *_nethttp.Response, error) {
	return r.ApiService.PrintGetTaskDefinitionsExecute(r)
}

/*
PrintGetTaskDefinitions Get taskDefinitions from print

List of abstract definition for a task that can be triggered when various events occur within Universal Print.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @return ApiPrintGetTaskDefinitionsRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintGetTaskDefinitions(ctx _context.Context, printTaskDefinitionId string) ApiPrintGetTaskDefinitionsRequest {
	return ApiPrintGetTaskDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintTaskDefinition
func (a *PrintPrintTaskDefinitionApiService) PrintGetTaskDefinitionsExecute(r ApiPrintGetTaskDefinitionsRequest) (MicrosoftGraphPrintTaskDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintTaskDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintGetTaskDefinitions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintListTaskDefinitionsRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiPrintListTaskDefinitionsRequest) Top(top int32) ApiPrintListTaskDefinitionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiPrintListTaskDefinitionsRequest) Skip(skip int32) ApiPrintListTaskDefinitionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiPrintListTaskDefinitionsRequest) Search(search string) ApiPrintListTaskDefinitionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiPrintListTaskDefinitionsRequest) Filter(filter string) ApiPrintListTaskDefinitionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiPrintListTaskDefinitionsRequest) Count(count bool) ApiPrintListTaskDefinitionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiPrintListTaskDefinitionsRequest) Orderby(orderby []string) ApiPrintListTaskDefinitionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiPrintListTaskDefinitionsRequest) Select_(select_ []string) ApiPrintListTaskDefinitionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrintListTaskDefinitionsRequest) Expand(expand []string) ApiPrintListTaskDefinitionsRequest {
	r.expand = &expand
	return r
}

func (r ApiPrintListTaskDefinitionsRequest) Execute() (CollectionOfPrintTaskDefinition, *_nethttp.Response, error) {
	return r.ApiService.PrintListTaskDefinitionsExecute(r)
}

/*
PrintListTaskDefinitions Get taskDefinitions from print

List of abstract definition for a task that can be triggered when various events occur within Universal Print.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPrintListTaskDefinitionsRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintListTaskDefinitions(ctx _context.Context) ApiPrintListTaskDefinitionsRequest {
	return ApiPrintListTaskDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfPrintTaskDefinition
func (a *PrintPrintTaskDefinitionApiService) PrintListTaskDefinitionsExecute(r ApiPrintListTaskDefinitionsRequest) (CollectionOfPrintTaskDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfPrintTaskDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintListTaskDefinitions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintTaskDefinitionsCreateTasksRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	microsoftGraphPrintTask *MicrosoftGraphPrintTask
}

// New navigation property
func (r ApiPrintTaskDefinitionsCreateTasksRequest) MicrosoftGraphPrintTask(microsoftGraphPrintTask MicrosoftGraphPrintTask) ApiPrintTaskDefinitionsCreateTasksRequest {
	r.microsoftGraphPrintTask = &microsoftGraphPrintTask
	return r
}

func (r ApiPrintTaskDefinitionsCreateTasksRequest) Execute() (MicrosoftGraphPrintTask, *_nethttp.Response, error) {
	return r.ApiService.PrintTaskDefinitionsCreateTasksExecute(r)
}

/*
PrintTaskDefinitionsCreateTasks Create new navigation property to tasks for print

A list of tasks that have been created based on this definition. The list includes currently running tasks and recently completed tasks. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @return ApiPrintTaskDefinitionsCreateTasksRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsCreateTasks(ctx _context.Context, printTaskDefinitionId string) ApiPrintTaskDefinitionsCreateTasksRequest {
	return ApiPrintTaskDefinitionsCreateTasksRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintTask
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsCreateTasksExecute(r ApiPrintTaskDefinitionsCreateTasksRequest) (MicrosoftGraphPrintTask, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintTaskDefinitionsCreateTasks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintTask == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphPrintTask is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintTask
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintTaskDefinitionsDeleteTasksRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	printTaskId string
	ifMatch *string
}

// ETag
func (r ApiPrintTaskDefinitionsDeleteTasksRequest) IfMatch(ifMatch string) ApiPrintTaskDefinitionsDeleteTasksRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiPrintTaskDefinitionsDeleteTasksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintTaskDefinitionsDeleteTasksExecute(r)
}

/*
PrintTaskDefinitionsDeleteTasks Delete navigation property tasks for print

A list of tasks that have been created based on this definition. The list includes currently running tasks and recently completed tasks. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @param printTaskId key: id of printTask
 @return ApiPrintTaskDefinitionsDeleteTasksRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsDeleteTasks(ctx _context.Context, printTaskDefinitionId string, printTaskId string) ApiPrintTaskDefinitionsDeleteTasksRequest {
	return ApiPrintTaskDefinitionsDeleteTasksRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
		printTaskId: printTaskId,
	}
}

// Execute executes the request
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsDeleteTasksExecute(r ApiPrintTaskDefinitionsDeleteTasksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintTaskDefinitionsDeleteTasks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}/tasks/{printTask-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"printTask-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrintTaskDefinitionsGetTasksRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	printTaskId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiPrintTaskDefinitionsGetTasksRequest) Select_(select_ []string) ApiPrintTaskDefinitionsGetTasksRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrintTaskDefinitionsGetTasksRequest) Expand(expand []string) ApiPrintTaskDefinitionsGetTasksRequest {
	r.expand = &expand
	return r
}

func (r ApiPrintTaskDefinitionsGetTasksRequest) Execute() (MicrosoftGraphPrintTask, *_nethttp.Response, error) {
	return r.ApiService.PrintTaskDefinitionsGetTasksExecute(r)
}

/*
PrintTaskDefinitionsGetTasks Get tasks from print

A list of tasks that have been created based on this definition. The list includes currently running tasks and recently completed tasks. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @param printTaskId key: id of printTask
 @return ApiPrintTaskDefinitionsGetTasksRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsGetTasks(ctx _context.Context, printTaskDefinitionId string, printTaskId string) ApiPrintTaskDefinitionsGetTasksRequest {
	return ApiPrintTaskDefinitionsGetTasksRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
		printTaskId: printTaskId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintTask
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsGetTasksExecute(r ApiPrintTaskDefinitionsGetTasksRequest) (MicrosoftGraphPrintTask, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintTaskDefinitionsGetTasks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}/tasks/{printTask-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"printTask-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintTaskDefinitionsListTasksRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiPrintTaskDefinitionsListTasksRequest) Top(top int32) ApiPrintTaskDefinitionsListTasksRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiPrintTaskDefinitionsListTasksRequest) Skip(skip int32) ApiPrintTaskDefinitionsListTasksRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiPrintTaskDefinitionsListTasksRequest) Search(search string) ApiPrintTaskDefinitionsListTasksRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiPrintTaskDefinitionsListTasksRequest) Filter(filter string) ApiPrintTaskDefinitionsListTasksRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiPrintTaskDefinitionsListTasksRequest) Count(count bool) ApiPrintTaskDefinitionsListTasksRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiPrintTaskDefinitionsListTasksRequest) Orderby(orderby []string) ApiPrintTaskDefinitionsListTasksRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiPrintTaskDefinitionsListTasksRequest) Select_(select_ []string) ApiPrintTaskDefinitionsListTasksRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrintTaskDefinitionsListTasksRequest) Expand(expand []string) ApiPrintTaskDefinitionsListTasksRequest {
	r.expand = &expand
	return r
}

func (r ApiPrintTaskDefinitionsListTasksRequest) Execute() (CollectionOfPrintTask, *_nethttp.Response, error) {
	return r.ApiService.PrintTaskDefinitionsListTasksExecute(r)
}

/*
PrintTaskDefinitionsListTasks Get tasks from print

A list of tasks that have been created based on this definition. The list includes currently running tasks and recently completed tasks. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @return ApiPrintTaskDefinitionsListTasksRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsListTasks(ctx _context.Context, printTaskDefinitionId string) ApiPrintTaskDefinitionsListTasksRequest {
	return ApiPrintTaskDefinitionsListTasksRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
	}
}

// Execute executes the request
//  @return CollectionOfPrintTask
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsListTasksExecute(r ApiPrintTaskDefinitionsListTasksRequest) (CollectionOfPrintTask, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfPrintTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintTaskDefinitionsListTasks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintTaskDefinitionsTasksDeleteRefDefinitionRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	printTaskId string
	ifMatch *string
}

// ETag
func (r ApiPrintTaskDefinitionsTasksDeleteRefDefinitionRequest) IfMatch(ifMatch string) ApiPrintTaskDefinitionsTasksDeleteRefDefinitionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiPrintTaskDefinitionsTasksDeleteRefDefinitionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintTaskDefinitionsTasksDeleteRefDefinitionExecute(r)
}

/*
PrintTaskDefinitionsTasksDeleteRefDefinition Delete ref of navigation property definition for print

The printTaskDefinition that was used to create this task. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @param printTaskId key: id of printTask
 @return ApiPrintTaskDefinitionsTasksDeleteRefDefinitionRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksDeleteRefDefinition(ctx _context.Context, printTaskDefinitionId string, printTaskId string) ApiPrintTaskDefinitionsTasksDeleteRefDefinitionRequest {
	return ApiPrintTaskDefinitionsTasksDeleteRefDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
		printTaskId: printTaskId,
	}
}

// Execute executes the request
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksDeleteRefDefinitionExecute(r ApiPrintTaskDefinitionsTasksDeleteRefDefinitionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintTaskDefinitionsTasksDeleteRefDefinition")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}/tasks/{printTask-id}/definition/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"printTask-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrintTaskDefinitionsTasksDeleteRefTriggerRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	printTaskId string
	ifMatch *string
}

// ETag
func (r ApiPrintTaskDefinitionsTasksDeleteRefTriggerRequest) IfMatch(ifMatch string) ApiPrintTaskDefinitionsTasksDeleteRefTriggerRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiPrintTaskDefinitionsTasksDeleteRefTriggerRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintTaskDefinitionsTasksDeleteRefTriggerExecute(r)
}

/*
PrintTaskDefinitionsTasksDeleteRefTrigger Delete ref of navigation property trigger for print

The printTaskTrigger that triggered this task's execution. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @param printTaskId key: id of printTask
 @return ApiPrintTaskDefinitionsTasksDeleteRefTriggerRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksDeleteRefTrigger(ctx _context.Context, printTaskDefinitionId string, printTaskId string) ApiPrintTaskDefinitionsTasksDeleteRefTriggerRequest {
	return ApiPrintTaskDefinitionsTasksDeleteRefTriggerRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
		printTaskId: printTaskId,
	}
}

// Execute executes the request
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksDeleteRefTriggerExecute(r ApiPrintTaskDefinitionsTasksDeleteRefTriggerRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintTaskDefinitionsTasksDeleteRefTrigger")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}/tasks/{printTask-id}/trigger/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"printTask-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrintTaskDefinitionsTasksGetDefinitionRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	printTaskId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiPrintTaskDefinitionsTasksGetDefinitionRequest) Select_(select_ []string) ApiPrintTaskDefinitionsTasksGetDefinitionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrintTaskDefinitionsTasksGetDefinitionRequest) Expand(expand []string) ApiPrintTaskDefinitionsTasksGetDefinitionRequest {
	r.expand = &expand
	return r
}

func (r ApiPrintTaskDefinitionsTasksGetDefinitionRequest) Execute() (MicrosoftGraphPrintTaskDefinition, *_nethttp.Response, error) {
	return r.ApiService.PrintTaskDefinitionsTasksGetDefinitionExecute(r)
}

/*
PrintTaskDefinitionsTasksGetDefinition Get definition from print

The printTaskDefinition that was used to create this task. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @param printTaskId key: id of printTask
 @return ApiPrintTaskDefinitionsTasksGetDefinitionRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksGetDefinition(ctx _context.Context, printTaskDefinitionId string, printTaskId string) ApiPrintTaskDefinitionsTasksGetDefinitionRequest {
	return ApiPrintTaskDefinitionsTasksGetDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
		printTaskId: printTaskId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintTaskDefinition
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksGetDefinitionExecute(r ApiPrintTaskDefinitionsTasksGetDefinitionRequest) (MicrosoftGraphPrintTaskDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintTaskDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintTaskDefinitionsTasksGetDefinition")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}/tasks/{printTask-id}/definition"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"printTask-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintTaskDefinitionsTasksGetRefDefinitionRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	printTaskId string
}


func (r ApiPrintTaskDefinitionsTasksGetRefDefinitionRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.PrintTaskDefinitionsTasksGetRefDefinitionExecute(r)
}

/*
PrintTaskDefinitionsTasksGetRefDefinition Get ref of definition from print

The printTaskDefinition that was used to create this task. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @param printTaskId key: id of printTask
 @return ApiPrintTaskDefinitionsTasksGetRefDefinitionRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksGetRefDefinition(ctx _context.Context, printTaskDefinitionId string, printTaskId string) ApiPrintTaskDefinitionsTasksGetRefDefinitionRequest {
	return ApiPrintTaskDefinitionsTasksGetRefDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
		printTaskId: printTaskId,
	}
}

// Execute executes the request
//  @return string
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksGetRefDefinitionExecute(r ApiPrintTaskDefinitionsTasksGetRefDefinitionRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintTaskDefinitionsTasksGetRefDefinition")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}/tasks/{printTask-id}/definition/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"printTask-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintTaskDefinitionsTasksGetRefTriggerRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	printTaskId string
}


func (r ApiPrintTaskDefinitionsTasksGetRefTriggerRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.PrintTaskDefinitionsTasksGetRefTriggerExecute(r)
}

/*
PrintTaskDefinitionsTasksGetRefTrigger Get ref of trigger from print

The printTaskTrigger that triggered this task's execution. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @param printTaskId key: id of printTask
 @return ApiPrintTaskDefinitionsTasksGetRefTriggerRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksGetRefTrigger(ctx _context.Context, printTaskDefinitionId string, printTaskId string) ApiPrintTaskDefinitionsTasksGetRefTriggerRequest {
	return ApiPrintTaskDefinitionsTasksGetRefTriggerRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
		printTaskId: printTaskId,
	}
}

// Execute executes the request
//  @return string
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksGetRefTriggerExecute(r ApiPrintTaskDefinitionsTasksGetRefTriggerRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintTaskDefinitionsTasksGetRefTrigger")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}/tasks/{printTask-id}/trigger/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"printTask-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintTaskDefinitionsTasksGetTriggerRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	printTaskId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiPrintTaskDefinitionsTasksGetTriggerRequest) Select_(select_ []string) ApiPrintTaskDefinitionsTasksGetTriggerRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrintTaskDefinitionsTasksGetTriggerRequest) Expand(expand []string) ApiPrintTaskDefinitionsTasksGetTriggerRequest {
	r.expand = &expand
	return r
}

func (r ApiPrintTaskDefinitionsTasksGetTriggerRequest) Execute() (MicrosoftGraphPrintTaskTrigger, *_nethttp.Response, error) {
	return r.ApiService.PrintTaskDefinitionsTasksGetTriggerExecute(r)
}

/*
PrintTaskDefinitionsTasksGetTrigger Get trigger from print

The printTaskTrigger that triggered this task's execution. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @param printTaskId key: id of printTask
 @return ApiPrintTaskDefinitionsTasksGetTriggerRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksGetTrigger(ctx _context.Context, printTaskDefinitionId string, printTaskId string) ApiPrintTaskDefinitionsTasksGetTriggerRequest {
	return ApiPrintTaskDefinitionsTasksGetTriggerRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
		printTaskId: printTaskId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintTaskTrigger
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksGetTriggerExecute(r ApiPrintTaskDefinitionsTasksGetTriggerRequest) (MicrosoftGraphPrintTaskTrigger, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintTaskTrigger
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintTaskDefinitionsTasksGetTrigger")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}/tasks/{printTask-id}/trigger"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"printTask-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintTaskDefinitionsTasksUpdateRefDefinitionRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	printTaskId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref values
func (r ApiPrintTaskDefinitionsTasksUpdateRefDefinitionRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiPrintTaskDefinitionsTasksUpdateRefDefinitionRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiPrintTaskDefinitionsTasksUpdateRefDefinitionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintTaskDefinitionsTasksUpdateRefDefinitionExecute(r)
}

/*
PrintTaskDefinitionsTasksUpdateRefDefinition Update the ref of navigation property definition in print

The printTaskDefinition that was used to create this task. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @param printTaskId key: id of printTask
 @return ApiPrintTaskDefinitionsTasksUpdateRefDefinitionRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksUpdateRefDefinition(ctx _context.Context, printTaskDefinitionId string, printTaskId string) ApiPrintTaskDefinitionsTasksUpdateRefDefinitionRequest {
	return ApiPrintTaskDefinitionsTasksUpdateRefDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
		printTaskId: printTaskId,
	}
}

// Execute executes the request
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksUpdateRefDefinitionExecute(r ApiPrintTaskDefinitionsTasksUpdateRefDefinitionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintTaskDefinitionsTasksUpdateRefDefinition")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}/tasks/{printTask-id}/definition/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"printTask-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrintTaskDefinitionsTasksUpdateRefTriggerRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	printTaskId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref values
func (r ApiPrintTaskDefinitionsTasksUpdateRefTriggerRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiPrintTaskDefinitionsTasksUpdateRefTriggerRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiPrintTaskDefinitionsTasksUpdateRefTriggerRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintTaskDefinitionsTasksUpdateRefTriggerExecute(r)
}

/*
PrintTaskDefinitionsTasksUpdateRefTrigger Update the ref of navigation property trigger in print

The printTaskTrigger that triggered this task's execution. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @param printTaskId key: id of printTask
 @return ApiPrintTaskDefinitionsTasksUpdateRefTriggerRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksUpdateRefTrigger(ctx _context.Context, printTaskDefinitionId string, printTaskId string) ApiPrintTaskDefinitionsTasksUpdateRefTriggerRequest {
	return ApiPrintTaskDefinitionsTasksUpdateRefTriggerRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
		printTaskId: printTaskId,
	}
}

// Execute executes the request
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsTasksUpdateRefTriggerExecute(r ApiPrintTaskDefinitionsTasksUpdateRefTriggerRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintTaskDefinitionsTasksUpdateRefTrigger")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}/tasks/{printTask-id}/trigger/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"printTask-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrintTaskDefinitionsUpdateTasksRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	printTaskId string
	microsoftGraphPrintTask *MicrosoftGraphPrintTask
}

// New navigation property values
func (r ApiPrintTaskDefinitionsUpdateTasksRequest) MicrosoftGraphPrintTask(microsoftGraphPrintTask MicrosoftGraphPrintTask) ApiPrintTaskDefinitionsUpdateTasksRequest {
	r.microsoftGraphPrintTask = &microsoftGraphPrintTask
	return r
}

func (r ApiPrintTaskDefinitionsUpdateTasksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintTaskDefinitionsUpdateTasksExecute(r)
}

/*
PrintTaskDefinitionsUpdateTasks Update the navigation property tasks in print

A list of tasks that have been created based on this definition. The list includes currently running tasks and recently completed tasks. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @param printTaskId key: id of printTask
 @return ApiPrintTaskDefinitionsUpdateTasksRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsUpdateTasks(ctx _context.Context, printTaskDefinitionId string, printTaskId string) ApiPrintTaskDefinitionsUpdateTasksRequest {
	return ApiPrintTaskDefinitionsUpdateTasksRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
		printTaskId: printTaskId,
	}
}

// Execute executes the request
func (a *PrintPrintTaskDefinitionApiService) PrintTaskDefinitionsUpdateTasksExecute(r ApiPrintTaskDefinitionsUpdateTasksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintTaskDefinitionsUpdateTasks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}/tasks/{printTask-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"printTask-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintTask == nil {
		return nil, reportError("microsoftGraphPrintTask is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintTask
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrintUpdateTaskDefinitionsRequest struct {
	ctx _context.Context
	ApiService *PrintPrintTaskDefinitionApiService
	printTaskDefinitionId string
	microsoftGraphPrintTaskDefinition *MicrosoftGraphPrintTaskDefinition
}

// New navigation property values
func (r ApiPrintUpdateTaskDefinitionsRequest) MicrosoftGraphPrintTaskDefinition(microsoftGraphPrintTaskDefinition MicrosoftGraphPrintTaskDefinition) ApiPrintUpdateTaskDefinitionsRequest {
	r.microsoftGraphPrintTaskDefinition = &microsoftGraphPrintTaskDefinition
	return r
}

func (r ApiPrintUpdateTaskDefinitionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintUpdateTaskDefinitionsExecute(r)
}

/*
PrintUpdateTaskDefinitions Update the navigation property taskDefinitions in print

List of abstract definition for a task that can be triggered when various events occur within Universal Print.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printTaskDefinitionId key: id of printTaskDefinition
 @return ApiPrintUpdateTaskDefinitionsRequest
*/
func (a *PrintPrintTaskDefinitionApiService) PrintUpdateTaskDefinitions(ctx _context.Context, printTaskDefinitionId string) ApiPrintUpdateTaskDefinitionsRequest {
	return ApiPrintUpdateTaskDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		printTaskDefinitionId: printTaskDefinitionId,
	}
}

// Execute executes the request
func (a *PrintPrintTaskDefinitionApiService) PrintUpdateTaskDefinitionsExecute(r ApiPrintUpdateTaskDefinitionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintTaskDefinitionApiService.PrintUpdateTaskDefinitions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/taskDefinitions/{printTaskDefinition-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printTaskDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.printTaskDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintTaskDefinition == nil {
		return nil, reportError("microsoftGraphPrintTaskDefinition is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintTaskDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
