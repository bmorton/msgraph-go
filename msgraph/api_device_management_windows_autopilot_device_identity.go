/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceManagementWindowsAutopilotDeviceIdentityApiService DeviceManagementWindowsAutopilotDeviceIdentityApi service
type DeviceManagementWindowsAutopilotDeviceIdentityApiService service

type ApiDeviceManagementCreateWindowsAutopilotDeviceIdentitiesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementWindowsAutopilotDeviceIdentityApiService
	microsoftGraphWindowsAutopilotDeviceIdentity *MicrosoftGraphWindowsAutopilotDeviceIdentity
}

// New navigation property
func (r ApiDeviceManagementCreateWindowsAutopilotDeviceIdentitiesRequest) MicrosoftGraphWindowsAutopilotDeviceIdentity(microsoftGraphWindowsAutopilotDeviceIdentity MicrosoftGraphWindowsAutopilotDeviceIdentity) ApiDeviceManagementCreateWindowsAutopilotDeviceIdentitiesRequest {
	r.microsoftGraphWindowsAutopilotDeviceIdentity = &microsoftGraphWindowsAutopilotDeviceIdentity
	return r
}

func (r ApiDeviceManagementCreateWindowsAutopilotDeviceIdentitiesRequest) Execute() (MicrosoftGraphWindowsAutopilotDeviceIdentity, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementCreateWindowsAutopilotDeviceIdentitiesExecute(r)
}

/*
DeviceManagementCreateWindowsAutopilotDeviceIdentities Create new navigation property to windowsAutopilotDeviceIdentities for deviceManagement

The Windows autopilot device identities contained collection.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementCreateWindowsAutopilotDeviceIdentitiesRequest
*/
func (a *DeviceManagementWindowsAutopilotDeviceIdentityApiService) DeviceManagementCreateWindowsAutopilotDeviceIdentities(ctx _context.Context) ApiDeviceManagementCreateWindowsAutopilotDeviceIdentitiesRequest {
	return ApiDeviceManagementCreateWindowsAutopilotDeviceIdentitiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWindowsAutopilotDeviceIdentity
func (a *DeviceManagementWindowsAutopilotDeviceIdentityApiService) DeviceManagementCreateWindowsAutopilotDeviceIdentitiesExecute(r ApiDeviceManagementCreateWindowsAutopilotDeviceIdentitiesRequest) (MicrosoftGraphWindowsAutopilotDeviceIdentity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWindowsAutopilotDeviceIdentity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementWindowsAutopilotDeviceIdentityApiService.DeviceManagementCreateWindowsAutopilotDeviceIdentities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/windowsAutopilotDeviceIdentities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWindowsAutopilotDeviceIdentity == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWindowsAutopilotDeviceIdentity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWindowsAutopilotDeviceIdentity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeleteWindowsAutopilotDeviceIdentitiesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementWindowsAutopilotDeviceIdentityApiService
	windowsAutopilotDeviceIdentityId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeleteWindowsAutopilotDeviceIdentitiesRequest) IfMatch(ifMatch string) ApiDeviceManagementDeleteWindowsAutopilotDeviceIdentitiesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeleteWindowsAutopilotDeviceIdentitiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeleteWindowsAutopilotDeviceIdentitiesExecute(r)
}

/*
DeviceManagementDeleteWindowsAutopilotDeviceIdentities Delete navigation property windowsAutopilotDeviceIdentities for deviceManagement

The Windows autopilot device identities contained collection.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param windowsAutopilotDeviceIdentityId key: id of windowsAutopilotDeviceIdentity
 @return ApiDeviceManagementDeleteWindowsAutopilotDeviceIdentitiesRequest
*/
func (a *DeviceManagementWindowsAutopilotDeviceIdentityApiService) DeviceManagementDeleteWindowsAutopilotDeviceIdentities(ctx _context.Context, windowsAutopilotDeviceIdentityId string) ApiDeviceManagementDeleteWindowsAutopilotDeviceIdentitiesRequest {
	return ApiDeviceManagementDeleteWindowsAutopilotDeviceIdentitiesRequest{
		ApiService: a,
		ctx: ctx,
		windowsAutopilotDeviceIdentityId: windowsAutopilotDeviceIdentityId,
	}
}

// Execute executes the request
func (a *DeviceManagementWindowsAutopilotDeviceIdentityApiService) DeviceManagementDeleteWindowsAutopilotDeviceIdentitiesExecute(r ApiDeviceManagementDeleteWindowsAutopilotDeviceIdentitiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementWindowsAutopilotDeviceIdentityApiService.DeviceManagementDeleteWindowsAutopilotDeviceIdentities")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/windowsAutopilotDeviceIdentities/{windowsAutopilotDeviceIdentity-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"windowsAutopilotDeviceIdentity-id"+"}", _neturl.PathEscape(parameterToString(r.windowsAutopilotDeviceIdentityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementGetWindowsAutopilotDeviceIdentitiesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementWindowsAutopilotDeviceIdentityApiService
	windowsAutopilotDeviceIdentityId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementGetWindowsAutopilotDeviceIdentitiesRequest) Select_(select_ []string) ApiDeviceManagementGetWindowsAutopilotDeviceIdentitiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementGetWindowsAutopilotDeviceIdentitiesRequest) Expand(expand []string) ApiDeviceManagementGetWindowsAutopilotDeviceIdentitiesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementGetWindowsAutopilotDeviceIdentitiesRequest) Execute() (MicrosoftGraphWindowsAutopilotDeviceIdentity, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementGetWindowsAutopilotDeviceIdentitiesExecute(r)
}

/*
DeviceManagementGetWindowsAutopilotDeviceIdentities Get windowsAutopilotDeviceIdentities from deviceManagement

The Windows autopilot device identities contained collection.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param windowsAutopilotDeviceIdentityId key: id of windowsAutopilotDeviceIdentity
 @return ApiDeviceManagementGetWindowsAutopilotDeviceIdentitiesRequest
*/
func (a *DeviceManagementWindowsAutopilotDeviceIdentityApiService) DeviceManagementGetWindowsAutopilotDeviceIdentities(ctx _context.Context, windowsAutopilotDeviceIdentityId string) ApiDeviceManagementGetWindowsAutopilotDeviceIdentitiesRequest {
	return ApiDeviceManagementGetWindowsAutopilotDeviceIdentitiesRequest{
		ApiService: a,
		ctx: ctx,
		windowsAutopilotDeviceIdentityId: windowsAutopilotDeviceIdentityId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWindowsAutopilotDeviceIdentity
func (a *DeviceManagementWindowsAutopilotDeviceIdentityApiService) DeviceManagementGetWindowsAutopilotDeviceIdentitiesExecute(r ApiDeviceManagementGetWindowsAutopilotDeviceIdentitiesRequest) (MicrosoftGraphWindowsAutopilotDeviceIdentity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWindowsAutopilotDeviceIdentity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementWindowsAutopilotDeviceIdentityApiService.DeviceManagementGetWindowsAutopilotDeviceIdentities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/windowsAutopilotDeviceIdentities/{windowsAutopilotDeviceIdentity-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"windowsAutopilotDeviceIdentity-id"+"}", _neturl.PathEscape(parameterToString(r.windowsAutopilotDeviceIdentityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementWindowsAutopilotDeviceIdentityApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest) Top(top int32) ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest) Skip(skip int32) ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest) Search(search string) ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest) Filter(filter string) ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest) Count(count bool) ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest) Orderby(orderby []string) ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest) Select_(select_ []string) ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest) Expand(expand []string) ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest) Execute() (CollectionOfWindowsAutopilotDeviceIdentity, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementListWindowsAutopilotDeviceIdentitiesExecute(r)
}

/*
DeviceManagementListWindowsAutopilotDeviceIdentities Get windowsAutopilotDeviceIdentities from deviceManagement

The Windows autopilot device identities contained collection.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest
*/
func (a *DeviceManagementWindowsAutopilotDeviceIdentityApiService) DeviceManagementListWindowsAutopilotDeviceIdentities(ctx _context.Context) ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest {
	return ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfWindowsAutopilotDeviceIdentity
func (a *DeviceManagementWindowsAutopilotDeviceIdentityApiService) DeviceManagementListWindowsAutopilotDeviceIdentitiesExecute(r ApiDeviceManagementListWindowsAutopilotDeviceIdentitiesRequest) (CollectionOfWindowsAutopilotDeviceIdentity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWindowsAutopilotDeviceIdentity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementWindowsAutopilotDeviceIdentityApiService.DeviceManagementListWindowsAutopilotDeviceIdentities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/windowsAutopilotDeviceIdentities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementUpdateWindowsAutopilotDeviceIdentitiesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementWindowsAutopilotDeviceIdentityApiService
	windowsAutopilotDeviceIdentityId string
	microsoftGraphWindowsAutopilotDeviceIdentity *MicrosoftGraphWindowsAutopilotDeviceIdentity
}

// New navigation property values
func (r ApiDeviceManagementUpdateWindowsAutopilotDeviceIdentitiesRequest) MicrosoftGraphWindowsAutopilotDeviceIdentity(microsoftGraphWindowsAutopilotDeviceIdentity MicrosoftGraphWindowsAutopilotDeviceIdentity) ApiDeviceManagementUpdateWindowsAutopilotDeviceIdentitiesRequest {
	r.microsoftGraphWindowsAutopilotDeviceIdentity = &microsoftGraphWindowsAutopilotDeviceIdentity
	return r
}

func (r ApiDeviceManagementUpdateWindowsAutopilotDeviceIdentitiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementUpdateWindowsAutopilotDeviceIdentitiesExecute(r)
}

/*
DeviceManagementUpdateWindowsAutopilotDeviceIdentities Update the navigation property windowsAutopilotDeviceIdentities in deviceManagement

The Windows autopilot device identities contained collection.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param windowsAutopilotDeviceIdentityId key: id of windowsAutopilotDeviceIdentity
 @return ApiDeviceManagementUpdateWindowsAutopilotDeviceIdentitiesRequest
*/
func (a *DeviceManagementWindowsAutopilotDeviceIdentityApiService) DeviceManagementUpdateWindowsAutopilotDeviceIdentities(ctx _context.Context, windowsAutopilotDeviceIdentityId string) ApiDeviceManagementUpdateWindowsAutopilotDeviceIdentitiesRequest {
	return ApiDeviceManagementUpdateWindowsAutopilotDeviceIdentitiesRequest{
		ApiService: a,
		ctx: ctx,
		windowsAutopilotDeviceIdentityId: windowsAutopilotDeviceIdentityId,
	}
}

// Execute executes the request
func (a *DeviceManagementWindowsAutopilotDeviceIdentityApiService) DeviceManagementUpdateWindowsAutopilotDeviceIdentitiesExecute(r ApiDeviceManagementUpdateWindowsAutopilotDeviceIdentitiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementWindowsAutopilotDeviceIdentityApiService.DeviceManagementUpdateWindowsAutopilotDeviceIdentities")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/windowsAutopilotDeviceIdentities/{windowsAutopilotDeviceIdentity-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"windowsAutopilotDeviceIdentity-id"+"}", _neturl.PathEscape(parameterToString(r.windowsAutopilotDeviceIdentityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWindowsAutopilotDeviceIdentity == nil {
		return nil, reportError("microsoftGraphWindowsAutopilotDeviceIdentity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWindowsAutopilotDeviceIdentity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
