/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// InlineObject1203 struct for InlineObject1203
type InlineObject1203 struct {
	ChallengeToken NullableString `json:"challengeToken,omitempty"`
	Password *string `json:"password,omitempty"`
}

// NewInlineObject1203 instantiates a new InlineObject1203 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1203() *InlineObject1203 {
	this := InlineObject1203{}
	return &this
}

// NewInlineObject1203WithDefaults instantiates a new InlineObject1203 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1203WithDefaults() *InlineObject1203 {
	this := InlineObject1203{}
	return &this
}

// GetChallengeToken returns the ChallengeToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1203) GetChallengeToken() string {
	if o == nil || o.ChallengeToken.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChallengeToken.Get()
}

// GetChallengeTokenOk returns a tuple with the ChallengeToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1203) GetChallengeTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ChallengeToken.Get(), o.ChallengeToken.IsSet()
}

// HasChallengeToken returns a boolean if a field has been set.
func (o *InlineObject1203) HasChallengeToken() bool {
	if o != nil && o.ChallengeToken.IsSet() {
		return true
	}

	return false
}

// SetChallengeToken gets a reference to the given NullableString and assigns it to the ChallengeToken field.
func (o *InlineObject1203) SetChallengeToken(v string) {
	o.ChallengeToken.Set(&v)
}
// SetChallengeTokenNil sets the value for ChallengeToken to be an explicit nil
func (o *InlineObject1203) SetChallengeTokenNil() {
	o.ChallengeToken.Set(nil)
}

// UnsetChallengeToken ensures that no value is present for ChallengeToken, not even an explicit nil
func (o *InlineObject1203) UnsetChallengeToken() {
	o.ChallengeToken.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *InlineObject1203) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1203) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *InlineObject1203) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *InlineObject1203) SetPassword(v string) {
	o.Password = &v
}

func (o InlineObject1203) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ChallengeToken.IsSet() {
		toSerialize["challengeToken"] = o.ChallengeToken.Get()
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1203 struct {
	value *InlineObject1203
	isSet bool
}

func (v NullableInlineObject1203) Get() *InlineObject1203 {
	return v.value
}

func (v *NullableInlineObject1203) Set(val *InlineObject1203) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1203) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1203) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1203(val *InlineObject1203) *NullableInlineObject1203 {
	return &NullableInlineObject1203{value: val, isSet: true}
}

func (v NullableInlineObject1203) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1203) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


