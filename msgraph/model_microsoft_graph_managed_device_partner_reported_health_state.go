/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphManagedDevicePartnerReportedHealthState Available health states for the Device Health API
type MicrosoftGraphManagedDevicePartnerReportedHealthState string

// List of microsoft.graph.managedDevicePartnerReportedHealthState
const (
	UNKNOWN MicrosoftGraphManagedDevicePartnerReportedHealthState = "unknown"
	ACTIVATED MicrosoftGraphManagedDevicePartnerReportedHealthState = "activated"
	DEACTIVATED MicrosoftGraphManagedDevicePartnerReportedHealthState = "deactivated"
	SECURED MicrosoftGraphManagedDevicePartnerReportedHealthState = "secured"
	LOW_SEVERITY MicrosoftGraphManagedDevicePartnerReportedHealthState = "lowSeverity"
	MEDIUM_SEVERITY MicrosoftGraphManagedDevicePartnerReportedHealthState = "mediumSeverity"
	HIGH_SEVERITY MicrosoftGraphManagedDevicePartnerReportedHealthState = "highSeverity"
	UNRESPONSIVE MicrosoftGraphManagedDevicePartnerReportedHealthState = "unresponsive"
	COMPROMISED MicrosoftGraphManagedDevicePartnerReportedHealthState = "compromised"
	MISCONFIGURED MicrosoftGraphManagedDevicePartnerReportedHealthState = "misconfigured"
)

// All allowed values of MicrosoftGraphManagedDevicePartnerReportedHealthState enum
var AllowedMicrosoftGraphManagedDevicePartnerReportedHealthStateEnumValues = []MicrosoftGraphManagedDevicePartnerReportedHealthState{
	"unknown",
	"activated",
	"deactivated",
	"secured",
	"lowSeverity",
	"mediumSeverity",
	"highSeverity",
	"unresponsive",
	"compromised",
	"misconfigured",
}

func (v *MicrosoftGraphManagedDevicePartnerReportedHealthState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphManagedDevicePartnerReportedHealthState(value)
	for _, existing := range AllowedMicrosoftGraphManagedDevicePartnerReportedHealthStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphManagedDevicePartnerReportedHealthState", value)
}

// NewMicrosoftGraphManagedDevicePartnerReportedHealthStateFromValue returns a pointer to a valid MicrosoftGraphManagedDevicePartnerReportedHealthState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphManagedDevicePartnerReportedHealthStateFromValue(v string) (*MicrosoftGraphManagedDevicePartnerReportedHealthState, error) {
	ev := MicrosoftGraphManagedDevicePartnerReportedHealthState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphManagedDevicePartnerReportedHealthState: valid values are %v", v, AllowedMicrosoftGraphManagedDevicePartnerReportedHealthStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphManagedDevicePartnerReportedHealthState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphManagedDevicePartnerReportedHealthStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.managedDevicePartnerReportedHealthState value
func (v MicrosoftGraphManagedDevicePartnerReportedHealthState) Ptr() *MicrosoftGraphManagedDevicePartnerReportedHealthState {
	return &v
}

type NullableMicrosoftGraphManagedDevicePartnerReportedHealthState struct {
	value *MicrosoftGraphManagedDevicePartnerReportedHealthState
	isSet bool
}

func (v NullableMicrosoftGraphManagedDevicePartnerReportedHealthState) Get() *MicrosoftGraphManagedDevicePartnerReportedHealthState {
	return v.value
}

func (v *NullableMicrosoftGraphManagedDevicePartnerReportedHealthState) Set(val *MicrosoftGraphManagedDevicePartnerReportedHealthState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphManagedDevicePartnerReportedHealthState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphManagedDevicePartnerReportedHealthState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphManagedDevicePartnerReportedHealthState(val *MicrosoftGraphManagedDevicePartnerReportedHealthState) *NullableMicrosoftGraphManagedDevicePartnerReportedHealthState {
	return &NullableMicrosoftGraphManagedDevicePartnerReportedHealthState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphManagedDevicePartnerReportedHealthState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphManagedDevicePartnerReportedHealthState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

