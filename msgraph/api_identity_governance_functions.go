/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// IdentityGovernanceFunctionsApiService IdentityGovernanceFunctionsApi service
type IdentityGovernanceFunctionsApiService service

type ApiIdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesAccessReviewInstanceDecisionsFilterByCurrentUserRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceFunctionsApiService
	accessReviewScheduleDefinitionId string
	accessReviewInstanceId string
	true AnyOfmicrosoftGraphAccessReviewInstanceDecisionItemFilterByCurrentUserOptions
}


func (r ApiIdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesAccessReviewInstanceDecisionsFilterByCurrentUserRequest) Execute() ([]*AnyOfmicrosoftGraphAccessReviewInstanceDecisionItem, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesAccessReviewInstanceDecisionsFilterByCurrentUserExecute(r)
}

/*
IdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesAccessReviewInstanceDecisionsFilterByCurrentUser Invoke function filterByCurrentUser

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accessReviewScheduleDefinitionId key: id of accessReviewScheduleDefinition
 @param accessReviewInstanceId key: id of accessReviewInstance
 @param true Usage: on={on}
 @return ApiIdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesAccessReviewInstanceDecisionsFilterByCurrentUserRequest
*/
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesAccessReviewInstanceDecisionsFilterByCurrentUser(ctx _context.Context, accessReviewScheduleDefinitionId string, accessReviewInstanceId string, true AnyOfmicrosoftGraphAccessReviewInstanceDecisionItemFilterByCurrentUserOptions) ApiIdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesAccessReviewInstanceDecisionsFilterByCurrentUserRequest {
	return ApiIdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesAccessReviewInstanceDecisionsFilterByCurrentUserRequest{
		ApiService: a,
		ctx: ctx,
		accessReviewScheduleDefinitionId: accessReviewScheduleDefinitionId,
		accessReviewInstanceId: accessReviewInstanceId,
		true: true,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphAccessReviewInstanceDecisionItem
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesAccessReviewInstanceDecisionsFilterByCurrentUserExecute(r ApiIdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesAccessReviewInstanceDecisionsFilterByCurrentUserRequest) ([]*AnyOfmicrosoftGraphAccessReviewInstanceDecisionItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphAccessReviewInstanceDecisionItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceFunctionsApiService.IdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesAccessReviewInstanceDecisionsFilterByCurrentUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/accessReviews/definitions/{accessReviewScheduleDefinition-id}/instances/{accessReviewInstance-id}/decisions/microsoft.graph.filterByCurrentUser(on={on})"
	localVarPath = strings.Replace(localVarPath, "{"+"accessReviewScheduleDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.accessReviewScheduleDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accessReviewInstance-id"+"}", _neturl.PathEscape(parameterToString(r.accessReviewInstanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"true"+"}", _neturl.PathEscape(parameterToString(r.true, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesFilterByCurrentUserRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceFunctionsApiService
	accessReviewScheduleDefinitionId string
	true AnyOfmicrosoftGraphAccessReviewInstanceFilterByCurrentUserOptions
}


func (r ApiIdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesFilterByCurrentUserRequest) Execute() ([]*AnyOfmicrosoftGraphAccessReviewInstance, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesFilterByCurrentUserExecute(r)
}

/*
IdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesFilterByCurrentUser Invoke function filterByCurrentUser

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accessReviewScheduleDefinitionId key: id of accessReviewScheduleDefinition
 @param true Usage: on={on}
 @return ApiIdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesFilterByCurrentUserRequest
*/
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesFilterByCurrentUser(ctx _context.Context, accessReviewScheduleDefinitionId string, true AnyOfmicrosoftGraphAccessReviewInstanceFilterByCurrentUserOptions) ApiIdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesFilterByCurrentUserRequest {
	return ApiIdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesFilterByCurrentUserRequest{
		ApiService: a,
		ctx: ctx,
		accessReviewScheduleDefinitionId: accessReviewScheduleDefinitionId,
		true: true,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphAccessReviewInstance
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesFilterByCurrentUserExecute(r ApiIdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesFilterByCurrentUserRequest) ([]*AnyOfmicrosoftGraphAccessReviewInstance, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphAccessReviewInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceFunctionsApiService.IdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesFilterByCurrentUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/accessReviews/definitions/{accessReviewScheduleDefinition-id}/instances/microsoft.graph.filterByCurrentUser(on={on})"
	localVarPath = strings.Replace(localVarPath, "{"+"accessReviewScheduleDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.accessReviewScheduleDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"true"+"}", _neturl.PathEscape(parameterToString(r.true, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAccessReviewsDefinitionsFilterByCurrentUserRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceFunctionsApiService
	true AnyOfmicrosoftGraphAccessReviewScheduleDefinitionFilterByCurrentUserOptions
}


func (r ApiIdentityGovernanceAccessReviewsDefinitionsFilterByCurrentUserRequest) Execute() ([]*AnyOfmicrosoftGraphAccessReviewScheduleDefinition, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAccessReviewsDefinitionsFilterByCurrentUserExecute(r)
}

/*
IdentityGovernanceAccessReviewsDefinitionsFilterByCurrentUser Invoke function filterByCurrentUser

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param true Usage: on={on}
 @return ApiIdentityGovernanceAccessReviewsDefinitionsFilterByCurrentUserRequest
*/
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceAccessReviewsDefinitionsFilterByCurrentUser(ctx _context.Context, true AnyOfmicrosoftGraphAccessReviewScheduleDefinitionFilterByCurrentUserOptions) ApiIdentityGovernanceAccessReviewsDefinitionsFilterByCurrentUserRequest {
	return ApiIdentityGovernanceAccessReviewsDefinitionsFilterByCurrentUserRequest{
		ApiService: a,
		ctx: ctx,
		true: true,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphAccessReviewScheduleDefinition
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceAccessReviewsDefinitionsFilterByCurrentUserExecute(r ApiIdentityGovernanceAccessReviewsDefinitionsFilterByCurrentUserRequest) ([]*AnyOfmicrosoftGraphAccessReviewScheduleDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphAccessReviewScheduleDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceFunctionsApiService.IdentityGovernanceAccessReviewsDefinitionsFilterByCurrentUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/accessReviews/definitions/microsoft.graph.filterByCurrentUser(on={on})"
	localVarPath = strings.Replace(localVarPath, "{"+"true"+"}", _neturl.PathEscape(parameterToString(r.true, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentAppConsentRequestsAppConsentRequestUserConsentRequestsFilterByCurrentUserRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceFunctionsApiService
	appConsentRequestId string
	true AnyOfmicrosoftGraphConsentRequestFilterByCurrentUserOptions
}


func (r ApiIdentityGovernanceAppConsentAppConsentRequestsAppConsentRequestUserConsentRequestsFilterByCurrentUserRequest) Execute() ([]*AnyOfmicrosoftGraphUserConsentRequest, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentAppConsentRequestsAppConsentRequestUserConsentRequestsFilterByCurrentUserExecute(r)
}

/*
IdentityGovernanceAppConsentAppConsentRequestsAppConsentRequestUserConsentRequestsFilterByCurrentUser Invoke function filterByCurrentUser

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @param true Usage: on={on}
 @return ApiIdentityGovernanceAppConsentAppConsentRequestsAppConsentRequestUserConsentRequestsFilterByCurrentUserRequest
*/
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceAppConsentAppConsentRequestsAppConsentRequestUserConsentRequestsFilterByCurrentUser(ctx _context.Context, appConsentRequestId string, true AnyOfmicrosoftGraphConsentRequestFilterByCurrentUserOptions) ApiIdentityGovernanceAppConsentAppConsentRequestsAppConsentRequestUserConsentRequestsFilterByCurrentUserRequest {
	return ApiIdentityGovernanceAppConsentAppConsentRequestsAppConsentRequestUserConsentRequestsFilterByCurrentUserRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
		true: true,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphUserConsentRequest
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceAppConsentAppConsentRequestsAppConsentRequestUserConsentRequestsFilterByCurrentUserExecute(r ApiIdentityGovernanceAppConsentAppConsentRequestsAppConsentRequestUserConsentRequestsFilterByCurrentUserRequest) ([]*AnyOfmicrosoftGraphUserConsentRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphUserConsentRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceFunctionsApiService.IdentityGovernanceAppConsentAppConsentRequestsAppConsentRequestUserConsentRequestsFilterByCurrentUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}/userConsentRequests/microsoft.graph.filterByCurrentUser(on={on})"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"true"+"}", _neturl.PathEscape(parameterToString(r.true, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentAppConsentRequestsFilterByCurrentUserRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceFunctionsApiService
	true AnyOfmicrosoftGraphConsentRequestFilterByCurrentUserOptions
}


func (r ApiIdentityGovernanceAppConsentAppConsentRequestsFilterByCurrentUserRequest) Execute() ([]*AnyOfmicrosoftGraphAppConsentRequest, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentAppConsentRequestsFilterByCurrentUserExecute(r)
}

/*
IdentityGovernanceAppConsentAppConsentRequestsFilterByCurrentUser Invoke function filterByCurrentUser

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param true Usage: on={on}
 @return ApiIdentityGovernanceAppConsentAppConsentRequestsFilterByCurrentUserRequest
*/
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceAppConsentAppConsentRequestsFilterByCurrentUser(ctx _context.Context, true AnyOfmicrosoftGraphConsentRequestFilterByCurrentUserOptions) ApiIdentityGovernanceAppConsentAppConsentRequestsFilterByCurrentUserRequest {
	return ApiIdentityGovernanceAppConsentAppConsentRequestsFilterByCurrentUserRequest{
		ApiService: a,
		ctx: ctx,
		true: true,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphAppConsentRequest
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceAppConsentAppConsentRequestsFilterByCurrentUserExecute(r ApiIdentityGovernanceAppConsentAppConsentRequestsFilterByCurrentUserRequest) ([]*AnyOfmicrosoftGraphAppConsentRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphAppConsentRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceFunctionsApiService.IdentityGovernanceAppConsentAppConsentRequestsFilterByCurrentUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/microsoft.graph.filterByCurrentUser(on={on})"
	localVarPath = strings.Replace(localVarPath, "{"+"true"+"}", _neturl.PathEscape(parameterToString(r.true, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceEntitlementManagementAccessPackageAssignmentApprovalsFilterByCurrentUserRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceFunctionsApiService
	true AnyOfmicrosoftGraphApprovalFilterByCurrentUserOptions
}


func (r ApiIdentityGovernanceEntitlementManagementAccessPackageAssignmentApprovalsFilterByCurrentUserRequest) Execute() ([]*AnyOfmicrosoftGraphApproval, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceEntitlementManagementAccessPackageAssignmentApprovalsFilterByCurrentUserExecute(r)
}

/*
IdentityGovernanceEntitlementManagementAccessPackageAssignmentApprovalsFilterByCurrentUser Invoke function filterByCurrentUser

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param true Usage: on={on}
 @return ApiIdentityGovernanceEntitlementManagementAccessPackageAssignmentApprovalsFilterByCurrentUserRequest
*/
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceEntitlementManagementAccessPackageAssignmentApprovalsFilterByCurrentUser(ctx _context.Context, true AnyOfmicrosoftGraphApprovalFilterByCurrentUserOptions) ApiIdentityGovernanceEntitlementManagementAccessPackageAssignmentApprovalsFilterByCurrentUserRequest {
	return ApiIdentityGovernanceEntitlementManagementAccessPackageAssignmentApprovalsFilterByCurrentUserRequest{
		ApiService: a,
		ctx: ctx,
		true: true,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphApproval
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceEntitlementManagementAccessPackageAssignmentApprovalsFilterByCurrentUserExecute(r ApiIdentityGovernanceEntitlementManagementAccessPackageAssignmentApprovalsFilterByCurrentUserRequest) ([]*AnyOfmicrosoftGraphApproval, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphApproval
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceFunctionsApiService.IdentityGovernanceEntitlementManagementAccessPackageAssignmentApprovalsFilterByCurrentUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/entitlementManagement/accessPackageAssignmentApprovals/microsoft.graph.filterByCurrentUser(on={on})"
	localVarPath = strings.Replace(localVarPath, "{"+"true"+"}", _neturl.PathEscape(parameterToString(r.true, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceEntitlementManagementAccessPackagesFilterByCurrentUserRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceFunctionsApiService
	true AnyOfmicrosoftGraphAccessPackageFilterByCurrentUserOptions
}


func (r ApiIdentityGovernanceEntitlementManagementAccessPackagesFilterByCurrentUserRequest) Execute() ([]*AnyOfmicrosoftGraphAccessPackage, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceEntitlementManagementAccessPackagesFilterByCurrentUserExecute(r)
}

/*
IdentityGovernanceEntitlementManagementAccessPackagesFilterByCurrentUser Invoke function filterByCurrentUser

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param true Usage: on={on}
 @return ApiIdentityGovernanceEntitlementManagementAccessPackagesFilterByCurrentUserRequest
*/
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceEntitlementManagementAccessPackagesFilterByCurrentUser(ctx _context.Context, true AnyOfmicrosoftGraphAccessPackageFilterByCurrentUserOptions) ApiIdentityGovernanceEntitlementManagementAccessPackagesFilterByCurrentUserRequest {
	return ApiIdentityGovernanceEntitlementManagementAccessPackagesFilterByCurrentUserRequest{
		ApiService: a,
		ctx: ctx,
		true: true,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphAccessPackage
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceEntitlementManagementAccessPackagesFilterByCurrentUserExecute(r ApiIdentityGovernanceEntitlementManagementAccessPackagesFilterByCurrentUserRequest) ([]*AnyOfmicrosoftGraphAccessPackage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphAccessPackage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceFunctionsApiService.IdentityGovernanceEntitlementManagementAccessPackagesFilterByCurrentUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/entitlementManagement/accessPackages/microsoft.graph.filterByCurrentUser(on={on})"
	localVarPath = strings.Replace(localVarPath, "{"+"true"+"}", _neturl.PathEscape(parameterToString(r.true, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceEntitlementManagementAssignmentRequestsFilterByCurrentUserRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceFunctionsApiService
	true AnyOfmicrosoftGraphAccessPackageAssignmentRequestFilterByCurrentUserOptions
}


func (r ApiIdentityGovernanceEntitlementManagementAssignmentRequestsFilterByCurrentUserRequest) Execute() ([]*AnyOfmicrosoftGraphAccessPackageAssignmentRequest, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceEntitlementManagementAssignmentRequestsFilterByCurrentUserExecute(r)
}

/*
IdentityGovernanceEntitlementManagementAssignmentRequestsFilterByCurrentUser Invoke function filterByCurrentUser

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param true Usage: on={on}
 @return ApiIdentityGovernanceEntitlementManagementAssignmentRequestsFilterByCurrentUserRequest
*/
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceEntitlementManagementAssignmentRequestsFilterByCurrentUser(ctx _context.Context, true AnyOfmicrosoftGraphAccessPackageAssignmentRequestFilterByCurrentUserOptions) ApiIdentityGovernanceEntitlementManagementAssignmentRequestsFilterByCurrentUserRequest {
	return ApiIdentityGovernanceEntitlementManagementAssignmentRequestsFilterByCurrentUserRequest{
		ApiService: a,
		ctx: ctx,
		true: true,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphAccessPackageAssignmentRequest
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceEntitlementManagementAssignmentRequestsFilterByCurrentUserExecute(r ApiIdentityGovernanceEntitlementManagementAssignmentRequestsFilterByCurrentUserRequest) ([]*AnyOfmicrosoftGraphAccessPackageAssignmentRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphAccessPackageAssignmentRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceFunctionsApiService.IdentityGovernanceEntitlementManagementAssignmentRequestsFilterByCurrentUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/entitlementManagement/assignmentRequests/microsoft.graph.filterByCurrentUser(on={on})"
	localVarPath = strings.Replace(localVarPath, "{"+"true"+"}", _neturl.PathEscape(parameterToString(r.true, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceEntitlementManagementAssignmentsFilterByCurrentUserRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceFunctionsApiService
	true AnyOfmicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions
}


func (r ApiIdentityGovernanceEntitlementManagementAssignmentsFilterByCurrentUserRequest) Execute() ([]*AnyOfmicrosoftGraphAccessPackageAssignment, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceEntitlementManagementAssignmentsFilterByCurrentUserExecute(r)
}

/*
IdentityGovernanceEntitlementManagementAssignmentsFilterByCurrentUser Invoke function filterByCurrentUser

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param true Usage: on={on}
 @return ApiIdentityGovernanceEntitlementManagementAssignmentsFilterByCurrentUserRequest
*/
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceEntitlementManagementAssignmentsFilterByCurrentUser(ctx _context.Context, true AnyOfmicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions) ApiIdentityGovernanceEntitlementManagementAssignmentsFilterByCurrentUserRequest {
	return ApiIdentityGovernanceEntitlementManagementAssignmentsFilterByCurrentUserRequest{
		ApiService: a,
		ctx: ctx,
		true: true,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphAccessPackageAssignment
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceEntitlementManagementAssignmentsFilterByCurrentUserExecute(r ApiIdentityGovernanceEntitlementManagementAssignmentsFilterByCurrentUserRequest) ([]*AnyOfmicrosoftGraphAccessPackageAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphAccessPackageAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceFunctionsApiService.IdentityGovernanceEntitlementManagementAssignmentsFilterByCurrentUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/entitlementManagement/assignments/microsoft.graph.filterByCurrentUser(on={on})"
	localVarPath = strings.Replace(localVarPath, "{"+"true"+"}", _neturl.PathEscape(parameterToString(r.true, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceEntitlementManagementCatalogsAccessPackageCatalogAccessPackagesFilterByCurrentUserRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceFunctionsApiService
	accessPackageCatalogId string
	true AnyOfmicrosoftGraphAccessPackageFilterByCurrentUserOptions
}


func (r ApiIdentityGovernanceEntitlementManagementCatalogsAccessPackageCatalogAccessPackagesFilterByCurrentUserRequest) Execute() ([]*AnyOfmicrosoftGraphAccessPackage, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceEntitlementManagementCatalogsAccessPackageCatalogAccessPackagesFilterByCurrentUserExecute(r)
}

/*
IdentityGovernanceEntitlementManagementCatalogsAccessPackageCatalogAccessPackagesFilterByCurrentUser Invoke function filterByCurrentUser

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accessPackageCatalogId key: id of accessPackageCatalog
 @param true Usage: on={on}
 @return ApiIdentityGovernanceEntitlementManagementCatalogsAccessPackageCatalogAccessPackagesFilterByCurrentUserRequest
*/
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceEntitlementManagementCatalogsAccessPackageCatalogAccessPackagesFilterByCurrentUser(ctx _context.Context, accessPackageCatalogId string, true AnyOfmicrosoftGraphAccessPackageFilterByCurrentUserOptions) ApiIdentityGovernanceEntitlementManagementCatalogsAccessPackageCatalogAccessPackagesFilterByCurrentUserRequest {
	return ApiIdentityGovernanceEntitlementManagementCatalogsAccessPackageCatalogAccessPackagesFilterByCurrentUserRequest{
		ApiService: a,
		ctx: ctx,
		accessPackageCatalogId: accessPackageCatalogId,
		true: true,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphAccessPackage
func (a *IdentityGovernanceFunctionsApiService) IdentityGovernanceEntitlementManagementCatalogsAccessPackageCatalogAccessPackagesFilterByCurrentUserExecute(r ApiIdentityGovernanceEntitlementManagementCatalogsAccessPackageCatalogAccessPackagesFilterByCurrentUserRequest) ([]*AnyOfmicrosoftGraphAccessPackage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphAccessPackage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceFunctionsApiService.IdentityGovernanceEntitlementManagementCatalogsAccessPackageCatalogAccessPackagesFilterByCurrentUser")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/entitlementManagement/catalogs/{accessPackageCatalog-id}/accessPackages/microsoft.graph.filterByCurrentUser(on={on})"
	localVarPath = strings.Replace(localVarPath, "{"+"accessPackageCatalog-id"+"}", _neturl.PathEscape(parameterToString(r.accessPackageCatalogId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"true"+"}", _neturl.PathEscape(parameterToString(r.true, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
