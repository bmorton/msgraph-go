/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// IdentityGovernanceAppConsentApprovalRouteApiService IdentityGovernanceAppConsentApprovalRouteApi service
type IdentityGovernanceAppConsentApprovalRouteApiService service

type ApiIdentityGovernanceAppConsentAppConsentRequestsCreateUserConsentRequestsRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	microsoftGraphUserConsentRequest *MicrosoftGraphUserConsentRequest
}

// New navigation property
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsCreateUserConsentRequestsRequest) MicrosoftGraphUserConsentRequest(microsoftGraphUserConsentRequest MicrosoftGraphUserConsentRequest) ApiIdentityGovernanceAppConsentAppConsentRequestsCreateUserConsentRequestsRequest {
	r.microsoftGraphUserConsentRequest = &microsoftGraphUserConsentRequest
	return r
}

func (r ApiIdentityGovernanceAppConsentAppConsentRequestsCreateUserConsentRequestsRequest) Execute() (MicrosoftGraphUserConsentRequest, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentAppConsentRequestsCreateUserConsentRequestsExecute(r)
}

/*
IdentityGovernanceAppConsentAppConsentRequestsCreateUserConsentRequests Create new navigation property to userConsentRequests for identityGovernance

A list of pending user consent requests.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @return ApiIdentityGovernanceAppConsentAppConsentRequestsCreateUserConsentRequestsRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsCreateUserConsentRequests(ctx _context.Context, appConsentRequestId string) ApiIdentityGovernanceAppConsentAppConsentRequestsCreateUserConsentRequestsRequest {
	return ApiIdentityGovernanceAppConsentAppConsentRequestsCreateUserConsentRequestsRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphUserConsentRequest
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsCreateUserConsentRequestsExecute(r ApiIdentityGovernanceAppConsentAppConsentRequestsCreateUserConsentRequestsRequest) (MicrosoftGraphUserConsentRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphUserConsentRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentAppConsentRequestsCreateUserConsentRequests")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}/userConsentRequests"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphUserConsentRequest == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphUserConsentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphUserConsentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentAppConsentRequestsDeleteUserConsentRequestsRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	userConsentRequestId string
	ifMatch *string
}

// ETag
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsDeleteUserConsentRequestsRequest) IfMatch(ifMatch string) ApiIdentityGovernanceAppConsentAppConsentRequestsDeleteUserConsentRequestsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiIdentityGovernanceAppConsentAppConsentRequestsDeleteUserConsentRequestsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentAppConsentRequestsDeleteUserConsentRequestsExecute(r)
}

/*
IdentityGovernanceAppConsentAppConsentRequestsDeleteUserConsentRequests Delete navigation property userConsentRequests for identityGovernance

A list of pending user consent requests.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @param userConsentRequestId key: id of userConsentRequest
 @return ApiIdentityGovernanceAppConsentAppConsentRequestsDeleteUserConsentRequestsRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsDeleteUserConsentRequests(ctx _context.Context, appConsentRequestId string, userConsentRequestId string) ApiIdentityGovernanceAppConsentAppConsentRequestsDeleteUserConsentRequestsRequest {
	return ApiIdentityGovernanceAppConsentAppConsentRequestsDeleteUserConsentRequestsRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
		userConsentRequestId: userConsentRequestId,
	}
}

// Execute executes the request
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsDeleteUserConsentRequestsExecute(r ApiIdentityGovernanceAppConsentAppConsentRequestsDeleteUserConsentRequestsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentAppConsentRequestsDeleteUserConsentRequests")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}/userConsentRequests/{userConsentRequest-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.userConsentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentAppConsentRequestsGetUserConsentRequestsRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	userConsentRequestId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsGetUserConsentRequestsRequest) Select_(select_ []string) ApiIdentityGovernanceAppConsentAppConsentRequestsGetUserConsentRequestsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsGetUserConsentRequestsRequest) Expand(expand []string) ApiIdentityGovernanceAppConsentAppConsentRequestsGetUserConsentRequestsRequest {
	r.expand = &expand
	return r
}

func (r ApiIdentityGovernanceAppConsentAppConsentRequestsGetUserConsentRequestsRequest) Execute() (MicrosoftGraphUserConsentRequest, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentAppConsentRequestsGetUserConsentRequestsExecute(r)
}

/*
IdentityGovernanceAppConsentAppConsentRequestsGetUserConsentRequests Get userConsentRequests from identityGovernance

A list of pending user consent requests.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @param userConsentRequestId key: id of userConsentRequest
 @return ApiIdentityGovernanceAppConsentAppConsentRequestsGetUserConsentRequestsRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsGetUserConsentRequests(ctx _context.Context, appConsentRequestId string, userConsentRequestId string) ApiIdentityGovernanceAppConsentAppConsentRequestsGetUserConsentRequestsRequest {
	return ApiIdentityGovernanceAppConsentAppConsentRequestsGetUserConsentRequestsRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
		userConsentRequestId: userConsentRequestId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphUserConsentRequest
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsGetUserConsentRequestsExecute(r ApiIdentityGovernanceAppConsentAppConsentRequestsGetUserConsentRequestsRequest) (MicrosoftGraphUserConsentRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphUserConsentRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentAppConsentRequestsGetUserConsentRequests")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}/userConsentRequests/{userConsentRequest-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.userConsentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest) Top(top int32) ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest) Skip(skip int32) ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest) Search(search string) ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest) Filter(filter string) ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest) Count(count bool) ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest) Orderby(orderby []string) ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest) Select_(select_ []string) ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest) Expand(expand []string) ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest {
	r.expand = &expand
	return r
}

func (r ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest) Execute() (CollectionOfUserConsentRequest, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsExecute(r)
}

/*
IdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequests Get userConsentRequests from identityGovernance

A list of pending user consent requests.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @return ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequests(ctx _context.Context, appConsentRequestId string) ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest {
	return ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
	}
}

// Execute executes the request
//  @return CollectionOfUserConsentRequest
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsExecute(r ApiIdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequestsRequest) (CollectionOfUserConsentRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfUserConsentRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentAppConsentRequestsListUserConsentRequests")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}/userConsentRequests"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentAppConsentRequestsUpdateUserConsentRequestsRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	userConsentRequestId string
	microsoftGraphUserConsentRequest *MicrosoftGraphUserConsentRequest
}

// New navigation property values
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUpdateUserConsentRequestsRequest) MicrosoftGraphUserConsentRequest(microsoftGraphUserConsentRequest MicrosoftGraphUserConsentRequest) ApiIdentityGovernanceAppConsentAppConsentRequestsUpdateUserConsentRequestsRequest {
	r.microsoftGraphUserConsentRequest = &microsoftGraphUserConsentRequest
	return r
}

func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUpdateUserConsentRequestsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentAppConsentRequestsUpdateUserConsentRequestsExecute(r)
}

/*
IdentityGovernanceAppConsentAppConsentRequestsUpdateUserConsentRequests Update the navigation property userConsentRequests in identityGovernance

A list of pending user consent requests.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @param userConsentRequestId key: id of userConsentRequest
 @return ApiIdentityGovernanceAppConsentAppConsentRequestsUpdateUserConsentRequestsRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUpdateUserConsentRequests(ctx _context.Context, appConsentRequestId string, userConsentRequestId string) ApiIdentityGovernanceAppConsentAppConsentRequestsUpdateUserConsentRequestsRequest {
	return ApiIdentityGovernanceAppConsentAppConsentRequestsUpdateUserConsentRequestsRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
		userConsentRequestId: userConsentRequestId,
	}
}

// Execute executes the request
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUpdateUserConsentRequestsExecute(r ApiIdentityGovernanceAppConsentAppConsentRequestsUpdateUserConsentRequestsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentAppConsentRequestsUpdateUserConsentRequests")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}/userConsentRequests/{userConsentRequest-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.userConsentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphUserConsentRequest == nil {
		return nil, reportError("microsoftGraphUserConsentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphUserConsentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalCreateStagesRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	userConsentRequestId string
	microsoftGraphApprovalStage *MicrosoftGraphApprovalStage
}

// New navigation property
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalCreateStagesRequest) MicrosoftGraphApprovalStage(microsoftGraphApprovalStage MicrosoftGraphApprovalStage) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalCreateStagesRequest {
	r.microsoftGraphApprovalStage = &microsoftGraphApprovalStage
	return r
}

func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalCreateStagesRequest) Execute() (MicrosoftGraphApprovalStage, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalCreateStagesExecute(r)
}

/*
IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalCreateStages Create new navigation property to stages for identityGovernance

A collection of stages in the approval decision.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @param userConsentRequestId key: id of userConsentRequest
 @return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalCreateStagesRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalCreateStages(ctx _context.Context, appConsentRequestId string, userConsentRequestId string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalCreateStagesRequest {
	return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalCreateStagesRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
		userConsentRequestId: userConsentRequestId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphApprovalStage
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalCreateStagesExecute(r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalCreateStagesRequest) (MicrosoftGraphApprovalStage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphApprovalStage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalCreateStages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}/userConsentRequests/{userConsentRequest-id}/approval/stages"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.userConsentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphApprovalStage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphApprovalStage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphApprovalStage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalDeleteStagesRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	userConsentRequestId string
	approvalStageId string
	ifMatch *string
}

// ETag
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalDeleteStagesRequest) IfMatch(ifMatch string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalDeleteStagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalDeleteStagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalDeleteStagesExecute(r)
}

/*
IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalDeleteStages Delete navigation property stages for identityGovernance

A collection of stages in the approval decision.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @param userConsentRequestId key: id of userConsentRequest
 @param approvalStageId key: id of approvalStage
 @return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalDeleteStagesRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalDeleteStages(ctx _context.Context, appConsentRequestId string, userConsentRequestId string, approvalStageId string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalDeleteStagesRequest {
	return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalDeleteStagesRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
		userConsentRequestId: userConsentRequestId,
		approvalStageId: approvalStageId,
	}
}

// Execute executes the request
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalDeleteStagesExecute(r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalDeleteStagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalDeleteStages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}/userConsentRequests/{userConsentRequest-id}/approval/stages/{approvalStage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.userConsentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"approvalStage-id"+"}", _neturl.PathEscape(parameterToString(r.approvalStageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalGetStagesRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	userConsentRequestId string
	approvalStageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalGetStagesRequest) Select_(select_ []string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalGetStagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalGetStagesRequest) Expand(expand []string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalGetStagesRequest {
	r.expand = &expand
	return r
}

func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalGetStagesRequest) Execute() (MicrosoftGraphApprovalStage, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalGetStagesExecute(r)
}

/*
IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalGetStages Get stages from identityGovernance

A collection of stages in the approval decision.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @param userConsentRequestId key: id of userConsentRequest
 @param approvalStageId key: id of approvalStage
 @return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalGetStagesRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalGetStages(ctx _context.Context, appConsentRequestId string, userConsentRequestId string, approvalStageId string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalGetStagesRequest {
	return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalGetStagesRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
		userConsentRequestId: userConsentRequestId,
		approvalStageId: approvalStageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphApprovalStage
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalGetStagesExecute(r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalGetStagesRequest) (MicrosoftGraphApprovalStage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphApprovalStage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalGetStages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}/userConsentRequests/{userConsentRequest-id}/approval/stages/{approvalStage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.userConsentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"approvalStage-id"+"}", _neturl.PathEscape(parameterToString(r.approvalStageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	userConsentRequestId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest) Top(top int32) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest) Skip(skip int32) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest) Search(search string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest) Filter(filter string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest) Count(count bool) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest) Orderby(orderby []string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest) Select_(select_ []string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest) Expand(expand []string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest {
	r.expand = &expand
	return r
}

func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest) Execute() (CollectionOfApprovalStage, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesExecute(r)
}

/*
IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStages Get stages from identityGovernance

A collection of stages in the approval decision.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @param userConsentRequestId key: id of userConsentRequest
 @return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStages(ctx _context.Context, appConsentRequestId string, userConsentRequestId string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest {
	return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
		userConsentRequestId: userConsentRequestId,
	}
}

// Execute executes the request
//  @return CollectionOfApprovalStage
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesExecute(r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStagesRequest) (CollectionOfApprovalStage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfApprovalStage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalListStages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}/userConsentRequests/{userConsentRequest-id}/approval/stages"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.userConsentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalUpdateStagesRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	userConsentRequestId string
	approvalStageId string
	microsoftGraphApprovalStage *MicrosoftGraphApprovalStage
}

// New navigation property values
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalUpdateStagesRequest) MicrosoftGraphApprovalStage(microsoftGraphApprovalStage MicrosoftGraphApprovalStage) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalUpdateStagesRequest {
	r.microsoftGraphApprovalStage = &microsoftGraphApprovalStage
	return r
}

func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalUpdateStagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalUpdateStagesExecute(r)
}

/*
IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalUpdateStages Update the navigation property stages in identityGovernance

A collection of stages in the approval decision.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @param userConsentRequestId key: id of userConsentRequest
 @param approvalStageId key: id of approvalStage
 @return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalUpdateStagesRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalUpdateStages(ctx _context.Context, appConsentRequestId string, userConsentRequestId string, approvalStageId string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalUpdateStagesRequest {
	return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalUpdateStagesRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
		userConsentRequestId: userConsentRequestId,
		approvalStageId: approvalStageId,
	}
}

// Execute executes the request
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalUpdateStagesExecute(r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalUpdateStagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsApprovalUpdateStages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}/userConsentRequests/{userConsentRequest-id}/approval/stages/{approvalStage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.userConsentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"approvalStage-id"+"}", _neturl.PathEscape(parameterToString(r.approvalStageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphApprovalStage == nil {
		return nil, reportError("microsoftGraphApprovalStage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphApprovalStage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsDeleteApprovalRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	userConsentRequestId string
	ifMatch *string
}

// ETag
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsDeleteApprovalRequest) IfMatch(ifMatch string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsDeleteApprovalRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsDeleteApprovalRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsDeleteApprovalExecute(r)
}

/*
IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsDeleteApproval Delete navigation property approval for identityGovernance

Approval decisions associated with a request.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @param userConsentRequestId key: id of userConsentRequest
 @return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsDeleteApprovalRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsDeleteApproval(ctx _context.Context, appConsentRequestId string, userConsentRequestId string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsDeleteApprovalRequest {
	return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsDeleteApprovalRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
		userConsentRequestId: userConsentRequestId,
	}
}

// Execute executes the request
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsDeleteApprovalExecute(r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsDeleteApprovalRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsDeleteApproval")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}/userConsentRequests/{userConsentRequest-id}/approval"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.userConsentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsGetApprovalRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	userConsentRequestId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsGetApprovalRequest) Select_(select_ []string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsGetApprovalRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsGetApprovalRequest) Expand(expand []string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsGetApprovalRequest {
	r.expand = &expand
	return r
}

func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsGetApprovalRequest) Execute() (MicrosoftGraphApproval, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsGetApprovalExecute(r)
}

/*
IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsGetApproval Get approval from identityGovernance

Approval decisions associated with a request.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @param userConsentRequestId key: id of userConsentRequest
 @return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsGetApprovalRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsGetApproval(ctx _context.Context, appConsentRequestId string, userConsentRequestId string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsGetApprovalRequest {
	return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsGetApprovalRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
		userConsentRequestId: userConsentRequestId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphApproval
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsGetApprovalExecute(r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsGetApprovalRequest) (MicrosoftGraphApproval, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphApproval
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsGetApproval")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}/userConsentRequests/{userConsentRequest-id}/approval"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.userConsentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsUpdateApprovalRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	userConsentRequestId string
	microsoftGraphApproval *MicrosoftGraphApproval
}

// New navigation property values
func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsUpdateApprovalRequest) MicrosoftGraphApproval(microsoftGraphApproval MicrosoftGraphApproval) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsUpdateApprovalRequest {
	r.microsoftGraphApproval = &microsoftGraphApproval
	return r
}

func (r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsUpdateApprovalRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsUpdateApprovalExecute(r)
}

/*
IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsUpdateApproval Update the navigation property approval in identityGovernance

Approval decisions associated with a request.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @param userConsentRequestId key: id of userConsentRequest
 @return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsUpdateApprovalRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsUpdateApproval(ctx _context.Context, appConsentRequestId string, userConsentRequestId string) ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsUpdateApprovalRequest {
	return ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsUpdateApprovalRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
		userConsentRequestId: userConsentRequestId,
	}
}

// Execute executes the request
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsUpdateApprovalExecute(r ApiIdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsUpdateApprovalRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentAppConsentRequestsUserConsentRequestsUpdateApproval")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}/userConsentRequests/{userConsentRequest-id}/approval"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.userConsentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphApproval == nil {
		return nil, reportError("microsoftGraphApproval is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphApproval
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentCreateAppConsentRequestsRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	microsoftGraphAppConsentRequest *MicrosoftGraphAppConsentRequest
}

// New navigation property
func (r ApiIdentityGovernanceAppConsentCreateAppConsentRequestsRequest) MicrosoftGraphAppConsentRequest(microsoftGraphAppConsentRequest MicrosoftGraphAppConsentRequest) ApiIdentityGovernanceAppConsentCreateAppConsentRequestsRequest {
	r.microsoftGraphAppConsentRequest = &microsoftGraphAppConsentRequest
	return r
}

func (r ApiIdentityGovernanceAppConsentCreateAppConsentRequestsRequest) Execute() (MicrosoftGraphAppConsentRequest, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentCreateAppConsentRequestsExecute(r)
}

/*
IdentityGovernanceAppConsentCreateAppConsentRequests Create new navigation property to appConsentRequests for identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIdentityGovernanceAppConsentCreateAppConsentRequestsRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentCreateAppConsentRequests(ctx _context.Context) ApiIdentityGovernanceAppConsentCreateAppConsentRequestsRequest {
	return ApiIdentityGovernanceAppConsentCreateAppConsentRequestsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAppConsentRequest
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentCreateAppConsentRequestsExecute(r ApiIdentityGovernanceAppConsentCreateAppConsentRequestsRequest) (MicrosoftGraphAppConsentRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAppConsentRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentCreateAppConsentRequests")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAppConsentRequest == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAppConsentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAppConsentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentDeleteAppConsentRequestsRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	ifMatch *string
}

// ETag
func (r ApiIdentityGovernanceAppConsentDeleteAppConsentRequestsRequest) IfMatch(ifMatch string) ApiIdentityGovernanceAppConsentDeleteAppConsentRequestsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiIdentityGovernanceAppConsentDeleteAppConsentRequestsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentDeleteAppConsentRequestsExecute(r)
}

/*
IdentityGovernanceAppConsentDeleteAppConsentRequests Delete navigation property appConsentRequests for identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @return ApiIdentityGovernanceAppConsentDeleteAppConsentRequestsRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentDeleteAppConsentRequests(ctx _context.Context, appConsentRequestId string) ApiIdentityGovernanceAppConsentDeleteAppConsentRequestsRequest {
	return ApiIdentityGovernanceAppConsentDeleteAppConsentRequestsRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
	}
}

// Execute executes the request
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentDeleteAppConsentRequestsExecute(r ApiIdentityGovernanceAppConsentDeleteAppConsentRequestsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentDeleteAppConsentRequests")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentGetAppConsentRequestsRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiIdentityGovernanceAppConsentGetAppConsentRequestsRequest) Select_(select_ []string) ApiIdentityGovernanceAppConsentGetAppConsentRequestsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiIdentityGovernanceAppConsentGetAppConsentRequestsRequest) Expand(expand []string) ApiIdentityGovernanceAppConsentGetAppConsentRequestsRequest {
	r.expand = &expand
	return r
}

func (r ApiIdentityGovernanceAppConsentGetAppConsentRequestsRequest) Execute() (MicrosoftGraphAppConsentRequest, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentGetAppConsentRequestsExecute(r)
}

/*
IdentityGovernanceAppConsentGetAppConsentRequests Get appConsentRequests from identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @return ApiIdentityGovernanceAppConsentGetAppConsentRequestsRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentGetAppConsentRequests(ctx _context.Context, appConsentRequestId string) ApiIdentityGovernanceAppConsentGetAppConsentRequestsRequest {
	return ApiIdentityGovernanceAppConsentGetAppConsentRequestsRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAppConsentRequest
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentGetAppConsentRequestsExecute(r ApiIdentityGovernanceAppConsentGetAppConsentRequestsRequest) (MicrosoftGraphAppConsentRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAppConsentRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentGetAppConsentRequests")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest) Top(top int32) ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest) Skip(skip int32) ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest) Search(search string) ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest) Filter(filter string) ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest) Count(count bool) ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest) Orderby(orderby []string) ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest) Select_(select_ []string) ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest) Expand(expand []string) ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest {
	r.expand = &expand
	return r
}

func (r ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest) Execute() (CollectionOfAppConsentRequest, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentListAppConsentRequestsExecute(r)
}

/*
IdentityGovernanceAppConsentListAppConsentRequests Get appConsentRequests from identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentListAppConsentRequests(ctx _context.Context) ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest {
	return ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfAppConsentRequest
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentListAppConsentRequestsExecute(r ApiIdentityGovernanceAppConsentListAppConsentRequestsRequest) (CollectionOfAppConsentRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAppConsentRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentListAppConsentRequests")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceAppConsentUpdateAppConsentRequestsRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	appConsentRequestId string
	microsoftGraphAppConsentRequest *MicrosoftGraphAppConsentRequest
}

// New navigation property values
func (r ApiIdentityGovernanceAppConsentUpdateAppConsentRequestsRequest) MicrosoftGraphAppConsentRequest(microsoftGraphAppConsentRequest MicrosoftGraphAppConsentRequest) ApiIdentityGovernanceAppConsentUpdateAppConsentRequestsRequest {
	r.microsoftGraphAppConsentRequest = &microsoftGraphAppConsentRequest
	return r
}

func (r ApiIdentityGovernanceAppConsentUpdateAppConsentRequestsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceAppConsentUpdateAppConsentRequestsExecute(r)
}

/*
IdentityGovernanceAppConsentUpdateAppConsentRequests Update the navigation property appConsentRequests in identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appConsentRequestId key: id of appConsentRequest
 @return ApiIdentityGovernanceAppConsentUpdateAppConsentRequestsRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentUpdateAppConsentRequests(ctx _context.Context, appConsentRequestId string) ApiIdentityGovernanceAppConsentUpdateAppConsentRequestsRequest {
	return ApiIdentityGovernanceAppConsentUpdateAppConsentRequestsRequest{
		ApiService: a,
		ctx: ctx,
		appConsentRequestId: appConsentRequestId,
	}
}

// Execute executes the request
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceAppConsentUpdateAppConsentRequestsExecute(r ApiIdentityGovernanceAppConsentUpdateAppConsentRequestsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceAppConsentUpdateAppConsentRequests")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent/appConsentRequests/{appConsentRequest-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"appConsentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.appConsentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAppConsentRequest == nil {
		return nil, reportError("microsoftGraphAppConsentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAppConsentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIdentityGovernanceDeleteAppConsentRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	ifMatch *string
}

// ETag
func (r ApiIdentityGovernanceDeleteAppConsentRequest) IfMatch(ifMatch string) ApiIdentityGovernanceDeleteAppConsentRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiIdentityGovernanceDeleteAppConsentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceDeleteAppConsentExecute(r)
}

/*
IdentityGovernanceDeleteAppConsent Delete navigation property appConsent for identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIdentityGovernanceDeleteAppConsentRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceDeleteAppConsent(ctx _context.Context) ApiIdentityGovernanceDeleteAppConsentRequest {
	return ApiIdentityGovernanceDeleteAppConsentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceDeleteAppConsentExecute(r ApiIdentityGovernanceDeleteAppConsentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceDeleteAppConsent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIdentityGovernanceGetAppConsentRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiIdentityGovernanceGetAppConsentRequest) Select_(select_ []string) ApiIdentityGovernanceGetAppConsentRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiIdentityGovernanceGetAppConsentRequest) Expand(expand []string) ApiIdentityGovernanceGetAppConsentRequest {
	r.expand = &expand
	return r
}

func (r ApiIdentityGovernanceGetAppConsentRequest) Execute() (MicrosoftGraphAppConsentApprovalRoute, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceGetAppConsentExecute(r)
}

/*
IdentityGovernanceGetAppConsent Get appConsent from identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIdentityGovernanceGetAppConsentRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceGetAppConsent(ctx _context.Context) ApiIdentityGovernanceGetAppConsentRequest {
	return ApiIdentityGovernanceGetAppConsentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAppConsentApprovalRoute
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceGetAppConsentExecute(r ApiIdentityGovernanceGetAppConsentRequest) (MicrosoftGraphAppConsentApprovalRoute, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAppConsentApprovalRoute
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceGetAppConsent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceUpdateAppConsentRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceAppConsentApprovalRouteApiService
	microsoftGraphAppConsentApprovalRoute *MicrosoftGraphAppConsentApprovalRoute
}

// New navigation property values
func (r ApiIdentityGovernanceUpdateAppConsentRequest) MicrosoftGraphAppConsentApprovalRoute(microsoftGraphAppConsentApprovalRoute MicrosoftGraphAppConsentApprovalRoute) ApiIdentityGovernanceUpdateAppConsentRequest {
	r.microsoftGraphAppConsentApprovalRoute = &microsoftGraphAppConsentApprovalRoute
	return r
}

func (r ApiIdentityGovernanceUpdateAppConsentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceUpdateAppConsentExecute(r)
}

/*
IdentityGovernanceUpdateAppConsent Update the navigation property appConsent in identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIdentityGovernanceUpdateAppConsentRequest
*/
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceUpdateAppConsent(ctx _context.Context) ApiIdentityGovernanceUpdateAppConsentRequest {
	return ApiIdentityGovernanceUpdateAppConsentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IdentityGovernanceAppConsentApprovalRouteApiService) IdentityGovernanceUpdateAppConsentExecute(r ApiIdentityGovernanceUpdateAppConsentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceAppConsentApprovalRouteApiService.IdentityGovernanceUpdateAppConsent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/appConsent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAppConsentApprovalRoute == nil {
		return nil, reportError("microsoftGraphAppConsentApprovalRoute is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAppConsentApprovalRoute
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
