/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphProvisioningStepType the model 'MicrosoftGraphProvisioningStepType'
type MicrosoftGraphProvisioningStepType string

// List of microsoft.graph.provisioningStepType
const (
	IMPORT MicrosoftGraphProvisioningStepType = "import"
	SCOPING MicrosoftGraphProvisioningStepType = "scoping"
	MATCHING MicrosoftGraphProvisioningStepType = "matching"
	PROCESSING MicrosoftGraphProvisioningStepType = "processing"
	REFERENCE_RESOLUTION MicrosoftGraphProvisioningStepType = "referenceResolution"
	EXPORT MicrosoftGraphProvisioningStepType = "export"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphProvisioningStepType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphProvisioningStepType enum
var AllowedMicrosoftGraphProvisioningStepTypeEnumValues = []MicrosoftGraphProvisioningStepType{
	"import",
	"scoping",
	"matching",
	"processing",
	"referenceResolution",
	"export",
	"unknownFutureValue",
}

func (v *MicrosoftGraphProvisioningStepType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphProvisioningStepType(value)
	for _, existing := range AllowedMicrosoftGraphProvisioningStepTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphProvisioningStepType", value)
}

// NewMicrosoftGraphProvisioningStepTypeFromValue returns a pointer to a valid MicrosoftGraphProvisioningStepType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphProvisioningStepTypeFromValue(v string) (*MicrosoftGraphProvisioningStepType, error) {
	ev := MicrosoftGraphProvisioningStepType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphProvisioningStepType: valid values are %v", v, AllowedMicrosoftGraphProvisioningStepTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphProvisioningStepType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphProvisioningStepTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.provisioningStepType value
func (v MicrosoftGraphProvisioningStepType) Ptr() *MicrosoftGraphProvisioningStepType {
	return &v
}

type NullableMicrosoftGraphProvisioningStepType struct {
	value *MicrosoftGraphProvisioningStepType
	isSet bool
}

func (v NullableMicrosoftGraphProvisioningStepType) Get() *MicrosoftGraphProvisioningStepType {
	return v.value
}

func (v *NullableMicrosoftGraphProvisioningStepType) Set(val *MicrosoftGraphProvisioningStepType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphProvisioningStepType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphProvisioningStepType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphProvisioningStepType(val *MicrosoftGraphProvisioningStepType) *NullableMicrosoftGraphProvisioningStepType {
	return &NullableMicrosoftGraphProvisioningStepType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphProvisioningStepType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphProvisioningStepType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

