/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphExternalConnectorsConnectionState the model 'MicrosoftGraphExternalConnectorsConnectionState'
type MicrosoftGraphExternalConnectorsConnectionState string

// List of microsoft.graph.externalConnectors.connectionState
const (
	DRAFT MicrosoftGraphExternalConnectorsConnectionState = "draft"
	READY MicrosoftGraphExternalConnectorsConnectionState = "ready"
	OBSOLETE MicrosoftGraphExternalConnectorsConnectionState = "obsolete"
	LIMIT_EXCEEDED MicrosoftGraphExternalConnectorsConnectionState = "limitExceeded"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphExternalConnectorsConnectionState = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphExternalConnectorsConnectionState enum
var AllowedMicrosoftGraphExternalConnectorsConnectionStateEnumValues = []MicrosoftGraphExternalConnectorsConnectionState{
	"draft",
	"ready",
	"obsolete",
	"limitExceeded",
	"unknownFutureValue",
}

func (v *MicrosoftGraphExternalConnectorsConnectionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphExternalConnectorsConnectionState(value)
	for _, existing := range AllowedMicrosoftGraphExternalConnectorsConnectionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphExternalConnectorsConnectionState", value)
}

// NewMicrosoftGraphExternalConnectorsConnectionStateFromValue returns a pointer to a valid MicrosoftGraphExternalConnectorsConnectionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphExternalConnectorsConnectionStateFromValue(v string) (*MicrosoftGraphExternalConnectorsConnectionState, error) {
	ev := MicrosoftGraphExternalConnectorsConnectionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphExternalConnectorsConnectionState: valid values are %v", v, AllowedMicrosoftGraphExternalConnectorsConnectionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphExternalConnectorsConnectionState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphExternalConnectorsConnectionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.externalConnectors.connectionState value
func (v MicrosoftGraphExternalConnectorsConnectionState) Ptr() *MicrosoftGraphExternalConnectorsConnectionState {
	return &v
}

type NullableMicrosoftGraphExternalConnectorsConnectionState struct {
	value *MicrosoftGraphExternalConnectorsConnectionState
	isSet bool
}

func (v NullableMicrosoftGraphExternalConnectorsConnectionState) Get() *MicrosoftGraphExternalConnectorsConnectionState {
	return v.value
}

func (v *NullableMicrosoftGraphExternalConnectorsConnectionState) Set(val *MicrosoftGraphExternalConnectorsConnectionState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphExternalConnectorsConnectionState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphExternalConnectorsConnectionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphExternalConnectorsConnectionState(val *MicrosoftGraphExternalConnectorsConnectionState) *NullableMicrosoftGraphExternalConnectorsConnectionState {
	return &NullableMicrosoftGraphExternalConnectorsConnectionState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphExternalConnectorsConnectionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphExternalConnectorsConnectionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

