/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphUserAccountSecurityType the model 'MicrosoftGraphUserAccountSecurityType'
type MicrosoftGraphUserAccountSecurityType string

// List of microsoft.graph.userAccountSecurityType
const (
	UNKNOWN MicrosoftGraphUserAccountSecurityType = "unknown"
	STANDARD MicrosoftGraphUserAccountSecurityType = "standard"
	POWER MicrosoftGraphUserAccountSecurityType = "power"
	ADMINISTRATOR MicrosoftGraphUserAccountSecurityType = "administrator"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphUserAccountSecurityType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphUserAccountSecurityType enum
var AllowedMicrosoftGraphUserAccountSecurityTypeEnumValues = []MicrosoftGraphUserAccountSecurityType{
	"unknown",
	"standard",
	"power",
	"administrator",
	"unknownFutureValue",
}

func (v *MicrosoftGraphUserAccountSecurityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphUserAccountSecurityType(value)
	for _, existing := range AllowedMicrosoftGraphUserAccountSecurityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphUserAccountSecurityType", value)
}

// NewMicrosoftGraphUserAccountSecurityTypeFromValue returns a pointer to a valid MicrosoftGraphUserAccountSecurityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphUserAccountSecurityTypeFromValue(v string) (*MicrosoftGraphUserAccountSecurityType, error) {
	ev := MicrosoftGraphUserAccountSecurityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphUserAccountSecurityType: valid values are %v", v, AllowedMicrosoftGraphUserAccountSecurityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphUserAccountSecurityType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphUserAccountSecurityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.userAccountSecurityType value
func (v MicrosoftGraphUserAccountSecurityType) Ptr() *MicrosoftGraphUserAccountSecurityType {
	return &v
}

type NullableMicrosoftGraphUserAccountSecurityType struct {
	value *MicrosoftGraphUserAccountSecurityType
	isSet bool
}

func (v NullableMicrosoftGraphUserAccountSecurityType) Get() *MicrosoftGraphUserAccountSecurityType {
	return v.value
}

func (v *NullableMicrosoftGraphUserAccountSecurityType) Set(val *MicrosoftGraphUserAccountSecurityType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphUserAccountSecurityType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphUserAccountSecurityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphUserAccountSecurityType(val *MicrosoftGraphUserAccountSecurityType) *NullableMicrosoftGraphUserAccountSecurityType {
	return &NullableMicrosoftGraphUserAccountSecurityType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphUserAccountSecurityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphUserAccountSecurityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

