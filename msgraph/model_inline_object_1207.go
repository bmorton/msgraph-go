/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// InlineObject1207 struct for InlineObject1207
type InlineObject1207 struct {
	Issue AnyOfobject `json:"issue,omitempty"`
	FirstInterest AnyOfobject `json:"firstInterest,omitempty"`
	Settlement AnyOfobject `json:"settlement,omitempty"`
	Rate AnyOfobject `json:"rate,omitempty"`
	Par AnyOfobject `json:"par,omitempty"`
	Frequency AnyOfobject `json:"frequency,omitempty"`
	Basis AnyOfobject `json:"basis,omitempty"`
	CalcMethod AnyOfobject `json:"calcMethod,omitempty"`
}

// NewInlineObject1207 instantiates a new InlineObject1207 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1207() *InlineObject1207 {
	this := InlineObject1207{}
	return &this
}

// NewInlineObject1207WithDefaults instantiates a new InlineObject1207 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1207WithDefaults() *InlineObject1207 {
	this := InlineObject1207{}
	return &this
}

// GetIssue returns the Issue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1207) GetIssue() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Issue
}

// GetIssueOk returns a tuple with the Issue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1207) GetIssueOk() (*AnyOfobject, bool) {
	if o == nil || o.Issue == nil {
		return nil, false
	}
	return &o.Issue, true
}

// HasIssue returns a boolean if a field has been set.
func (o *InlineObject1207) HasIssue() bool {
	if o != nil && o.Issue != nil {
		return true
	}

	return false
}

// SetIssue gets a reference to the given AnyOfobject and assigns it to the Issue field.
func (o *InlineObject1207) SetIssue(v AnyOfobject) {
	o.Issue = v
}

// GetFirstInterest returns the FirstInterest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1207) GetFirstInterest() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.FirstInterest
}

// GetFirstInterestOk returns a tuple with the FirstInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1207) GetFirstInterestOk() (*AnyOfobject, bool) {
	if o == nil || o.FirstInterest == nil {
		return nil, false
	}
	return &o.FirstInterest, true
}

// HasFirstInterest returns a boolean if a field has been set.
func (o *InlineObject1207) HasFirstInterest() bool {
	if o != nil && o.FirstInterest != nil {
		return true
	}

	return false
}

// SetFirstInterest gets a reference to the given AnyOfobject and assigns it to the FirstInterest field.
func (o *InlineObject1207) SetFirstInterest(v AnyOfobject) {
	o.FirstInterest = v
}

// GetSettlement returns the Settlement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1207) GetSettlement() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Settlement
}

// GetSettlementOk returns a tuple with the Settlement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1207) GetSettlementOk() (*AnyOfobject, bool) {
	if o == nil || o.Settlement == nil {
		return nil, false
	}
	return &o.Settlement, true
}

// HasSettlement returns a boolean if a field has been set.
func (o *InlineObject1207) HasSettlement() bool {
	if o != nil && o.Settlement != nil {
		return true
	}

	return false
}

// SetSettlement gets a reference to the given AnyOfobject and assigns it to the Settlement field.
func (o *InlineObject1207) SetSettlement(v AnyOfobject) {
	o.Settlement = v
}

// GetRate returns the Rate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1207) GetRate() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1207) GetRateOk() (*AnyOfobject, bool) {
	if o == nil || o.Rate == nil {
		return nil, false
	}
	return &o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *InlineObject1207) HasRate() bool {
	if o != nil && o.Rate != nil {
		return true
	}

	return false
}

// SetRate gets a reference to the given AnyOfobject and assigns it to the Rate field.
func (o *InlineObject1207) SetRate(v AnyOfobject) {
	o.Rate = v
}

// GetPar returns the Par field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1207) GetPar() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Par
}

// GetParOk returns a tuple with the Par field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1207) GetParOk() (*AnyOfobject, bool) {
	if o == nil || o.Par == nil {
		return nil, false
	}
	return &o.Par, true
}

// HasPar returns a boolean if a field has been set.
func (o *InlineObject1207) HasPar() bool {
	if o != nil && o.Par != nil {
		return true
	}

	return false
}

// SetPar gets a reference to the given AnyOfobject and assigns it to the Par field.
func (o *InlineObject1207) SetPar(v AnyOfobject) {
	o.Par = v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1207) GetFrequency() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1207) GetFrequencyOk() (*AnyOfobject, bool) {
	if o == nil || o.Frequency == nil {
		return nil, false
	}
	return &o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *InlineObject1207) HasFrequency() bool {
	if o != nil && o.Frequency != nil {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given AnyOfobject and assigns it to the Frequency field.
func (o *InlineObject1207) SetFrequency(v AnyOfobject) {
	o.Frequency = v
}

// GetBasis returns the Basis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1207) GetBasis() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Basis
}

// GetBasisOk returns a tuple with the Basis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1207) GetBasisOk() (*AnyOfobject, bool) {
	if o == nil || o.Basis == nil {
		return nil, false
	}
	return &o.Basis, true
}

// HasBasis returns a boolean if a field has been set.
func (o *InlineObject1207) HasBasis() bool {
	if o != nil && o.Basis != nil {
		return true
	}

	return false
}

// SetBasis gets a reference to the given AnyOfobject and assigns it to the Basis field.
func (o *InlineObject1207) SetBasis(v AnyOfobject) {
	o.Basis = v
}

// GetCalcMethod returns the CalcMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1207) GetCalcMethod() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.CalcMethod
}

// GetCalcMethodOk returns a tuple with the CalcMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1207) GetCalcMethodOk() (*AnyOfobject, bool) {
	if o == nil || o.CalcMethod == nil {
		return nil, false
	}
	return &o.CalcMethod, true
}

// HasCalcMethod returns a boolean if a field has been set.
func (o *InlineObject1207) HasCalcMethod() bool {
	if o != nil && o.CalcMethod != nil {
		return true
	}

	return false
}

// SetCalcMethod gets a reference to the given AnyOfobject and assigns it to the CalcMethod field.
func (o *InlineObject1207) SetCalcMethod(v AnyOfobject) {
	o.CalcMethod = v
}

func (o InlineObject1207) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Issue != nil {
		toSerialize["issue"] = o.Issue
	}
	if o.FirstInterest != nil {
		toSerialize["firstInterest"] = o.FirstInterest
	}
	if o.Settlement != nil {
		toSerialize["settlement"] = o.Settlement
	}
	if o.Rate != nil {
		toSerialize["rate"] = o.Rate
	}
	if o.Par != nil {
		toSerialize["par"] = o.Par
	}
	if o.Frequency != nil {
		toSerialize["frequency"] = o.Frequency
	}
	if o.Basis != nil {
		toSerialize["basis"] = o.Basis
	}
	if o.CalcMethod != nil {
		toSerialize["calcMethod"] = o.CalcMethod
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1207 struct {
	value *InlineObject1207
	isSet bool
}

func (v NullableInlineObject1207) Get() *InlineObject1207 {
	return v.value
}

func (v *NullableInlineObject1207) Set(val *InlineObject1207) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1207) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1207) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1207(val *InlineObject1207) *NullableInlineObject1207 {
	return &NullableInlineObject1207{value: val, isSet: true}
}

func (v NullableInlineObject1207) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1207) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


