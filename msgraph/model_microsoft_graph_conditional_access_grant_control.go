/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphConditionalAccessGrantControl the model 'MicrosoftGraphConditionalAccessGrantControl'
type MicrosoftGraphConditionalAccessGrantControl string

// List of microsoft.graph.conditionalAccessGrantControl
const (
	BLOCK MicrosoftGraphConditionalAccessGrantControl = "block"
	MFA MicrosoftGraphConditionalAccessGrantControl = "mfa"
	COMPLIANT_DEVICE MicrosoftGraphConditionalAccessGrantControl = "compliantDevice"
	DOMAIN_JOINED_DEVICE MicrosoftGraphConditionalAccessGrantControl = "domainJoinedDevice"
	APPROVED_APPLICATION MicrosoftGraphConditionalAccessGrantControl = "approvedApplication"
	COMPLIANT_APPLICATION MicrosoftGraphConditionalAccessGrantControl = "compliantApplication"
	PASSWORD_CHANGE MicrosoftGraphConditionalAccessGrantControl = "passwordChange"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphConditionalAccessGrantControl = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphConditionalAccessGrantControl enum
var AllowedMicrosoftGraphConditionalAccessGrantControlEnumValues = []MicrosoftGraphConditionalAccessGrantControl{
	"block",
	"mfa",
	"compliantDevice",
	"domainJoinedDevice",
	"approvedApplication",
	"compliantApplication",
	"passwordChange",
	"unknownFutureValue",
}

func (v *MicrosoftGraphConditionalAccessGrantControl) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphConditionalAccessGrantControl(value)
	for _, existing := range AllowedMicrosoftGraphConditionalAccessGrantControlEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphConditionalAccessGrantControl", value)
}

// NewMicrosoftGraphConditionalAccessGrantControlFromValue returns a pointer to a valid MicrosoftGraphConditionalAccessGrantControl
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphConditionalAccessGrantControlFromValue(v string) (*MicrosoftGraphConditionalAccessGrantControl, error) {
	ev := MicrosoftGraphConditionalAccessGrantControl(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphConditionalAccessGrantControl: valid values are %v", v, AllowedMicrosoftGraphConditionalAccessGrantControlEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphConditionalAccessGrantControl) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphConditionalAccessGrantControlEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.conditionalAccessGrantControl value
func (v MicrosoftGraphConditionalAccessGrantControl) Ptr() *MicrosoftGraphConditionalAccessGrantControl {
	return &v
}

type NullableMicrosoftGraphConditionalAccessGrantControl struct {
	value *MicrosoftGraphConditionalAccessGrantControl
	isSet bool
}

func (v NullableMicrosoftGraphConditionalAccessGrantControl) Get() *MicrosoftGraphConditionalAccessGrantControl {
	return v.value
}

func (v *NullableMicrosoftGraphConditionalAccessGrantControl) Set(val *MicrosoftGraphConditionalAccessGrantControl) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphConditionalAccessGrantControl) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphConditionalAccessGrantControl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphConditionalAccessGrantControl(val *MicrosoftGraphConditionalAccessGrantControl) *NullableMicrosoftGraphConditionalAccessGrantControl {
	return &NullableMicrosoftGraphConditionalAccessGrantControl{value: val, isSet: true}
}

func (v NullableMicrosoftGraphConditionalAccessGrantControl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphConditionalAccessGrantControl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

