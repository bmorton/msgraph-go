/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphAccessPackageCatalogType the model 'MicrosoftGraphAccessPackageCatalogType'
type MicrosoftGraphAccessPackageCatalogType string

// List of microsoft.graph.accessPackageCatalogType
const (
	USER_MANAGED MicrosoftGraphAccessPackageCatalogType = "userManaged"
	SERVICE_DEFAULT MicrosoftGraphAccessPackageCatalogType = "serviceDefault"
	SERVICE_MANAGED MicrosoftGraphAccessPackageCatalogType = "serviceManaged"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphAccessPackageCatalogType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphAccessPackageCatalogType enum
var AllowedMicrosoftGraphAccessPackageCatalogTypeEnumValues = []MicrosoftGraphAccessPackageCatalogType{
	"userManaged",
	"serviceDefault",
	"serviceManaged",
	"unknownFutureValue",
}

func (v *MicrosoftGraphAccessPackageCatalogType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphAccessPackageCatalogType(value)
	for _, existing := range AllowedMicrosoftGraphAccessPackageCatalogTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphAccessPackageCatalogType", value)
}

// NewMicrosoftGraphAccessPackageCatalogTypeFromValue returns a pointer to a valid MicrosoftGraphAccessPackageCatalogType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphAccessPackageCatalogTypeFromValue(v string) (*MicrosoftGraphAccessPackageCatalogType, error) {
	ev := MicrosoftGraphAccessPackageCatalogType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphAccessPackageCatalogType: valid values are %v", v, AllowedMicrosoftGraphAccessPackageCatalogTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphAccessPackageCatalogType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphAccessPackageCatalogTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.accessPackageCatalogType value
func (v MicrosoftGraphAccessPackageCatalogType) Ptr() *MicrosoftGraphAccessPackageCatalogType {
	return &v
}

type NullableMicrosoftGraphAccessPackageCatalogType struct {
	value *MicrosoftGraphAccessPackageCatalogType
	isSet bool
}

func (v NullableMicrosoftGraphAccessPackageCatalogType) Get() *MicrosoftGraphAccessPackageCatalogType {
	return v.value
}

func (v *NullableMicrosoftGraphAccessPackageCatalogType) Set(val *MicrosoftGraphAccessPackageCatalogType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphAccessPackageCatalogType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphAccessPackageCatalogType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphAccessPackageCatalogType(val *MicrosoftGraphAccessPackageCatalogType) *NullableMicrosoftGraphAccessPackageCatalogType {
	return &NullableMicrosoftGraphAccessPackageCatalogType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphAccessPackageCatalogType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphAccessPackageCatalogType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

