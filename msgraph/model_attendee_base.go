/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AttendeeBase struct for AttendeeBase
type AttendeeBase struct {
	// The type of attendee. The possible values are: required, optional, resource. Currently if the attendee is a person, findMeetingTimes always considers the person is of the Required type.
	Type AnyOfmicrosoftGraphAttendeeType `json:"type,omitempty"`
}

// NewAttendeeBase instantiates a new AttendeeBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttendeeBase() *AttendeeBase {
	this := AttendeeBase{}
	return &this
}

// NewAttendeeBaseWithDefaults instantiates a new AttendeeBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttendeeBaseWithDefaults() *AttendeeBase {
	this := AttendeeBase{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttendeeBase) GetType() AnyOfmicrosoftGraphAttendeeType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphAttendeeType
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttendeeBase) GetTypeOk() (*AnyOfmicrosoftGraphAttendeeType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return &o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AttendeeBase) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given AnyOfmicrosoftGraphAttendeeType and assigns it to the Type field.
func (o *AttendeeBase) SetType(v AnyOfmicrosoftGraphAttendeeType) {
	o.Type = v
}

func (o AttendeeBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableAttendeeBase struct {
	value *AttendeeBase
	isSet bool
}

func (v NullableAttendeeBase) Get() *AttendeeBase {
	return v.value
}

func (v *NullableAttendeeBase) Set(val *AttendeeBase) {
	v.value = val
	v.isSet = true
}

func (v NullableAttendeeBase) IsSet() bool {
	return v.isSet
}

func (v *NullableAttendeeBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttendeeBase(val *AttendeeBase) *NullableAttendeeBase {
	return &NullableAttendeeBase{value: val, isSet: true}
}

func (v NullableAttendeeBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttendeeBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


