/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphManagedAppClipboardSharingLevel Represents the level to which the device's clipboard may be shared between apps
type MicrosoftGraphManagedAppClipboardSharingLevel string

// List of microsoft.graph.managedAppClipboardSharingLevel
const (
	ALL_APPS MicrosoftGraphManagedAppClipboardSharingLevel = "allApps"
	MANAGED_APPS_WITH_PASTE_IN MicrosoftGraphManagedAppClipboardSharingLevel = "managedAppsWithPasteIn"
	MANAGED_APPS MicrosoftGraphManagedAppClipboardSharingLevel = "managedApps"
	BLOCKED MicrosoftGraphManagedAppClipboardSharingLevel = "blocked"
)

// All allowed values of MicrosoftGraphManagedAppClipboardSharingLevel enum
var AllowedMicrosoftGraphManagedAppClipboardSharingLevelEnumValues = []MicrosoftGraphManagedAppClipboardSharingLevel{
	"allApps",
	"managedAppsWithPasteIn",
	"managedApps",
	"blocked",
}

func (v *MicrosoftGraphManagedAppClipboardSharingLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphManagedAppClipboardSharingLevel(value)
	for _, existing := range AllowedMicrosoftGraphManagedAppClipboardSharingLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphManagedAppClipboardSharingLevel", value)
}

// NewMicrosoftGraphManagedAppClipboardSharingLevelFromValue returns a pointer to a valid MicrosoftGraphManagedAppClipboardSharingLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphManagedAppClipboardSharingLevelFromValue(v string) (*MicrosoftGraphManagedAppClipboardSharingLevel, error) {
	ev := MicrosoftGraphManagedAppClipboardSharingLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphManagedAppClipboardSharingLevel: valid values are %v", v, AllowedMicrosoftGraphManagedAppClipboardSharingLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphManagedAppClipboardSharingLevel) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphManagedAppClipboardSharingLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.managedAppClipboardSharingLevel value
func (v MicrosoftGraphManagedAppClipboardSharingLevel) Ptr() *MicrosoftGraphManagedAppClipboardSharingLevel {
	return &v
}

type NullableMicrosoftGraphManagedAppClipboardSharingLevel struct {
	value *MicrosoftGraphManagedAppClipboardSharingLevel
	isSet bool
}

func (v NullableMicrosoftGraphManagedAppClipboardSharingLevel) Get() *MicrosoftGraphManagedAppClipboardSharingLevel {
	return v.value
}

func (v *NullableMicrosoftGraphManagedAppClipboardSharingLevel) Set(val *MicrosoftGraphManagedAppClipboardSharingLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphManagedAppClipboardSharingLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphManagedAppClipboardSharingLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphManagedAppClipboardSharingLevel(val *MicrosoftGraphManagedAppClipboardSharingLevel) *NullableMicrosoftGraphManagedAppClipboardSharingLevel {
	return &NullableMicrosoftGraphManagedAppClipboardSharingLevel{value: val, isSet: true}
}

func (v NullableMicrosoftGraphManagedAppClipboardSharingLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphManagedAppClipboardSharingLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

