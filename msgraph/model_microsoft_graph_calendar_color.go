/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphCalendarColor the model 'MicrosoftGraphCalendarColor'
type MicrosoftGraphCalendarColor string

// List of microsoft.graph.calendarColor
const (
	AUTO MicrosoftGraphCalendarColor = "auto"
	LIGHT_BLUE MicrosoftGraphCalendarColor = "lightBlue"
	LIGHT_GREEN MicrosoftGraphCalendarColor = "lightGreen"
	LIGHT_ORANGE MicrosoftGraphCalendarColor = "lightOrange"
	LIGHT_GRAY MicrosoftGraphCalendarColor = "lightGray"
	LIGHT_YELLOW MicrosoftGraphCalendarColor = "lightYellow"
	LIGHT_TEAL MicrosoftGraphCalendarColor = "lightTeal"
	LIGHT_PINK MicrosoftGraphCalendarColor = "lightPink"
	LIGHT_BROWN MicrosoftGraphCalendarColor = "lightBrown"
	LIGHT_RED MicrosoftGraphCalendarColor = "lightRed"
	MAX_COLOR MicrosoftGraphCalendarColor = "maxColor"
)

// All allowed values of MicrosoftGraphCalendarColor enum
var AllowedMicrosoftGraphCalendarColorEnumValues = []MicrosoftGraphCalendarColor{
	"auto",
	"lightBlue",
	"lightGreen",
	"lightOrange",
	"lightGray",
	"lightYellow",
	"lightTeal",
	"lightPink",
	"lightBrown",
	"lightRed",
	"maxColor",
}

func (v *MicrosoftGraphCalendarColor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphCalendarColor(value)
	for _, existing := range AllowedMicrosoftGraphCalendarColorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphCalendarColor", value)
}

// NewMicrosoftGraphCalendarColorFromValue returns a pointer to a valid MicrosoftGraphCalendarColor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphCalendarColorFromValue(v string) (*MicrosoftGraphCalendarColor, error) {
	ev := MicrosoftGraphCalendarColor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphCalendarColor: valid values are %v", v, AllowedMicrosoftGraphCalendarColorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphCalendarColor) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphCalendarColorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.calendarColor value
func (v MicrosoftGraphCalendarColor) Ptr() *MicrosoftGraphCalendarColor {
	return &v
}

type NullableMicrosoftGraphCalendarColor struct {
	value *MicrosoftGraphCalendarColor
	isSet bool
}

func (v NullableMicrosoftGraphCalendarColor) Get() *MicrosoftGraphCalendarColor {
	return v.value
}

func (v *NullableMicrosoftGraphCalendarColor) Set(val *MicrosoftGraphCalendarColor) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphCalendarColor) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphCalendarColor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphCalendarColor(val *MicrosoftGraphCalendarColor) *NullableMicrosoftGraphCalendarColor {
	return &NullableMicrosoftGraphCalendarColor{value: val, isSet: true}
}

func (v NullableMicrosoftGraphCalendarColor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphCalendarColor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

