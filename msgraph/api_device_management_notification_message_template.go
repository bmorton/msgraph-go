/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceManagementNotificationMessageTemplateApiService DeviceManagementNotificationMessageTemplateApi service
type DeviceManagementNotificationMessageTemplateApiService service

type ApiDeviceManagementCreateNotificationMessageTemplatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementNotificationMessageTemplateApiService
	microsoftGraphNotificationMessageTemplate *MicrosoftGraphNotificationMessageTemplate
}

// New navigation property
func (r ApiDeviceManagementCreateNotificationMessageTemplatesRequest) MicrosoftGraphNotificationMessageTemplate(microsoftGraphNotificationMessageTemplate MicrosoftGraphNotificationMessageTemplate) ApiDeviceManagementCreateNotificationMessageTemplatesRequest {
	r.microsoftGraphNotificationMessageTemplate = &microsoftGraphNotificationMessageTemplate
	return r
}

func (r ApiDeviceManagementCreateNotificationMessageTemplatesRequest) Execute() (MicrosoftGraphNotificationMessageTemplate, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementCreateNotificationMessageTemplatesExecute(r)
}

/*
DeviceManagementCreateNotificationMessageTemplates Create new navigation property to notificationMessageTemplates for deviceManagement

The Notification Message Templates.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementCreateNotificationMessageTemplatesRequest
*/
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementCreateNotificationMessageTemplates(ctx _context.Context) ApiDeviceManagementCreateNotificationMessageTemplatesRequest {
	return ApiDeviceManagementCreateNotificationMessageTemplatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotificationMessageTemplate
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementCreateNotificationMessageTemplatesExecute(r ApiDeviceManagementCreateNotificationMessageTemplatesRequest) (MicrosoftGraphNotificationMessageTemplate, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotificationMessageTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementNotificationMessageTemplateApiService.DeviceManagementCreateNotificationMessageTemplates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/notificationMessageTemplates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotificationMessageTemplate == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphNotificationMessageTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotificationMessageTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeleteNotificationMessageTemplatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementNotificationMessageTemplateApiService
	notificationMessageTemplateId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeleteNotificationMessageTemplatesRequest) IfMatch(ifMatch string) ApiDeviceManagementDeleteNotificationMessageTemplatesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeleteNotificationMessageTemplatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeleteNotificationMessageTemplatesExecute(r)
}

/*
DeviceManagementDeleteNotificationMessageTemplates Delete navigation property notificationMessageTemplates for deviceManagement

The Notification Message Templates.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notificationMessageTemplateId key: id of notificationMessageTemplate
 @return ApiDeviceManagementDeleteNotificationMessageTemplatesRequest
*/
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementDeleteNotificationMessageTemplates(ctx _context.Context, notificationMessageTemplateId string) ApiDeviceManagementDeleteNotificationMessageTemplatesRequest {
	return ApiDeviceManagementDeleteNotificationMessageTemplatesRequest{
		ApiService: a,
		ctx: ctx,
		notificationMessageTemplateId: notificationMessageTemplateId,
	}
}

// Execute executes the request
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementDeleteNotificationMessageTemplatesExecute(r ApiDeviceManagementDeleteNotificationMessageTemplatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementNotificationMessageTemplateApiService.DeviceManagementDeleteNotificationMessageTemplates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/notificationMessageTemplates/{notificationMessageTemplate-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notificationMessageTemplate-id"+"}", _neturl.PathEscape(parameterToString(r.notificationMessageTemplateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementGetNotificationMessageTemplatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementNotificationMessageTemplateApiService
	notificationMessageTemplateId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementGetNotificationMessageTemplatesRequest) Select_(select_ []string) ApiDeviceManagementGetNotificationMessageTemplatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementGetNotificationMessageTemplatesRequest) Expand(expand []string) ApiDeviceManagementGetNotificationMessageTemplatesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementGetNotificationMessageTemplatesRequest) Execute() (MicrosoftGraphNotificationMessageTemplate, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementGetNotificationMessageTemplatesExecute(r)
}

/*
DeviceManagementGetNotificationMessageTemplates Get notificationMessageTemplates from deviceManagement

The Notification Message Templates.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notificationMessageTemplateId key: id of notificationMessageTemplate
 @return ApiDeviceManagementGetNotificationMessageTemplatesRequest
*/
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementGetNotificationMessageTemplates(ctx _context.Context, notificationMessageTemplateId string) ApiDeviceManagementGetNotificationMessageTemplatesRequest {
	return ApiDeviceManagementGetNotificationMessageTemplatesRequest{
		ApiService: a,
		ctx: ctx,
		notificationMessageTemplateId: notificationMessageTemplateId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotificationMessageTemplate
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementGetNotificationMessageTemplatesExecute(r ApiDeviceManagementGetNotificationMessageTemplatesRequest) (MicrosoftGraphNotificationMessageTemplate, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotificationMessageTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementNotificationMessageTemplateApiService.DeviceManagementGetNotificationMessageTemplates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/notificationMessageTemplates/{notificationMessageTemplate-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notificationMessageTemplate-id"+"}", _neturl.PathEscape(parameterToString(r.notificationMessageTemplateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementListNotificationMessageTemplatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementNotificationMessageTemplateApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementListNotificationMessageTemplatesRequest) Top(top int32) ApiDeviceManagementListNotificationMessageTemplatesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementListNotificationMessageTemplatesRequest) Skip(skip int32) ApiDeviceManagementListNotificationMessageTemplatesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementListNotificationMessageTemplatesRequest) Search(search string) ApiDeviceManagementListNotificationMessageTemplatesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementListNotificationMessageTemplatesRequest) Filter(filter string) ApiDeviceManagementListNotificationMessageTemplatesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementListNotificationMessageTemplatesRequest) Count(count bool) ApiDeviceManagementListNotificationMessageTemplatesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementListNotificationMessageTemplatesRequest) Orderby(orderby []string) ApiDeviceManagementListNotificationMessageTemplatesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementListNotificationMessageTemplatesRequest) Select_(select_ []string) ApiDeviceManagementListNotificationMessageTemplatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementListNotificationMessageTemplatesRequest) Expand(expand []string) ApiDeviceManagementListNotificationMessageTemplatesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementListNotificationMessageTemplatesRequest) Execute() (CollectionOfNotificationMessageTemplate, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementListNotificationMessageTemplatesExecute(r)
}

/*
DeviceManagementListNotificationMessageTemplates Get notificationMessageTemplates from deviceManagement

The Notification Message Templates.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementListNotificationMessageTemplatesRequest
*/
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementListNotificationMessageTemplates(ctx _context.Context) ApiDeviceManagementListNotificationMessageTemplatesRequest {
	return ApiDeviceManagementListNotificationMessageTemplatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfNotificationMessageTemplate
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementListNotificationMessageTemplatesExecute(r ApiDeviceManagementListNotificationMessageTemplatesRequest) (CollectionOfNotificationMessageTemplate, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfNotificationMessageTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementNotificationMessageTemplateApiService.DeviceManagementListNotificationMessageTemplates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/notificationMessageTemplates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementNotificationMessageTemplatesCreateLocalizedNotificationMessagesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementNotificationMessageTemplateApiService
	notificationMessageTemplateId string
	microsoftGraphLocalizedNotificationMessage *MicrosoftGraphLocalizedNotificationMessage
}

// New navigation property
func (r ApiDeviceManagementNotificationMessageTemplatesCreateLocalizedNotificationMessagesRequest) MicrosoftGraphLocalizedNotificationMessage(microsoftGraphLocalizedNotificationMessage MicrosoftGraphLocalizedNotificationMessage) ApiDeviceManagementNotificationMessageTemplatesCreateLocalizedNotificationMessagesRequest {
	r.microsoftGraphLocalizedNotificationMessage = &microsoftGraphLocalizedNotificationMessage
	return r
}

func (r ApiDeviceManagementNotificationMessageTemplatesCreateLocalizedNotificationMessagesRequest) Execute() (MicrosoftGraphLocalizedNotificationMessage, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementNotificationMessageTemplatesCreateLocalizedNotificationMessagesExecute(r)
}

/*
DeviceManagementNotificationMessageTemplatesCreateLocalizedNotificationMessages Create new navigation property to localizedNotificationMessages for deviceManagement

The list of localized messages for this Notification Message Template.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notificationMessageTemplateId key: id of notificationMessageTemplate
 @return ApiDeviceManagementNotificationMessageTemplatesCreateLocalizedNotificationMessagesRequest
*/
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementNotificationMessageTemplatesCreateLocalizedNotificationMessages(ctx _context.Context, notificationMessageTemplateId string) ApiDeviceManagementNotificationMessageTemplatesCreateLocalizedNotificationMessagesRequest {
	return ApiDeviceManagementNotificationMessageTemplatesCreateLocalizedNotificationMessagesRequest{
		ApiService: a,
		ctx: ctx,
		notificationMessageTemplateId: notificationMessageTemplateId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphLocalizedNotificationMessage
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementNotificationMessageTemplatesCreateLocalizedNotificationMessagesExecute(r ApiDeviceManagementNotificationMessageTemplatesCreateLocalizedNotificationMessagesRequest) (MicrosoftGraphLocalizedNotificationMessage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphLocalizedNotificationMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementNotificationMessageTemplateApiService.DeviceManagementNotificationMessageTemplatesCreateLocalizedNotificationMessages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/notificationMessageTemplates/{notificationMessageTemplate-id}/localizedNotificationMessages"
	localVarPath = strings.Replace(localVarPath, "{"+"notificationMessageTemplate-id"+"}", _neturl.PathEscape(parameterToString(r.notificationMessageTemplateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphLocalizedNotificationMessage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphLocalizedNotificationMessage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphLocalizedNotificationMessage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementNotificationMessageTemplatesDeleteLocalizedNotificationMessagesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementNotificationMessageTemplateApiService
	notificationMessageTemplateId string
	localizedNotificationMessageId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementNotificationMessageTemplatesDeleteLocalizedNotificationMessagesRequest) IfMatch(ifMatch string) ApiDeviceManagementNotificationMessageTemplatesDeleteLocalizedNotificationMessagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementNotificationMessageTemplatesDeleteLocalizedNotificationMessagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementNotificationMessageTemplatesDeleteLocalizedNotificationMessagesExecute(r)
}

/*
DeviceManagementNotificationMessageTemplatesDeleteLocalizedNotificationMessages Delete navigation property localizedNotificationMessages for deviceManagement

The list of localized messages for this Notification Message Template.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notificationMessageTemplateId key: id of notificationMessageTemplate
 @param localizedNotificationMessageId key: id of localizedNotificationMessage
 @return ApiDeviceManagementNotificationMessageTemplatesDeleteLocalizedNotificationMessagesRequest
*/
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementNotificationMessageTemplatesDeleteLocalizedNotificationMessages(ctx _context.Context, notificationMessageTemplateId string, localizedNotificationMessageId string) ApiDeviceManagementNotificationMessageTemplatesDeleteLocalizedNotificationMessagesRequest {
	return ApiDeviceManagementNotificationMessageTemplatesDeleteLocalizedNotificationMessagesRequest{
		ApiService: a,
		ctx: ctx,
		notificationMessageTemplateId: notificationMessageTemplateId,
		localizedNotificationMessageId: localizedNotificationMessageId,
	}
}

// Execute executes the request
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementNotificationMessageTemplatesDeleteLocalizedNotificationMessagesExecute(r ApiDeviceManagementNotificationMessageTemplatesDeleteLocalizedNotificationMessagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementNotificationMessageTemplateApiService.DeviceManagementNotificationMessageTemplatesDeleteLocalizedNotificationMessages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/notificationMessageTemplates/{notificationMessageTemplate-id}/localizedNotificationMessages/{localizedNotificationMessage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notificationMessageTemplate-id"+"}", _neturl.PathEscape(parameterToString(r.notificationMessageTemplateId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"localizedNotificationMessage-id"+"}", _neturl.PathEscape(parameterToString(r.localizedNotificationMessageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementNotificationMessageTemplatesGetLocalizedNotificationMessagesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementNotificationMessageTemplateApiService
	notificationMessageTemplateId string
	localizedNotificationMessageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementNotificationMessageTemplatesGetLocalizedNotificationMessagesRequest) Select_(select_ []string) ApiDeviceManagementNotificationMessageTemplatesGetLocalizedNotificationMessagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementNotificationMessageTemplatesGetLocalizedNotificationMessagesRequest) Expand(expand []string) ApiDeviceManagementNotificationMessageTemplatesGetLocalizedNotificationMessagesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementNotificationMessageTemplatesGetLocalizedNotificationMessagesRequest) Execute() (MicrosoftGraphLocalizedNotificationMessage, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementNotificationMessageTemplatesGetLocalizedNotificationMessagesExecute(r)
}

/*
DeviceManagementNotificationMessageTemplatesGetLocalizedNotificationMessages Get localizedNotificationMessages from deviceManagement

The list of localized messages for this Notification Message Template.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notificationMessageTemplateId key: id of notificationMessageTemplate
 @param localizedNotificationMessageId key: id of localizedNotificationMessage
 @return ApiDeviceManagementNotificationMessageTemplatesGetLocalizedNotificationMessagesRequest
*/
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementNotificationMessageTemplatesGetLocalizedNotificationMessages(ctx _context.Context, notificationMessageTemplateId string, localizedNotificationMessageId string) ApiDeviceManagementNotificationMessageTemplatesGetLocalizedNotificationMessagesRequest {
	return ApiDeviceManagementNotificationMessageTemplatesGetLocalizedNotificationMessagesRequest{
		ApiService: a,
		ctx: ctx,
		notificationMessageTemplateId: notificationMessageTemplateId,
		localizedNotificationMessageId: localizedNotificationMessageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphLocalizedNotificationMessage
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementNotificationMessageTemplatesGetLocalizedNotificationMessagesExecute(r ApiDeviceManagementNotificationMessageTemplatesGetLocalizedNotificationMessagesRequest) (MicrosoftGraphLocalizedNotificationMessage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphLocalizedNotificationMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementNotificationMessageTemplateApiService.DeviceManagementNotificationMessageTemplatesGetLocalizedNotificationMessages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/notificationMessageTemplates/{notificationMessageTemplate-id}/localizedNotificationMessages/{localizedNotificationMessage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notificationMessageTemplate-id"+"}", _neturl.PathEscape(parameterToString(r.notificationMessageTemplateId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"localizedNotificationMessage-id"+"}", _neturl.PathEscape(parameterToString(r.localizedNotificationMessageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementNotificationMessageTemplateApiService
	notificationMessageTemplateId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest) Top(top int32) ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest) Skip(skip int32) ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest) Search(search string) ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest) Filter(filter string) ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest) Count(count bool) ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest) Orderby(orderby []string) ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest) Select_(select_ []string) ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest) Expand(expand []string) ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest) Execute() (CollectionOfLocalizedNotificationMessage, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesExecute(r)
}

/*
DeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessages Get localizedNotificationMessages from deviceManagement

The list of localized messages for this Notification Message Template.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notificationMessageTemplateId key: id of notificationMessageTemplate
 @return ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest
*/
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessages(ctx _context.Context, notificationMessageTemplateId string) ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest {
	return ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest{
		ApiService: a,
		ctx: ctx,
		notificationMessageTemplateId: notificationMessageTemplateId,
	}
}

// Execute executes the request
//  @return CollectionOfLocalizedNotificationMessage
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesExecute(r ApiDeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessagesRequest) (CollectionOfLocalizedNotificationMessage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfLocalizedNotificationMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementNotificationMessageTemplateApiService.DeviceManagementNotificationMessageTemplatesListLocalizedNotificationMessages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/notificationMessageTemplates/{notificationMessageTemplate-id}/localizedNotificationMessages"
	localVarPath = strings.Replace(localVarPath, "{"+"notificationMessageTemplate-id"+"}", _neturl.PathEscape(parameterToString(r.notificationMessageTemplateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementNotificationMessageTemplatesUpdateLocalizedNotificationMessagesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementNotificationMessageTemplateApiService
	notificationMessageTemplateId string
	localizedNotificationMessageId string
	microsoftGraphLocalizedNotificationMessage *MicrosoftGraphLocalizedNotificationMessage
}

// New navigation property values
func (r ApiDeviceManagementNotificationMessageTemplatesUpdateLocalizedNotificationMessagesRequest) MicrosoftGraphLocalizedNotificationMessage(microsoftGraphLocalizedNotificationMessage MicrosoftGraphLocalizedNotificationMessage) ApiDeviceManagementNotificationMessageTemplatesUpdateLocalizedNotificationMessagesRequest {
	r.microsoftGraphLocalizedNotificationMessage = &microsoftGraphLocalizedNotificationMessage
	return r
}

func (r ApiDeviceManagementNotificationMessageTemplatesUpdateLocalizedNotificationMessagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementNotificationMessageTemplatesUpdateLocalizedNotificationMessagesExecute(r)
}

/*
DeviceManagementNotificationMessageTemplatesUpdateLocalizedNotificationMessages Update the navigation property localizedNotificationMessages in deviceManagement

The list of localized messages for this Notification Message Template.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notificationMessageTemplateId key: id of notificationMessageTemplate
 @param localizedNotificationMessageId key: id of localizedNotificationMessage
 @return ApiDeviceManagementNotificationMessageTemplatesUpdateLocalizedNotificationMessagesRequest
*/
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementNotificationMessageTemplatesUpdateLocalizedNotificationMessages(ctx _context.Context, notificationMessageTemplateId string, localizedNotificationMessageId string) ApiDeviceManagementNotificationMessageTemplatesUpdateLocalizedNotificationMessagesRequest {
	return ApiDeviceManagementNotificationMessageTemplatesUpdateLocalizedNotificationMessagesRequest{
		ApiService: a,
		ctx: ctx,
		notificationMessageTemplateId: notificationMessageTemplateId,
		localizedNotificationMessageId: localizedNotificationMessageId,
	}
}

// Execute executes the request
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementNotificationMessageTemplatesUpdateLocalizedNotificationMessagesExecute(r ApiDeviceManagementNotificationMessageTemplatesUpdateLocalizedNotificationMessagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementNotificationMessageTemplateApiService.DeviceManagementNotificationMessageTemplatesUpdateLocalizedNotificationMessages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/notificationMessageTemplates/{notificationMessageTemplate-id}/localizedNotificationMessages/{localizedNotificationMessage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notificationMessageTemplate-id"+"}", _neturl.PathEscape(parameterToString(r.notificationMessageTemplateId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"localizedNotificationMessage-id"+"}", _neturl.PathEscape(parameterToString(r.localizedNotificationMessageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphLocalizedNotificationMessage == nil {
		return nil, reportError("microsoftGraphLocalizedNotificationMessage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphLocalizedNotificationMessage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementUpdateNotificationMessageTemplatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementNotificationMessageTemplateApiService
	notificationMessageTemplateId string
	microsoftGraphNotificationMessageTemplate *MicrosoftGraphNotificationMessageTemplate
}

// New navigation property values
func (r ApiDeviceManagementUpdateNotificationMessageTemplatesRequest) MicrosoftGraphNotificationMessageTemplate(microsoftGraphNotificationMessageTemplate MicrosoftGraphNotificationMessageTemplate) ApiDeviceManagementUpdateNotificationMessageTemplatesRequest {
	r.microsoftGraphNotificationMessageTemplate = &microsoftGraphNotificationMessageTemplate
	return r
}

func (r ApiDeviceManagementUpdateNotificationMessageTemplatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementUpdateNotificationMessageTemplatesExecute(r)
}

/*
DeviceManagementUpdateNotificationMessageTemplates Update the navigation property notificationMessageTemplates in deviceManagement

The Notification Message Templates.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notificationMessageTemplateId key: id of notificationMessageTemplate
 @return ApiDeviceManagementUpdateNotificationMessageTemplatesRequest
*/
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementUpdateNotificationMessageTemplates(ctx _context.Context, notificationMessageTemplateId string) ApiDeviceManagementUpdateNotificationMessageTemplatesRequest {
	return ApiDeviceManagementUpdateNotificationMessageTemplatesRequest{
		ApiService: a,
		ctx: ctx,
		notificationMessageTemplateId: notificationMessageTemplateId,
	}
}

// Execute executes the request
func (a *DeviceManagementNotificationMessageTemplateApiService) DeviceManagementUpdateNotificationMessageTemplatesExecute(r ApiDeviceManagementUpdateNotificationMessageTemplatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementNotificationMessageTemplateApiService.DeviceManagementUpdateNotificationMessageTemplates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/notificationMessageTemplates/{notificationMessageTemplate-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notificationMessageTemplate-id"+"}", _neturl.PathEscape(parameterToString(r.notificationMessageTemplateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotificationMessageTemplate == nil {
		return nil, reportError("microsoftGraphNotificationMessageTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotificationMessageTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
