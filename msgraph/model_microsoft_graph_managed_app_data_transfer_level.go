/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphManagedAppDataTransferLevel Data can be transferred from/to these classes of apps
type MicrosoftGraphManagedAppDataTransferLevel string

// List of microsoft.graph.managedAppDataTransferLevel
const (
	ALL_APPS MicrosoftGraphManagedAppDataTransferLevel = "allApps"
	MANAGED_APPS MicrosoftGraphManagedAppDataTransferLevel = "managedApps"
	NONE MicrosoftGraphManagedAppDataTransferLevel = "none"
)

// All allowed values of MicrosoftGraphManagedAppDataTransferLevel enum
var AllowedMicrosoftGraphManagedAppDataTransferLevelEnumValues = []MicrosoftGraphManagedAppDataTransferLevel{
	"allApps",
	"managedApps",
	"none",
}

func (v *MicrosoftGraphManagedAppDataTransferLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphManagedAppDataTransferLevel(value)
	for _, existing := range AllowedMicrosoftGraphManagedAppDataTransferLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphManagedAppDataTransferLevel", value)
}

// NewMicrosoftGraphManagedAppDataTransferLevelFromValue returns a pointer to a valid MicrosoftGraphManagedAppDataTransferLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphManagedAppDataTransferLevelFromValue(v string) (*MicrosoftGraphManagedAppDataTransferLevel, error) {
	ev := MicrosoftGraphManagedAppDataTransferLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphManagedAppDataTransferLevel: valid values are %v", v, AllowedMicrosoftGraphManagedAppDataTransferLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphManagedAppDataTransferLevel) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphManagedAppDataTransferLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.managedAppDataTransferLevel value
func (v MicrosoftGraphManagedAppDataTransferLevel) Ptr() *MicrosoftGraphManagedAppDataTransferLevel {
	return &v
}

type NullableMicrosoftGraphManagedAppDataTransferLevel struct {
	value *MicrosoftGraphManagedAppDataTransferLevel
	isSet bool
}

func (v NullableMicrosoftGraphManagedAppDataTransferLevel) Get() *MicrosoftGraphManagedAppDataTransferLevel {
	return v.value
}

func (v *NullableMicrosoftGraphManagedAppDataTransferLevel) Set(val *MicrosoftGraphManagedAppDataTransferLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphManagedAppDataTransferLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphManagedAppDataTransferLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphManagedAppDataTransferLevel(val *MicrosoftGraphManagedAppDataTransferLevel) *NullableMicrosoftGraphManagedAppDataTransferLevel {
	return &NullableMicrosoftGraphManagedAppDataTransferLevel{value: val, isSet: true}
}

func (v NullableMicrosoftGraphManagedAppDataTransferLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphManagedAppDataTransferLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

