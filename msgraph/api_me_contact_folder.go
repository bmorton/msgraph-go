/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
)

// Linger please
var (
	_ _context.Context
)

// MeContactFolderApiService MeContactFolderApi service
type MeContactFolderApiService service

type ApiMeContactFoldersContactsCreateExtensionsRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	microsoftGraphExtension *MicrosoftGraphExtension
}

// New navigation property
func (r ApiMeContactFoldersContactsCreateExtensionsRequest) MicrosoftGraphExtension(microsoftGraphExtension MicrosoftGraphExtension) ApiMeContactFoldersContactsCreateExtensionsRequest {
	r.microsoftGraphExtension = &microsoftGraphExtension
	return r
}

func (r ApiMeContactFoldersContactsCreateExtensionsRequest) Execute() (MicrosoftGraphExtension, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsCreateExtensionsExecute(r)
}

/*
MeContactFoldersContactsCreateExtensions Create new navigation property to extensions for me

The collection of open extensions defined for the contact. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @return ApiMeContactFoldersContactsCreateExtensionsRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsCreateExtensions(ctx _context.Context, contactFolderId string, contactId string) ApiMeContactFoldersContactsCreateExtensionsRequest {
	return ApiMeContactFoldersContactsCreateExtensionsRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphExtension
func (a *MeContactFolderApiService) MeContactFoldersContactsCreateExtensionsExecute(r ApiMeContactFoldersContactsCreateExtensionsRequest) (MicrosoftGraphExtension, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphExtension
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsCreateExtensions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/extensions"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphExtension == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphExtension is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphExtension
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsCreateMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	microsoftGraphMultiValueLegacyExtendedProperty *MicrosoftGraphMultiValueLegacyExtendedProperty
}

// New navigation property
func (r ApiMeContactFoldersContactsCreateMultiValueExtendedPropertiesRequest) MicrosoftGraphMultiValueLegacyExtendedProperty(microsoftGraphMultiValueLegacyExtendedProperty MicrosoftGraphMultiValueLegacyExtendedProperty) ApiMeContactFoldersContactsCreateMultiValueExtendedPropertiesRequest {
	r.microsoftGraphMultiValueLegacyExtendedProperty = &microsoftGraphMultiValueLegacyExtendedProperty
	return r
}

func (r ApiMeContactFoldersContactsCreateMultiValueExtendedPropertiesRequest) Execute() (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsCreateMultiValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersContactsCreateMultiValueExtendedProperties Create new navigation property to multiValueExtendedProperties for me

The collection of multi-value extended properties defined for the contact. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @return ApiMeContactFoldersContactsCreateMultiValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsCreateMultiValueExtendedProperties(ctx _context.Context, contactFolderId string, contactId string) ApiMeContactFoldersContactsCreateMultiValueExtendedPropertiesRequest {
	return ApiMeContactFoldersContactsCreateMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMultiValueLegacyExtendedProperty
func (a *MeContactFolderApiService) MeContactFoldersContactsCreateMultiValueExtendedPropertiesExecute(r ApiMeContactFoldersContactsCreateMultiValueExtendedPropertiesRequest) (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMultiValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsCreateMultiValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/multiValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMultiValueLegacyExtendedProperty == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphMultiValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMultiValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsCreateSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	microsoftGraphSingleValueLegacyExtendedProperty *MicrosoftGraphSingleValueLegacyExtendedProperty
}

// New navigation property
func (r ApiMeContactFoldersContactsCreateSingleValueExtendedPropertiesRequest) MicrosoftGraphSingleValueLegacyExtendedProperty(microsoftGraphSingleValueLegacyExtendedProperty MicrosoftGraphSingleValueLegacyExtendedProperty) ApiMeContactFoldersContactsCreateSingleValueExtendedPropertiesRequest {
	r.microsoftGraphSingleValueLegacyExtendedProperty = &microsoftGraphSingleValueLegacyExtendedProperty
	return r
}

func (r ApiMeContactFoldersContactsCreateSingleValueExtendedPropertiesRequest) Execute() (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsCreateSingleValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersContactsCreateSingleValueExtendedProperties Create new navigation property to singleValueExtendedProperties for me

The collection of single-value extended properties defined for the contact. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @return ApiMeContactFoldersContactsCreateSingleValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsCreateSingleValueExtendedProperties(ctx _context.Context, contactFolderId string, contactId string) ApiMeContactFoldersContactsCreateSingleValueExtendedPropertiesRequest {
	return ApiMeContactFoldersContactsCreateSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSingleValueLegacyExtendedProperty
func (a *MeContactFolderApiService) MeContactFoldersContactsCreateSingleValueExtendedPropertiesExecute(r ApiMeContactFoldersContactsCreateSingleValueExtendedPropertiesRequest) (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSingleValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsCreateSingleValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/singleValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSingleValueLegacyExtendedProperty == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSingleValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSingleValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsDeleteExtensionsRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	extensionId string
	ifMatch *string
}

// ETag
func (r ApiMeContactFoldersContactsDeleteExtensionsRequest) IfMatch(ifMatch string) ApiMeContactFoldersContactsDeleteExtensionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeContactFoldersContactsDeleteExtensionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsDeleteExtensionsExecute(r)
}

/*
MeContactFoldersContactsDeleteExtensions Delete navigation property extensions for me

The collection of open extensions defined for the contact. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @param extensionId key: id of extension
 @return ApiMeContactFoldersContactsDeleteExtensionsRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsDeleteExtensions(ctx _context.Context, contactFolderId string, contactId string, extensionId string) ApiMeContactFoldersContactsDeleteExtensionsRequest {
	return ApiMeContactFoldersContactsDeleteExtensionsRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
		extensionId: extensionId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersContactsDeleteExtensionsExecute(r ApiMeContactFoldersContactsDeleteExtensionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsDeleteExtensions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/extensions/{extension-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extension-id"+"}", _neturl.PathEscape(parameterToString(r.extensionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsDeleteMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	multiValueLegacyExtendedPropertyId string
	ifMatch *string
}

// ETag
func (r ApiMeContactFoldersContactsDeleteMultiValueExtendedPropertiesRequest) IfMatch(ifMatch string) ApiMeContactFoldersContactsDeleteMultiValueExtendedPropertiesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeContactFoldersContactsDeleteMultiValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsDeleteMultiValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersContactsDeleteMultiValueExtendedProperties Delete navigation property multiValueExtendedProperties for me

The collection of multi-value extended properties defined for the contact. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty
 @return ApiMeContactFoldersContactsDeleteMultiValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsDeleteMultiValueExtendedProperties(ctx _context.Context, contactFolderId string, contactId string, multiValueLegacyExtendedPropertyId string) ApiMeContactFoldersContactsDeleteMultiValueExtendedPropertiesRequest {
	return ApiMeContactFoldersContactsDeleteMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
		multiValueLegacyExtendedPropertyId: multiValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersContactsDeleteMultiValueExtendedPropertiesExecute(r ApiMeContactFoldersContactsDeleteMultiValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsDeleteMultiValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"multiValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.multiValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsDeletePhotoRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	ifMatch *string
}

// ETag
func (r ApiMeContactFoldersContactsDeletePhotoRequest) IfMatch(ifMatch string) ApiMeContactFoldersContactsDeletePhotoRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeContactFoldersContactsDeletePhotoRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsDeletePhotoExecute(r)
}

/*
MeContactFoldersContactsDeletePhoto Delete navigation property photo for me

Optional contact picture. You can get or set a photo for a contact.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @return ApiMeContactFoldersContactsDeletePhotoRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsDeletePhoto(ctx _context.Context, contactFolderId string, contactId string) ApiMeContactFoldersContactsDeletePhotoRequest {
	return ApiMeContactFoldersContactsDeletePhotoRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersContactsDeletePhotoExecute(r ApiMeContactFoldersContactsDeletePhotoRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsDeletePhoto")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/photo"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsDeleteSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	singleValueLegacyExtendedPropertyId string
	ifMatch *string
}

// ETag
func (r ApiMeContactFoldersContactsDeleteSingleValueExtendedPropertiesRequest) IfMatch(ifMatch string) ApiMeContactFoldersContactsDeleteSingleValueExtendedPropertiesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeContactFoldersContactsDeleteSingleValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsDeleteSingleValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersContactsDeleteSingleValueExtendedProperties Delete navigation property singleValueExtendedProperties for me

The collection of single-value extended properties defined for the contact. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty
 @return ApiMeContactFoldersContactsDeleteSingleValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsDeleteSingleValueExtendedProperties(ctx _context.Context, contactFolderId string, contactId string, singleValueLegacyExtendedPropertyId string) ApiMeContactFoldersContactsDeleteSingleValueExtendedPropertiesRequest {
	return ApiMeContactFoldersContactsDeleteSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
		singleValueLegacyExtendedPropertyId: singleValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersContactsDeleteSingleValueExtendedPropertiesExecute(r ApiMeContactFoldersContactsDeleteSingleValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsDeleteSingleValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"singleValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.singleValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsGetExtensionsRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	extensionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeContactFoldersContactsGetExtensionsRequest) Select_(select_ []string) ApiMeContactFoldersContactsGetExtensionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeContactFoldersContactsGetExtensionsRequest) Expand(expand []string) ApiMeContactFoldersContactsGetExtensionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeContactFoldersContactsGetExtensionsRequest) Execute() (MicrosoftGraphExtension, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsGetExtensionsExecute(r)
}

/*
MeContactFoldersContactsGetExtensions Get extensions from me

The collection of open extensions defined for the contact. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @param extensionId key: id of extension
 @return ApiMeContactFoldersContactsGetExtensionsRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsGetExtensions(ctx _context.Context, contactFolderId string, contactId string, extensionId string) ApiMeContactFoldersContactsGetExtensionsRequest {
	return ApiMeContactFoldersContactsGetExtensionsRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
		extensionId: extensionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphExtension
func (a *MeContactFolderApiService) MeContactFoldersContactsGetExtensionsExecute(r ApiMeContactFoldersContactsGetExtensionsRequest) (MicrosoftGraphExtension, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphExtension
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsGetExtensions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/extensions/{extension-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extension-id"+"}", _neturl.PathEscape(parameterToString(r.extensionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsGetMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	multiValueLegacyExtendedPropertyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeContactFoldersContactsGetMultiValueExtendedPropertiesRequest) Select_(select_ []string) ApiMeContactFoldersContactsGetMultiValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeContactFoldersContactsGetMultiValueExtendedPropertiesRequest) Expand(expand []string) ApiMeContactFoldersContactsGetMultiValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeContactFoldersContactsGetMultiValueExtendedPropertiesRequest) Execute() (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsGetMultiValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersContactsGetMultiValueExtendedProperties Get multiValueExtendedProperties from me

The collection of multi-value extended properties defined for the contact. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty
 @return ApiMeContactFoldersContactsGetMultiValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsGetMultiValueExtendedProperties(ctx _context.Context, contactFolderId string, contactId string, multiValueLegacyExtendedPropertyId string) ApiMeContactFoldersContactsGetMultiValueExtendedPropertiesRequest {
	return ApiMeContactFoldersContactsGetMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
		multiValueLegacyExtendedPropertyId: multiValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMultiValueLegacyExtendedProperty
func (a *MeContactFolderApiService) MeContactFoldersContactsGetMultiValueExtendedPropertiesExecute(r ApiMeContactFoldersContactsGetMultiValueExtendedPropertiesRequest) (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMultiValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsGetMultiValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"multiValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.multiValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsGetPhotoRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	select_ *[]string
}

// Select properties to be returned
func (r ApiMeContactFoldersContactsGetPhotoRequest) Select_(select_ []string) ApiMeContactFoldersContactsGetPhotoRequest {
	r.select_ = &select_
	return r
}

func (r ApiMeContactFoldersContactsGetPhotoRequest) Execute() (MicrosoftGraphProfilePhoto, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsGetPhotoExecute(r)
}

/*
MeContactFoldersContactsGetPhoto Get photo from me

Optional contact picture. You can get or set a photo for a contact.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @return ApiMeContactFoldersContactsGetPhotoRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsGetPhoto(ctx _context.Context, contactFolderId string, contactId string) ApiMeContactFoldersContactsGetPhotoRequest {
	return ApiMeContactFoldersContactsGetPhotoRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphProfilePhoto
func (a *MeContactFolderApiService) MeContactFoldersContactsGetPhotoExecute(r ApiMeContactFoldersContactsGetPhotoRequest) (MicrosoftGraphProfilePhoto, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphProfilePhoto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsGetPhoto")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/photo"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsGetPhotoContentRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
}


func (r ApiMeContactFoldersContactsGetPhotoContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsGetPhotoContentExecute(r)
}

/*
MeContactFoldersContactsGetPhotoContent Get media content for the navigation property photo from me

The user's profile photo. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @return ApiMeContactFoldersContactsGetPhotoContentRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsGetPhotoContent(ctx _context.Context, contactFolderId string, contactId string) ApiMeContactFoldersContactsGetPhotoContentRequest {
	return ApiMeContactFoldersContactsGetPhotoContentRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *MeContactFolderApiService) MeContactFoldersContactsGetPhotoContentExecute(r ApiMeContactFoldersContactsGetPhotoContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsGetPhotoContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/photo/$value"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsGetSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	singleValueLegacyExtendedPropertyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeContactFoldersContactsGetSingleValueExtendedPropertiesRequest) Select_(select_ []string) ApiMeContactFoldersContactsGetSingleValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeContactFoldersContactsGetSingleValueExtendedPropertiesRequest) Expand(expand []string) ApiMeContactFoldersContactsGetSingleValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeContactFoldersContactsGetSingleValueExtendedPropertiesRequest) Execute() (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsGetSingleValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersContactsGetSingleValueExtendedProperties Get singleValueExtendedProperties from me

The collection of single-value extended properties defined for the contact. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty
 @return ApiMeContactFoldersContactsGetSingleValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsGetSingleValueExtendedProperties(ctx _context.Context, contactFolderId string, contactId string, singleValueLegacyExtendedPropertyId string) ApiMeContactFoldersContactsGetSingleValueExtendedPropertiesRequest {
	return ApiMeContactFoldersContactsGetSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
		singleValueLegacyExtendedPropertyId: singleValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSingleValueLegacyExtendedProperty
func (a *MeContactFolderApiService) MeContactFoldersContactsGetSingleValueExtendedPropertiesExecute(r ApiMeContactFoldersContactsGetSingleValueExtendedPropertiesRequest) (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSingleValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsGetSingleValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"singleValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.singleValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsListExtensionsRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	top *int32
	skip *int32
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeContactFoldersContactsListExtensionsRequest) Top(top int32) ApiMeContactFoldersContactsListExtensionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeContactFoldersContactsListExtensionsRequest) Skip(skip int32) ApiMeContactFoldersContactsListExtensionsRequest {
	r.skip = &skip
	return r
}
// Filter items by property values
func (r ApiMeContactFoldersContactsListExtensionsRequest) Filter(filter string) ApiMeContactFoldersContactsListExtensionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeContactFoldersContactsListExtensionsRequest) Count(count bool) ApiMeContactFoldersContactsListExtensionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeContactFoldersContactsListExtensionsRequest) Orderby(orderby []string) ApiMeContactFoldersContactsListExtensionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeContactFoldersContactsListExtensionsRequest) Select_(select_ []string) ApiMeContactFoldersContactsListExtensionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeContactFoldersContactsListExtensionsRequest) Expand(expand []string) ApiMeContactFoldersContactsListExtensionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeContactFoldersContactsListExtensionsRequest) Execute() (CollectionOfExtension, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsListExtensionsExecute(r)
}

/*
MeContactFoldersContactsListExtensions Get extensions from me

The collection of open extensions defined for the contact. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @return ApiMeContactFoldersContactsListExtensionsRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsListExtensions(ctx _context.Context, contactFolderId string, contactId string) ApiMeContactFoldersContactsListExtensionsRequest {
	return ApiMeContactFoldersContactsListExtensionsRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
	}
}

// Execute executes the request
//  @return CollectionOfExtension
func (a *MeContactFolderApiService) MeContactFoldersContactsListExtensionsExecute(r ApiMeContactFoldersContactsListExtensionsRequest) (CollectionOfExtension, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfExtension
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsListExtensions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/extensions"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest) Top(top int32) ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest) Skip(skip int32) ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest) Search(search string) ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest) Filter(filter string) ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest) Count(count bool) ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest) Orderby(orderby []string) ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest) Select_(select_ []string) ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest) Expand(expand []string) ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest) Execute() (CollectionOfMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsListMultiValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersContactsListMultiValueExtendedProperties Get multiValueExtendedProperties from me

The collection of multi-value extended properties defined for the contact. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @return ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsListMultiValueExtendedProperties(ctx _context.Context, contactFolderId string, contactId string) ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest {
	return ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
	}
}

// Execute executes the request
//  @return CollectionOfMultiValueLegacyExtendedProperty
func (a *MeContactFolderApiService) MeContactFoldersContactsListMultiValueExtendedPropertiesExecute(r ApiMeContactFoldersContactsListMultiValueExtendedPropertiesRequest) (CollectionOfMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfMultiValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsListMultiValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/multiValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest) Top(top int32) ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest) Skip(skip int32) ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest) Search(search string) ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest) Filter(filter string) ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest) Count(count bool) ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest) Orderby(orderby []string) ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest) Select_(select_ []string) ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest) Expand(expand []string) ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest) Execute() (CollectionOfSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsListSingleValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersContactsListSingleValueExtendedProperties Get singleValueExtendedProperties from me

The collection of single-value extended properties defined for the contact. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @return ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsListSingleValueExtendedProperties(ctx _context.Context, contactFolderId string, contactId string) ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest {
	return ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
	}
}

// Execute executes the request
//  @return CollectionOfSingleValueLegacyExtendedProperty
func (a *MeContactFolderApiService) MeContactFoldersContactsListSingleValueExtendedPropertiesExecute(r ApiMeContactFoldersContactsListSingleValueExtendedPropertiesRequest) (CollectionOfSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSingleValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsListSingleValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/singleValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsUpdateExtensionsRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	extensionId string
	microsoftGraphExtension *MicrosoftGraphExtension
}

// New navigation property values
func (r ApiMeContactFoldersContactsUpdateExtensionsRequest) MicrosoftGraphExtension(microsoftGraphExtension MicrosoftGraphExtension) ApiMeContactFoldersContactsUpdateExtensionsRequest {
	r.microsoftGraphExtension = &microsoftGraphExtension
	return r
}

func (r ApiMeContactFoldersContactsUpdateExtensionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsUpdateExtensionsExecute(r)
}

/*
MeContactFoldersContactsUpdateExtensions Update the navigation property extensions in me

The collection of open extensions defined for the contact. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @param extensionId key: id of extension
 @return ApiMeContactFoldersContactsUpdateExtensionsRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsUpdateExtensions(ctx _context.Context, contactFolderId string, contactId string, extensionId string) ApiMeContactFoldersContactsUpdateExtensionsRequest {
	return ApiMeContactFoldersContactsUpdateExtensionsRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
		extensionId: extensionId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersContactsUpdateExtensionsExecute(r ApiMeContactFoldersContactsUpdateExtensionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsUpdateExtensions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/extensions/{extension-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extension-id"+"}", _neturl.PathEscape(parameterToString(r.extensionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphExtension == nil {
		return nil, reportError("microsoftGraphExtension is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphExtension
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsUpdateMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	multiValueLegacyExtendedPropertyId string
	microsoftGraphMultiValueLegacyExtendedProperty *MicrosoftGraphMultiValueLegacyExtendedProperty
}

// New navigation property values
func (r ApiMeContactFoldersContactsUpdateMultiValueExtendedPropertiesRequest) MicrosoftGraphMultiValueLegacyExtendedProperty(microsoftGraphMultiValueLegacyExtendedProperty MicrosoftGraphMultiValueLegacyExtendedProperty) ApiMeContactFoldersContactsUpdateMultiValueExtendedPropertiesRequest {
	r.microsoftGraphMultiValueLegacyExtendedProperty = &microsoftGraphMultiValueLegacyExtendedProperty
	return r
}

func (r ApiMeContactFoldersContactsUpdateMultiValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsUpdateMultiValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersContactsUpdateMultiValueExtendedProperties Update the navigation property multiValueExtendedProperties in me

The collection of multi-value extended properties defined for the contact. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty
 @return ApiMeContactFoldersContactsUpdateMultiValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsUpdateMultiValueExtendedProperties(ctx _context.Context, contactFolderId string, contactId string, multiValueLegacyExtendedPropertyId string) ApiMeContactFoldersContactsUpdateMultiValueExtendedPropertiesRequest {
	return ApiMeContactFoldersContactsUpdateMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
		multiValueLegacyExtendedPropertyId: multiValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersContactsUpdateMultiValueExtendedPropertiesExecute(r ApiMeContactFoldersContactsUpdateMultiValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsUpdateMultiValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"multiValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.multiValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMultiValueLegacyExtendedProperty == nil {
		return nil, reportError("microsoftGraphMultiValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMultiValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsUpdatePhotoRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	microsoftGraphProfilePhoto *MicrosoftGraphProfilePhoto
}

// New navigation property values
func (r ApiMeContactFoldersContactsUpdatePhotoRequest) MicrosoftGraphProfilePhoto(microsoftGraphProfilePhoto MicrosoftGraphProfilePhoto) ApiMeContactFoldersContactsUpdatePhotoRequest {
	r.microsoftGraphProfilePhoto = &microsoftGraphProfilePhoto
	return r
}

func (r ApiMeContactFoldersContactsUpdatePhotoRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsUpdatePhotoExecute(r)
}

/*
MeContactFoldersContactsUpdatePhoto Update the navigation property photo in me

Optional contact picture. You can get or set a photo for a contact.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @return ApiMeContactFoldersContactsUpdatePhotoRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsUpdatePhoto(ctx _context.Context, contactFolderId string, contactId string) ApiMeContactFoldersContactsUpdatePhotoRequest {
	return ApiMeContactFoldersContactsUpdatePhotoRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersContactsUpdatePhotoExecute(r ApiMeContactFoldersContactsUpdatePhotoRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsUpdatePhoto")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/photo"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphProfilePhoto == nil {
		return nil, reportError("microsoftGraphProfilePhoto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphProfilePhoto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsUpdatePhotoContentRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	body **os.File
}

// New media content.
func (r ApiMeContactFoldersContactsUpdatePhotoContentRequest) Body(body *os.File) ApiMeContactFoldersContactsUpdatePhotoContentRequest {
	r.body = &body
	return r
}

func (r ApiMeContactFoldersContactsUpdatePhotoContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsUpdatePhotoContentExecute(r)
}

/*
MeContactFoldersContactsUpdatePhotoContent Update media content for the navigation property photo in me

The user's profile photo. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @return ApiMeContactFoldersContactsUpdatePhotoContentRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsUpdatePhotoContent(ctx _context.Context, contactFolderId string, contactId string) ApiMeContactFoldersContactsUpdatePhotoContentRequest {
	return ApiMeContactFoldersContactsUpdatePhotoContentRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersContactsUpdatePhotoContentExecute(r ApiMeContactFoldersContactsUpdatePhotoContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsUpdatePhotoContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/photo/$value"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactsUpdateSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	singleValueLegacyExtendedPropertyId string
	microsoftGraphSingleValueLegacyExtendedProperty *MicrosoftGraphSingleValueLegacyExtendedProperty
}

// New navigation property values
func (r ApiMeContactFoldersContactsUpdateSingleValueExtendedPropertiesRequest) MicrosoftGraphSingleValueLegacyExtendedProperty(microsoftGraphSingleValueLegacyExtendedProperty MicrosoftGraphSingleValueLegacyExtendedProperty) ApiMeContactFoldersContactsUpdateSingleValueExtendedPropertiesRequest {
	r.microsoftGraphSingleValueLegacyExtendedProperty = &microsoftGraphSingleValueLegacyExtendedProperty
	return r
}

func (r ApiMeContactFoldersContactsUpdateSingleValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactsUpdateSingleValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersContactsUpdateSingleValueExtendedProperties Update the navigation property singleValueExtendedProperties in me

The collection of single-value extended properties defined for the contact. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty
 @return ApiMeContactFoldersContactsUpdateSingleValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersContactsUpdateSingleValueExtendedProperties(ctx _context.Context, contactFolderId string, contactId string, singleValueLegacyExtendedPropertyId string) ApiMeContactFoldersContactsUpdateSingleValueExtendedPropertiesRequest {
	return ApiMeContactFoldersContactsUpdateSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
		singleValueLegacyExtendedPropertyId: singleValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersContactsUpdateSingleValueExtendedPropertiesExecute(r ApiMeContactFoldersContactsUpdateSingleValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersContactsUpdateSingleValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"singleValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.singleValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSingleValueLegacyExtendedProperty == nil {
		return nil, reportError("microsoftGraphSingleValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSingleValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersCreateChildFoldersRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	microsoftGraphContactFolder *MicrosoftGraphContactFolder
}

// New navigation property
func (r ApiMeContactFoldersCreateChildFoldersRequest) MicrosoftGraphContactFolder(microsoftGraphContactFolder MicrosoftGraphContactFolder) ApiMeContactFoldersCreateChildFoldersRequest {
	r.microsoftGraphContactFolder = &microsoftGraphContactFolder
	return r
}

func (r ApiMeContactFoldersCreateChildFoldersRequest) Execute() (MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersCreateChildFoldersExecute(r)
}

/*
MeContactFoldersCreateChildFolders Create new navigation property to childFolders for me

The collection of child folders in the folder. Navigation property. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @return ApiMeContactFoldersCreateChildFoldersRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersCreateChildFolders(ctx _context.Context, contactFolderId string) ApiMeContactFoldersCreateChildFoldersRequest {
	return ApiMeContactFoldersCreateChildFoldersRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphContactFolder
func (a *MeContactFolderApiService) MeContactFoldersCreateChildFoldersExecute(r ApiMeContactFoldersCreateChildFoldersRequest) (MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphContactFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersCreateChildFolders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/childFolders"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphContactFolder == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphContactFolder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphContactFolder
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersCreateContactsRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	microsoftGraphContact *MicrosoftGraphContact
}

// New navigation property
func (r ApiMeContactFoldersCreateContactsRequest) MicrosoftGraphContact(microsoftGraphContact MicrosoftGraphContact) ApiMeContactFoldersCreateContactsRequest {
	r.microsoftGraphContact = &microsoftGraphContact
	return r
}

func (r ApiMeContactFoldersCreateContactsRequest) Execute() (MicrosoftGraphContact, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersCreateContactsExecute(r)
}

/*
MeContactFoldersCreateContacts Create new navigation property to contacts for me

The contacts in the folder. Navigation property. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @return ApiMeContactFoldersCreateContactsRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersCreateContacts(ctx _context.Context, contactFolderId string) ApiMeContactFoldersCreateContactsRequest {
	return ApiMeContactFoldersCreateContactsRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphContact
func (a *MeContactFolderApiService) MeContactFoldersCreateContactsExecute(r ApiMeContactFoldersCreateContactsRequest) (MicrosoftGraphContact, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersCreateContacts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphContact == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphContact is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphContact
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersCreateMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	microsoftGraphMultiValueLegacyExtendedProperty *MicrosoftGraphMultiValueLegacyExtendedProperty
}

// New navigation property
func (r ApiMeContactFoldersCreateMultiValueExtendedPropertiesRequest) MicrosoftGraphMultiValueLegacyExtendedProperty(microsoftGraphMultiValueLegacyExtendedProperty MicrosoftGraphMultiValueLegacyExtendedProperty) ApiMeContactFoldersCreateMultiValueExtendedPropertiesRequest {
	r.microsoftGraphMultiValueLegacyExtendedProperty = &microsoftGraphMultiValueLegacyExtendedProperty
	return r
}

func (r ApiMeContactFoldersCreateMultiValueExtendedPropertiesRequest) Execute() (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersCreateMultiValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersCreateMultiValueExtendedProperties Create new navigation property to multiValueExtendedProperties for me

The collection of multi-value extended properties defined for the contactFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @return ApiMeContactFoldersCreateMultiValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersCreateMultiValueExtendedProperties(ctx _context.Context, contactFolderId string) ApiMeContactFoldersCreateMultiValueExtendedPropertiesRequest {
	return ApiMeContactFoldersCreateMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMultiValueLegacyExtendedProperty
func (a *MeContactFolderApiService) MeContactFoldersCreateMultiValueExtendedPropertiesExecute(r ApiMeContactFoldersCreateMultiValueExtendedPropertiesRequest) (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMultiValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersCreateMultiValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/multiValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMultiValueLegacyExtendedProperty == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphMultiValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMultiValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersCreateSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	microsoftGraphSingleValueLegacyExtendedProperty *MicrosoftGraphSingleValueLegacyExtendedProperty
}

// New navigation property
func (r ApiMeContactFoldersCreateSingleValueExtendedPropertiesRequest) MicrosoftGraphSingleValueLegacyExtendedProperty(microsoftGraphSingleValueLegacyExtendedProperty MicrosoftGraphSingleValueLegacyExtendedProperty) ApiMeContactFoldersCreateSingleValueExtendedPropertiesRequest {
	r.microsoftGraphSingleValueLegacyExtendedProperty = &microsoftGraphSingleValueLegacyExtendedProperty
	return r
}

func (r ApiMeContactFoldersCreateSingleValueExtendedPropertiesRequest) Execute() (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersCreateSingleValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersCreateSingleValueExtendedProperties Create new navigation property to singleValueExtendedProperties for me

The collection of single-value extended properties defined for the contactFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @return ApiMeContactFoldersCreateSingleValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersCreateSingleValueExtendedProperties(ctx _context.Context, contactFolderId string) ApiMeContactFoldersCreateSingleValueExtendedPropertiesRequest {
	return ApiMeContactFoldersCreateSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSingleValueLegacyExtendedProperty
func (a *MeContactFolderApiService) MeContactFoldersCreateSingleValueExtendedPropertiesExecute(r ApiMeContactFoldersCreateSingleValueExtendedPropertiesRequest) (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSingleValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersCreateSingleValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/singleValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSingleValueLegacyExtendedProperty == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSingleValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSingleValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersDeleteChildFoldersRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactFolderId1 string
	ifMatch *string
}

// ETag
func (r ApiMeContactFoldersDeleteChildFoldersRequest) IfMatch(ifMatch string) ApiMeContactFoldersDeleteChildFoldersRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeContactFoldersDeleteChildFoldersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersDeleteChildFoldersExecute(r)
}

/*
MeContactFoldersDeleteChildFolders Delete navigation property childFolders for me

The collection of child folders in the folder. Navigation property. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactFolderId1 key: id of contactFolder
 @return ApiMeContactFoldersDeleteChildFoldersRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersDeleteChildFolders(ctx _context.Context, contactFolderId string, contactFolderId1 string) ApiMeContactFoldersDeleteChildFoldersRequest {
	return ApiMeContactFoldersDeleteChildFoldersRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactFolderId1: contactFolderId1,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersDeleteChildFoldersExecute(r ApiMeContactFoldersDeleteChildFoldersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersDeleteChildFolders")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/childFolders/{contactFolder-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id1"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersDeleteContactsRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	ifMatch *string
}

// ETag
func (r ApiMeContactFoldersDeleteContactsRequest) IfMatch(ifMatch string) ApiMeContactFoldersDeleteContactsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeContactFoldersDeleteContactsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersDeleteContactsExecute(r)
}

/*
MeContactFoldersDeleteContacts Delete navigation property contacts for me

The contacts in the folder. Navigation property. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @return ApiMeContactFoldersDeleteContactsRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersDeleteContacts(ctx _context.Context, contactFolderId string, contactId string) ApiMeContactFoldersDeleteContactsRequest {
	return ApiMeContactFoldersDeleteContactsRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersDeleteContactsExecute(r ApiMeContactFoldersDeleteContactsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersDeleteContacts")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersDeleteMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	multiValueLegacyExtendedPropertyId string
	ifMatch *string
}

// ETag
func (r ApiMeContactFoldersDeleteMultiValueExtendedPropertiesRequest) IfMatch(ifMatch string) ApiMeContactFoldersDeleteMultiValueExtendedPropertiesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeContactFoldersDeleteMultiValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersDeleteMultiValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersDeleteMultiValueExtendedProperties Delete navigation property multiValueExtendedProperties for me

The collection of multi-value extended properties defined for the contactFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty
 @return ApiMeContactFoldersDeleteMultiValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersDeleteMultiValueExtendedProperties(ctx _context.Context, contactFolderId string, multiValueLegacyExtendedPropertyId string) ApiMeContactFoldersDeleteMultiValueExtendedPropertiesRequest {
	return ApiMeContactFoldersDeleteMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		multiValueLegacyExtendedPropertyId: multiValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersDeleteMultiValueExtendedPropertiesExecute(r ApiMeContactFoldersDeleteMultiValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersDeleteMultiValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"multiValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.multiValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersDeleteSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	singleValueLegacyExtendedPropertyId string
	ifMatch *string
}

// ETag
func (r ApiMeContactFoldersDeleteSingleValueExtendedPropertiesRequest) IfMatch(ifMatch string) ApiMeContactFoldersDeleteSingleValueExtendedPropertiesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeContactFoldersDeleteSingleValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersDeleteSingleValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersDeleteSingleValueExtendedProperties Delete navigation property singleValueExtendedProperties for me

The collection of single-value extended properties defined for the contactFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty
 @return ApiMeContactFoldersDeleteSingleValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersDeleteSingleValueExtendedProperties(ctx _context.Context, contactFolderId string, singleValueLegacyExtendedPropertyId string) ApiMeContactFoldersDeleteSingleValueExtendedPropertiesRequest {
	return ApiMeContactFoldersDeleteSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		singleValueLegacyExtendedPropertyId: singleValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersDeleteSingleValueExtendedPropertiesExecute(r ApiMeContactFoldersDeleteSingleValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersDeleteSingleValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"singleValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.singleValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersGetChildFoldersRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactFolderId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeContactFoldersGetChildFoldersRequest) Select_(select_ []string) ApiMeContactFoldersGetChildFoldersRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeContactFoldersGetChildFoldersRequest) Expand(expand []string) ApiMeContactFoldersGetChildFoldersRequest {
	r.expand = &expand
	return r
}

func (r ApiMeContactFoldersGetChildFoldersRequest) Execute() (MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersGetChildFoldersExecute(r)
}

/*
MeContactFoldersGetChildFolders Get childFolders from me

The collection of child folders in the folder. Navigation property. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactFolderId1 key: id of contactFolder
 @return ApiMeContactFoldersGetChildFoldersRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersGetChildFolders(ctx _context.Context, contactFolderId string, contactFolderId1 string) ApiMeContactFoldersGetChildFoldersRequest {
	return ApiMeContactFoldersGetChildFoldersRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactFolderId1: contactFolderId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphContactFolder
func (a *MeContactFolderApiService) MeContactFoldersGetChildFoldersExecute(r ApiMeContactFoldersGetChildFoldersRequest) (MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphContactFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersGetChildFolders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/childFolders/{contactFolder-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id1"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersGetContactsRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeContactFoldersGetContactsRequest) Select_(select_ []string) ApiMeContactFoldersGetContactsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeContactFoldersGetContactsRequest) Expand(expand []string) ApiMeContactFoldersGetContactsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeContactFoldersGetContactsRequest) Execute() (MicrosoftGraphContact, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersGetContactsExecute(r)
}

/*
MeContactFoldersGetContacts Get contacts from me

The contacts in the folder. Navigation property. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @return ApiMeContactFoldersGetContactsRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersGetContacts(ctx _context.Context, contactFolderId string, contactId string) ApiMeContactFoldersGetContactsRequest {
	return ApiMeContactFoldersGetContactsRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphContact
func (a *MeContactFolderApiService) MeContactFoldersGetContactsExecute(r ApiMeContactFoldersGetContactsRequest) (MicrosoftGraphContact, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersGetContacts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersGetMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	multiValueLegacyExtendedPropertyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeContactFoldersGetMultiValueExtendedPropertiesRequest) Select_(select_ []string) ApiMeContactFoldersGetMultiValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeContactFoldersGetMultiValueExtendedPropertiesRequest) Expand(expand []string) ApiMeContactFoldersGetMultiValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeContactFoldersGetMultiValueExtendedPropertiesRequest) Execute() (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersGetMultiValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersGetMultiValueExtendedProperties Get multiValueExtendedProperties from me

The collection of multi-value extended properties defined for the contactFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty
 @return ApiMeContactFoldersGetMultiValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersGetMultiValueExtendedProperties(ctx _context.Context, contactFolderId string, multiValueLegacyExtendedPropertyId string) ApiMeContactFoldersGetMultiValueExtendedPropertiesRequest {
	return ApiMeContactFoldersGetMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		multiValueLegacyExtendedPropertyId: multiValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMultiValueLegacyExtendedProperty
func (a *MeContactFolderApiService) MeContactFoldersGetMultiValueExtendedPropertiesExecute(r ApiMeContactFoldersGetMultiValueExtendedPropertiesRequest) (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMultiValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersGetMultiValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"multiValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.multiValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersGetSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	singleValueLegacyExtendedPropertyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeContactFoldersGetSingleValueExtendedPropertiesRequest) Select_(select_ []string) ApiMeContactFoldersGetSingleValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeContactFoldersGetSingleValueExtendedPropertiesRequest) Expand(expand []string) ApiMeContactFoldersGetSingleValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeContactFoldersGetSingleValueExtendedPropertiesRequest) Execute() (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersGetSingleValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersGetSingleValueExtendedProperties Get singleValueExtendedProperties from me

The collection of single-value extended properties defined for the contactFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty
 @return ApiMeContactFoldersGetSingleValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersGetSingleValueExtendedProperties(ctx _context.Context, contactFolderId string, singleValueLegacyExtendedPropertyId string) ApiMeContactFoldersGetSingleValueExtendedPropertiesRequest {
	return ApiMeContactFoldersGetSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		singleValueLegacyExtendedPropertyId: singleValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSingleValueLegacyExtendedProperty
func (a *MeContactFolderApiService) MeContactFoldersGetSingleValueExtendedPropertiesExecute(r ApiMeContactFoldersGetSingleValueExtendedPropertiesRequest) (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSingleValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersGetSingleValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"singleValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.singleValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersListChildFoldersRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	top *int32
	skip *int32
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeContactFoldersListChildFoldersRequest) Top(top int32) ApiMeContactFoldersListChildFoldersRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeContactFoldersListChildFoldersRequest) Skip(skip int32) ApiMeContactFoldersListChildFoldersRequest {
	r.skip = &skip
	return r
}
// Filter items by property values
func (r ApiMeContactFoldersListChildFoldersRequest) Filter(filter string) ApiMeContactFoldersListChildFoldersRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeContactFoldersListChildFoldersRequest) Count(count bool) ApiMeContactFoldersListChildFoldersRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeContactFoldersListChildFoldersRequest) Orderby(orderby []string) ApiMeContactFoldersListChildFoldersRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeContactFoldersListChildFoldersRequest) Select_(select_ []string) ApiMeContactFoldersListChildFoldersRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeContactFoldersListChildFoldersRequest) Expand(expand []string) ApiMeContactFoldersListChildFoldersRequest {
	r.expand = &expand
	return r
}

func (r ApiMeContactFoldersListChildFoldersRequest) Execute() (CollectionOfContactFolder, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersListChildFoldersExecute(r)
}

/*
MeContactFoldersListChildFolders Get childFolders from me

The collection of child folders in the folder. Navigation property. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @return ApiMeContactFoldersListChildFoldersRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersListChildFolders(ctx _context.Context, contactFolderId string) ApiMeContactFoldersListChildFoldersRequest {
	return ApiMeContactFoldersListChildFoldersRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
	}
}

// Execute executes the request
//  @return CollectionOfContactFolder
func (a *MeContactFolderApiService) MeContactFoldersListChildFoldersExecute(r ApiMeContactFoldersListChildFoldersRequest) (CollectionOfContactFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfContactFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersListChildFolders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/childFolders"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersListContactsRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	top *int32
	skip *int32
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeContactFoldersListContactsRequest) Top(top int32) ApiMeContactFoldersListContactsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeContactFoldersListContactsRequest) Skip(skip int32) ApiMeContactFoldersListContactsRequest {
	r.skip = &skip
	return r
}
// Filter items by property values
func (r ApiMeContactFoldersListContactsRequest) Filter(filter string) ApiMeContactFoldersListContactsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeContactFoldersListContactsRequest) Count(count bool) ApiMeContactFoldersListContactsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeContactFoldersListContactsRequest) Orderby(orderby []string) ApiMeContactFoldersListContactsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeContactFoldersListContactsRequest) Select_(select_ []string) ApiMeContactFoldersListContactsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeContactFoldersListContactsRequest) Expand(expand []string) ApiMeContactFoldersListContactsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeContactFoldersListContactsRequest) Execute() (CollectionOfContact, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersListContactsExecute(r)
}

/*
MeContactFoldersListContacts Get contacts from me

The contacts in the folder. Navigation property. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @return ApiMeContactFoldersListContactsRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersListContacts(ctx _context.Context, contactFolderId string) ApiMeContactFoldersListContactsRequest {
	return ApiMeContactFoldersListContactsRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
	}
}

// Execute executes the request
//  @return CollectionOfContact
func (a *MeContactFolderApiService) MeContactFoldersListContactsExecute(r ApiMeContactFoldersListContactsRequest) (CollectionOfContact, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersListContacts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersListMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeContactFoldersListMultiValueExtendedPropertiesRequest) Top(top int32) ApiMeContactFoldersListMultiValueExtendedPropertiesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeContactFoldersListMultiValueExtendedPropertiesRequest) Skip(skip int32) ApiMeContactFoldersListMultiValueExtendedPropertiesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeContactFoldersListMultiValueExtendedPropertiesRequest) Search(search string) ApiMeContactFoldersListMultiValueExtendedPropertiesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeContactFoldersListMultiValueExtendedPropertiesRequest) Filter(filter string) ApiMeContactFoldersListMultiValueExtendedPropertiesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeContactFoldersListMultiValueExtendedPropertiesRequest) Count(count bool) ApiMeContactFoldersListMultiValueExtendedPropertiesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeContactFoldersListMultiValueExtendedPropertiesRequest) Orderby(orderby []string) ApiMeContactFoldersListMultiValueExtendedPropertiesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeContactFoldersListMultiValueExtendedPropertiesRequest) Select_(select_ []string) ApiMeContactFoldersListMultiValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeContactFoldersListMultiValueExtendedPropertiesRequest) Expand(expand []string) ApiMeContactFoldersListMultiValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeContactFoldersListMultiValueExtendedPropertiesRequest) Execute() (CollectionOfMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersListMultiValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersListMultiValueExtendedProperties Get multiValueExtendedProperties from me

The collection of multi-value extended properties defined for the contactFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @return ApiMeContactFoldersListMultiValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersListMultiValueExtendedProperties(ctx _context.Context, contactFolderId string) ApiMeContactFoldersListMultiValueExtendedPropertiesRequest {
	return ApiMeContactFoldersListMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
	}
}

// Execute executes the request
//  @return CollectionOfMultiValueLegacyExtendedProperty
func (a *MeContactFolderApiService) MeContactFoldersListMultiValueExtendedPropertiesExecute(r ApiMeContactFoldersListMultiValueExtendedPropertiesRequest) (CollectionOfMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfMultiValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersListMultiValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/multiValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersListSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeContactFoldersListSingleValueExtendedPropertiesRequest) Top(top int32) ApiMeContactFoldersListSingleValueExtendedPropertiesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeContactFoldersListSingleValueExtendedPropertiesRequest) Skip(skip int32) ApiMeContactFoldersListSingleValueExtendedPropertiesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeContactFoldersListSingleValueExtendedPropertiesRequest) Search(search string) ApiMeContactFoldersListSingleValueExtendedPropertiesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeContactFoldersListSingleValueExtendedPropertiesRequest) Filter(filter string) ApiMeContactFoldersListSingleValueExtendedPropertiesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeContactFoldersListSingleValueExtendedPropertiesRequest) Count(count bool) ApiMeContactFoldersListSingleValueExtendedPropertiesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeContactFoldersListSingleValueExtendedPropertiesRequest) Orderby(orderby []string) ApiMeContactFoldersListSingleValueExtendedPropertiesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeContactFoldersListSingleValueExtendedPropertiesRequest) Select_(select_ []string) ApiMeContactFoldersListSingleValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeContactFoldersListSingleValueExtendedPropertiesRequest) Expand(expand []string) ApiMeContactFoldersListSingleValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeContactFoldersListSingleValueExtendedPropertiesRequest) Execute() (CollectionOfSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersListSingleValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersListSingleValueExtendedProperties Get singleValueExtendedProperties from me

The collection of single-value extended properties defined for the contactFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @return ApiMeContactFoldersListSingleValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersListSingleValueExtendedProperties(ctx _context.Context, contactFolderId string) ApiMeContactFoldersListSingleValueExtendedPropertiesRequest {
	return ApiMeContactFoldersListSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
	}
}

// Execute executes the request
//  @return CollectionOfSingleValueLegacyExtendedProperty
func (a *MeContactFolderApiService) MeContactFoldersListSingleValueExtendedPropertiesExecute(r ApiMeContactFoldersListSingleValueExtendedPropertiesRequest) (CollectionOfSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSingleValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersListSingleValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/singleValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersUpdateChildFoldersRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactFolderId1 string
	microsoftGraphContactFolder *MicrosoftGraphContactFolder
}

// New navigation property values
func (r ApiMeContactFoldersUpdateChildFoldersRequest) MicrosoftGraphContactFolder(microsoftGraphContactFolder MicrosoftGraphContactFolder) ApiMeContactFoldersUpdateChildFoldersRequest {
	r.microsoftGraphContactFolder = &microsoftGraphContactFolder
	return r
}

func (r ApiMeContactFoldersUpdateChildFoldersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersUpdateChildFoldersExecute(r)
}

/*
MeContactFoldersUpdateChildFolders Update the navigation property childFolders in me

The collection of child folders in the folder. Navigation property. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactFolderId1 key: id of contactFolder
 @return ApiMeContactFoldersUpdateChildFoldersRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersUpdateChildFolders(ctx _context.Context, contactFolderId string, contactFolderId1 string) ApiMeContactFoldersUpdateChildFoldersRequest {
	return ApiMeContactFoldersUpdateChildFoldersRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactFolderId1: contactFolderId1,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersUpdateChildFoldersExecute(r ApiMeContactFoldersUpdateChildFoldersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersUpdateChildFolders")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/childFolders/{contactFolder-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id1"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphContactFolder == nil {
		return nil, reportError("microsoftGraphContactFolder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphContactFolder
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersUpdateContactsRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	contactId string
	microsoftGraphContact *MicrosoftGraphContact
}

// New navigation property values
func (r ApiMeContactFoldersUpdateContactsRequest) MicrosoftGraphContact(microsoftGraphContact MicrosoftGraphContact) ApiMeContactFoldersUpdateContactsRequest {
	r.microsoftGraphContact = &microsoftGraphContact
	return r
}

func (r ApiMeContactFoldersUpdateContactsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersUpdateContactsExecute(r)
}

/*
MeContactFoldersUpdateContacts Update the navigation property contacts in me

The contacts in the folder. Navigation property. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param contactId key: id of contact
 @return ApiMeContactFoldersUpdateContactsRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersUpdateContacts(ctx _context.Context, contactFolderId string, contactId string) ApiMeContactFoldersUpdateContactsRequest {
	return ApiMeContactFoldersUpdateContactsRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		contactId: contactId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersUpdateContactsExecute(r ApiMeContactFoldersUpdateContactsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersUpdateContacts")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/{contact-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contact-id"+"}", _neturl.PathEscape(parameterToString(r.contactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphContact == nil {
		return nil, reportError("microsoftGraphContact is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphContact
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersUpdateMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	multiValueLegacyExtendedPropertyId string
	microsoftGraphMultiValueLegacyExtendedProperty *MicrosoftGraphMultiValueLegacyExtendedProperty
}

// New navigation property values
func (r ApiMeContactFoldersUpdateMultiValueExtendedPropertiesRequest) MicrosoftGraphMultiValueLegacyExtendedProperty(microsoftGraphMultiValueLegacyExtendedProperty MicrosoftGraphMultiValueLegacyExtendedProperty) ApiMeContactFoldersUpdateMultiValueExtendedPropertiesRequest {
	r.microsoftGraphMultiValueLegacyExtendedProperty = &microsoftGraphMultiValueLegacyExtendedProperty
	return r
}

func (r ApiMeContactFoldersUpdateMultiValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersUpdateMultiValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersUpdateMultiValueExtendedProperties Update the navigation property multiValueExtendedProperties in me

The collection of multi-value extended properties defined for the contactFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty
 @return ApiMeContactFoldersUpdateMultiValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersUpdateMultiValueExtendedProperties(ctx _context.Context, contactFolderId string, multiValueLegacyExtendedPropertyId string) ApiMeContactFoldersUpdateMultiValueExtendedPropertiesRequest {
	return ApiMeContactFoldersUpdateMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		multiValueLegacyExtendedPropertyId: multiValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersUpdateMultiValueExtendedPropertiesExecute(r ApiMeContactFoldersUpdateMultiValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersUpdateMultiValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"multiValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.multiValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMultiValueLegacyExtendedProperty == nil {
		return nil, reportError("microsoftGraphMultiValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMultiValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeContactFoldersUpdateSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	singleValueLegacyExtendedPropertyId string
	microsoftGraphSingleValueLegacyExtendedProperty *MicrosoftGraphSingleValueLegacyExtendedProperty
}

// New navigation property values
func (r ApiMeContactFoldersUpdateSingleValueExtendedPropertiesRequest) MicrosoftGraphSingleValueLegacyExtendedProperty(microsoftGraphSingleValueLegacyExtendedProperty MicrosoftGraphSingleValueLegacyExtendedProperty) ApiMeContactFoldersUpdateSingleValueExtendedPropertiesRequest {
	r.microsoftGraphSingleValueLegacyExtendedProperty = &microsoftGraphSingleValueLegacyExtendedProperty
	return r
}

func (r ApiMeContactFoldersUpdateSingleValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersUpdateSingleValueExtendedPropertiesExecute(r)
}

/*
MeContactFoldersUpdateSingleValueExtendedProperties Update the navigation property singleValueExtendedProperties in me

The collection of single-value extended properties defined for the contactFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty
 @return ApiMeContactFoldersUpdateSingleValueExtendedPropertiesRequest
*/
func (a *MeContactFolderApiService) MeContactFoldersUpdateSingleValueExtendedProperties(ctx _context.Context, contactFolderId string, singleValueLegacyExtendedPropertyId string) ApiMeContactFoldersUpdateSingleValueExtendedPropertiesRequest {
	return ApiMeContactFoldersUpdateSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
		singleValueLegacyExtendedPropertyId: singleValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeContactFoldersUpdateSingleValueExtendedPropertiesExecute(r ApiMeContactFoldersUpdateSingleValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeContactFoldersUpdateSingleValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"singleValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.singleValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSingleValueLegacyExtendedProperty == nil {
		return nil, reportError("microsoftGraphSingleValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSingleValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeCreateContactFoldersRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	microsoftGraphContactFolder *MicrosoftGraphContactFolder
}

// New navigation property
func (r ApiMeCreateContactFoldersRequest) MicrosoftGraphContactFolder(microsoftGraphContactFolder MicrosoftGraphContactFolder) ApiMeCreateContactFoldersRequest {
	r.microsoftGraphContactFolder = &microsoftGraphContactFolder
	return r
}

func (r ApiMeCreateContactFoldersRequest) Execute() (MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	return r.ApiService.MeCreateContactFoldersExecute(r)
}

/*
MeCreateContactFolders Create new navigation property to contactFolders for me

The user's contacts folders. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeCreateContactFoldersRequest
*/
func (a *MeContactFolderApiService) MeCreateContactFolders(ctx _context.Context) ApiMeCreateContactFoldersRequest {
	return ApiMeCreateContactFoldersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphContactFolder
func (a *MeContactFolderApiService) MeCreateContactFoldersExecute(r ApiMeCreateContactFoldersRequest) (MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphContactFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeCreateContactFolders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphContactFolder == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphContactFolder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphContactFolder
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeDeleteContactFoldersRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	ifMatch *string
}

// ETag
func (r ApiMeDeleteContactFoldersRequest) IfMatch(ifMatch string) ApiMeDeleteContactFoldersRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeDeleteContactFoldersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeDeleteContactFoldersExecute(r)
}

/*
MeDeleteContactFolders Delete navigation property contactFolders for me

The user's contacts folders. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @return ApiMeDeleteContactFoldersRequest
*/
func (a *MeContactFolderApiService) MeDeleteContactFolders(ctx _context.Context, contactFolderId string) ApiMeDeleteContactFoldersRequest {
	return ApiMeDeleteContactFoldersRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeDeleteContactFoldersExecute(r ApiMeDeleteContactFoldersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeDeleteContactFolders")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeGetContactFoldersRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	select_ *[]string
}

// Select properties to be returned
func (r ApiMeGetContactFoldersRequest) Select_(select_ []string) ApiMeGetContactFoldersRequest {
	r.select_ = &select_
	return r
}

func (r ApiMeGetContactFoldersRequest) Execute() (MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	return r.ApiService.MeGetContactFoldersExecute(r)
}

/*
MeGetContactFolders Get contactFolders from me

The user's contacts folders. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @return ApiMeGetContactFoldersRequest
*/
func (a *MeContactFolderApiService) MeGetContactFolders(ctx _context.Context, contactFolderId string) ApiMeGetContactFoldersRequest {
	return ApiMeGetContactFoldersRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphContactFolder
func (a *MeContactFolderApiService) MeGetContactFoldersExecute(r ApiMeGetContactFoldersRequest) (MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphContactFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeGetContactFolders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeListContactFoldersRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	top *int32
	skip *int32
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
}

// Show only the first n items
func (r ApiMeListContactFoldersRequest) Top(top int32) ApiMeListContactFoldersRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeListContactFoldersRequest) Skip(skip int32) ApiMeListContactFoldersRequest {
	r.skip = &skip
	return r
}
// Filter items by property values
func (r ApiMeListContactFoldersRequest) Filter(filter string) ApiMeListContactFoldersRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeListContactFoldersRequest) Count(count bool) ApiMeListContactFoldersRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeListContactFoldersRequest) Orderby(orderby []string) ApiMeListContactFoldersRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeListContactFoldersRequest) Select_(select_ []string) ApiMeListContactFoldersRequest {
	r.select_ = &select_
	return r
}

func (r ApiMeListContactFoldersRequest) Execute() (CollectionOfContactFolder, *_nethttp.Response, error) {
	return r.ApiService.MeListContactFoldersExecute(r)
}

/*
MeListContactFolders Get contactFolders from me

The user's contacts folders. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeListContactFoldersRequest
*/
func (a *MeContactFolderApiService) MeListContactFolders(ctx _context.Context) ApiMeListContactFoldersRequest {
	return ApiMeListContactFoldersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfContactFolder
func (a *MeContactFolderApiService) MeListContactFoldersExecute(r ApiMeListContactFoldersRequest) (CollectionOfContactFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfContactFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeListContactFolders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeUpdateContactFoldersRequest struct {
	ctx _context.Context
	ApiService *MeContactFolderApiService
	contactFolderId string
	microsoftGraphContactFolder *MicrosoftGraphContactFolder
}

// New navigation property values
func (r ApiMeUpdateContactFoldersRequest) MicrosoftGraphContactFolder(microsoftGraphContactFolder MicrosoftGraphContactFolder) ApiMeUpdateContactFoldersRequest {
	r.microsoftGraphContactFolder = &microsoftGraphContactFolder
	return r
}

func (r ApiMeUpdateContactFoldersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeUpdateContactFoldersExecute(r)
}

/*
MeUpdateContactFolders Update the navigation property contactFolders in me

The user's contacts folders. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @return ApiMeUpdateContactFoldersRequest
*/
func (a *MeContactFolderApiService) MeUpdateContactFolders(ctx _context.Context, contactFolderId string) ApiMeUpdateContactFoldersRequest {
	return ApiMeUpdateContactFoldersRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
	}
}

// Execute executes the request
func (a *MeContactFolderApiService) MeUpdateContactFoldersExecute(r ApiMeUpdateContactFoldersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeContactFolderApiService.MeUpdateContactFolders")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphContactFolder == nil {
		return nil, reportError("microsoftGraphContactFolder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphContactFolder
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
