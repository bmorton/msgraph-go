/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ChatsTeamsAppInstallationApiService ChatsTeamsAppInstallationApi service
type ChatsTeamsAppInstallationApiService service

type ApiChatsCreateInstalledAppsRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsAppInstallationApiService
	chatId string
	microsoftGraphTeamsAppInstallation *MicrosoftGraphTeamsAppInstallation
}

// New navigation property
func (r ApiChatsCreateInstalledAppsRequest) MicrosoftGraphTeamsAppInstallation(microsoftGraphTeamsAppInstallation MicrosoftGraphTeamsAppInstallation) ApiChatsCreateInstalledAppsRequest {
	r.microsoftGraphTeamsAppInstallation = &microsoftGraphTeamsAppInstallation
	return r
}

func (r ApiChatsCreateInstalledAppsRequest) Execute() (MicrosoftGraphTeamsAppInstallation, *_nethttp.Response, error) {
	return r.ApiService.ChatsCreateInstalledAppsExecute(r)
}

/*
ChatsCreateInstalledApps Create new navigation property to installedApps for chats

A collection of all the apps in the chat. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @return ApiChatsCreateInstalledAppsRequest
*/
func (a *ChatsTeamsAppInstallationApiService) ChatsCreateInstalledApps(ctx _context.Context, chatId string) ApiChatsCreateInstalledAppsRequest {
	return ApiChatsCreateInstalledAppsRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamsAppInstallation
func (a *ChatsTeamsAppInstallationApiService) ChatsCreateInstalledAppsExecute(r ApiChatsCreateInstalledAppsRequest) (MicrosoftGraphTeamsAppInstallation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamsAppInstallation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsAppInstallationApiService.ChatsCreateInstalledApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/installedApps"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTeamsAppInstallation == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphTeamsAppInstallation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTeamsAppInstallation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatsDeleteInstalledAppsRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsAppInstallationApiService
	chatId string
	teamsAppInstallationId string
	ifMatch *string
}

// ETag
func (r ApiChatsDeleteInstalledAppsRequest) IfMatch(ifMatch string) ApiChatsDeleteInstalledAppsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiChatsDeleteInstalledAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ChatsDeleteInstalledAppsExecute(r)
}

/*
ChatsDeleteInstalledApps Delete navigation property installedApps for chats

A collection of all the apps in the chat. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiChatsDeleteInstalledAppsRequest
*/
func (a *ChatsTeamsAppInstallationApiService) ChatsDeleteInstalledApps(ctx _context.Context, chatId string, teamsAppInstallationId string) ApiChatsDeleteInstalledAppsRequest {
	return ApiChatsDeleteInstalledAppsRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
func (a *ChatsTeamsAppInstallationApiService) ChatsDeleteInstalledAppsExecute(r ApiChatsDeleteInstalledAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsAppInstallationApiService.ChatsDeleteInstalledApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/installedApps/{teamsAppInstallation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChatsGetInstalledAppsRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsAppInstallationApiService
	chatId string
	teamsAppInstallationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiChatsGetInstalledAppsRequest) Select_(select_ []string) ApiChatsGetInstalledAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiChatsGetInstalledAppsRequest) Expand(expand []string) ApiChatsGetInstalledAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiChatsGetInstalledAppsRequest) Execute() (MicrosoftGraphTeamsAppInstallation, *_nethttp.Response, error) {
	return r.ApiService.ChatsGetInstalledAppsExecute(r)
}

/*
ChatsGetInstalledApps Get installedApps from chats

A collection of all the apps in the chat. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiChatsGetInstalledAppsRequest
*/
func (a *ChatsTeamsAppInstallationApiService) ChatsGetInstalledApps(ctx _context.Context, chatId string, teamsAppInstallationId string) ApiChatsGetInstalledAppsRequest {
	return ApiChatsGetInstalledAppsRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamsAppInstallation
func (a *ChatsTeamsAppInstallationApiService) ChatsGetInstalledAppsExecute(r ApiChatsGetInstalledAppsRequest) (MicrosoftGraphTeamsAppInstallation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamsAppInstallation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsAppInstallationApiService.ChatsGetInstalledApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/installedApps/{teamsAppInstallation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatsInstalledAppsDeleteRefTeamsAppRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsAppInstallationApiService
	chatId string
	teamsAppInstallationId string
	ifMatch *string
}

// ETag
func (r ApiChatsInstalledAppsDeleteRefTeamsAppRequest) IfMatch(ifMatch string) ApiChatsInstalledAppsDeleteRefTeamsAppRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiChatsInstalledAppsDeleteRefTeamsAppRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ChatsInstalledAppsDeleteRefTeamsAppExecute(r)
}

/*
ChatsInstalledAppsDeleteRefTeamsApp Delete ref of navigation property teamsApp for chats

The app that is installed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiChatsInstalledAppsDeleteRefTeamsAppRequest
*/
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsDeleteRefTeamsApp(ctx _context.Context, chatId string, teamsAppInstallationId string) ApiChatsInstalledAppsDeleteRefTeamsAppRequest {
	return ApiChatsInstalledAppsDeleteRefTeamsAppRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsDeleteRefTeamsAppExecute(r ApiChatsInstalledAppsDeleteRefTeamsAppRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsAppInstallationApiService.ChatsInstalledAppsDeleteRefTeamsApp")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/installedApps/{teamsAppInstallation-id}/teamsApp/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChatsInstalledAppsDeleteRefTeamsAppDefinitionRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsAppInstallationApiService
	chatId string
	teamsAppInstallationId string
	ifMatch *string
}

// ETag
func (r ApiChatsInstalledAppsDeleteRefTeamsAppDefinitionRequest) IfMatch(ifMatch string) ApiChatsInstalledAppsDeleteRefTeamsAppDefinitionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiChatsInstalledAppsDeleteRefTeamsAppDefinitionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ChatsInstalledAppsDeleteRefTeamsAppDefinitionExecute(r)
}

/*
ChatsInstalledAppsDeleteRefTeamsAppDefinition Delete ref of navigation property teamsAppDefinition for chats

The details of this version of the app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiChatsInstalledAppsDeleteRefTeamsAppDefinitionRequest
*/
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsDeleteRefTeamsAppDefinition(ctx _context.Context, chatId string, teamsAppInstallationId string) ApiChatsInstalledAppsDeleteRefTeamsAppDefinitionRequest {
	return ApiChatsInstalledAppsDeleteRefTeamsAppDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsDeleteRefTeamsAppDefinitionExecute(r ApiChatsInstalledAppsDeleteRefTeamsAppDefinitionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsAppInstallationApiService.ChatsInstalledAppsDeleteRefTeamsAppDefinition")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/installedApps/{teamsAppInstallation-id}/teamsAppDefinition/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChatsInstalledAppsGetRefTeamsAppRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsAppInstallationApiService
	chatId string
	teamsAppInstallationId string
}


func (r ApiChatsInstalledAppsGetRefTeamsAppRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ChatsInstalledAppsGetRefTeamsAppExecute(r)
}

/*
ChatsInstalledAppsGetRefTeamsApp Get ref of teamsApp from chats

The app that is installed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiChatsInstalledAppsGetRefTeamsAppRequest
*/
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsGetRefTeamsApp(ctx _context.Context, chatId string, teamsAppInstallationId string) ApiChatsInstalledAppsGetRefTeamsAppRequest {
	return ApiChatsInstalledAppsGetRefTeamsAppRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
//  @return string
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsGetRefTeamsAppExecute(r ApiChatsInstalledAppsGetRefTeamsAppRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsAppInstallationApiService.ChatsInstalledAppsGetRefTeamsApp")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/installedApps/{teamsAppInstallation-id}/teamsApp/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatsInstalledAppsGetRefTeamsAppDefinitionRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsAppInstallationApiService
	chatId string
	teamsAppInstallationId string
}


func (r ApiChatsInstalledAppsGetRefTeamsAppDefinitionRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ChatsInstalledAppsGetRefTeamsAppDefinitionExecute(r)
}

/*
ChatsInstalledAppsGetRefTeamsAppDefinition Get ref of teamsAppDefinition from chats

The details of this version of the app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiChatsInstalledAppsGetRefTeamsAppDefinitionRequest
*/
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsGetRefTeamsAppDefinition(ctx _context.Context, chatId string, teamsAppInstallationId string) ApiChatsInstalledAppsGetRefTeamsAppDefinitionRequest {
	return ApiChatsInstalledAppsGetRefTeamsAppDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
//  @return string
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsGetRefTeamsAppDefinitionExecute(r ApiChatsInstalledAppsGetRefTeamsAppDefinitionRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsAppInstallationApiService.ChatsInstalledAppsGetRefTeamsAppDefinition")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/installedApps/{teamsAppInstallation-id}/teamsAppDefinition/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatsInstalledAppsGetTeamsAppRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsAppInstallationApiService
	chatId string
	teamsAppInstallationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiChatsInstalledAppsGetTeamsAppRequest) Select_(select_ []string) ApiChatsInstalledAppsGetTeamsAppRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiChatsInstalledAppsGetTeamsAppRequest) Expand(expand []string) ApiChatsInstalledAppsGetTeamsAppRequest {
	r.expand = &expand
	return r
}

func (r ApiChatsInstalledAppsGetTeamsAppRequest) Execute() (MicrosoftGraphTeamsApp, *_nethttp.Response, error) {
	return r.ApiService.ChatsInstalledAppsGetTeamsAppExecute(r)
}

/*
ChatsInstalledAppsGetTeamsApp Get teamsApp from chats

The app that is installed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiChatsInstalledAppsGetTeamsAppRequest
*/
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsGetTeamsApp(ctx _context.Context, chatId string, teamsAppInstallationId string) ApiChatsInstalledAppsGetTeamsAppRequest {
	return ApiChatsInstalledAppsGetTeamsAppRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamsApp
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsGetTeamsAppExecute(r ApiChatsInstalledAppsGetTeamsAppRequest) (MicrosoftGraphTeamsApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamsApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsAppInstallationApiService.ChatsInstalledAppsGetTeamsApp")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/installedApps/{teamsAppInstallation-id}/teamsApp"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatsInstalledAppsGetTeamsAppDefinitionRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsAppInstallationApiService
	chatId string
	teamsAppInstallationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiChatsInstalledAppsGetTeamsAppDefinitionRequest) Select_(select_ []string) ApiChatsInstalledAppsGetTeamsAppDefinitionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiChatsInstalledAppsGetTeamsAppDefinitionRequest) Expand(expand []string) ApiChatsInstalledAppsGetTeamsAppDefinitionRequest {
	r.expand = &expand
	return r
}

func (r ApiChatsInstalledAppsGetTeamsAppDefinitionRequest) Execute() (MicrosoftGraphTeamsAppDefinition, *_nethttp.Response, error) {
	return r.ApiService.ChatsInstalledAppsGetTeamsAppDefinitionExecute(r)
}

/*
ChatsInstalledAppsGetTeamsAppDefinition Get teamsAppDefinition from chats

The details of this version of the app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiChatsInstalledAppsGetTeamsAppDefinitionRequest
*/
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsGetTeamsAppDefinition(ctx _context.Context, chatId string, teamsAppInstallationId string) ApiChatsInstalledAppsGetTeamsAppDefinitionRequest {
	return ApiChatsInstalledAppsGetTeamsAppDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamsAppDefinition
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsGetTeamsAppDefinitionExecute(r ApiChatsInstalledAppsGetTeamsAppDefinitionRequest) (MicrosoftGraphTeamsAppDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamsAppDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsAppInstallationApiService.ChatsInstalledAppsGetTeamsAppDefinition")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/installedApps/{teamsAppInstallation-id}/teamsAppDefinition"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatsInstalledAppsUpdateRefTeamsAppRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsAppInstallationApiService
	chatId string
	teamsAppInstallationId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref values
func (r ApiChatsInstalledAppsUpdateRefTeamsAppRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiChatsInstalledAppsUpdateRefTeamsAppRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiChatsInstalledAppsUpdateRefTeamsAppRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ChatsInstalledAppsUpdateRefTeamsAppExecute(r)
}

/*
ChatsInstalledAppsUpdateRefTeamsApp Update the ref of navigation property teamsApp in chats

The app that is installed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiChatsInstalledAppsUpdateRefTeamsAppRequest
*/
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsUpdateRefTeamsApp(ctx _context.Context, chatId string, teamsAppInstallationId string) ApiChatsInstalledAppsUpdateRefTeamsAppRequest {
	return ApiChatsInstalledAppsUpdateRefTeamsAppRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsUpdateRefTeamsAppExecute(r ApiChatsInstalledAppsUpdateRefTeamsAppRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsAppInstallationApiService.ChatsInstalledAppsUpdateRefTeamsApp")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/installedApps/{teamsAppInstallation-id}/teamsApp/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChatsInstalledAppsUpdateRefTeamsAppDefinitionRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsAppInstallationApiService
	chatId string
	teamsAppInstallationId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref values
func (r ApiChatsInstalledAppsUpdateRefTeamsAppDefinitionRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiChatsInstalledAppsUpdateRefTeamsAppDefinitionRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiChatsInstalledAppsUpdateRefTeamsAppDefinitionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ChatsInstalledAppsUpdateRefTeamsAppDefinitionExecute(r)
}

/*
ChatsInstalledAppsUpdateRefTeamsAppDefinition Update the ref of navigation property teamsAppDefinition in chats

The details of this version of the app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiChatsInstalledAppsUpdateRefTeamsAppDefinitionRequest
*/
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsUpdateRefTeamsAppDefinition(ctx _context.Context, chatId string, teamsAppInstallationId string) ApiChatsInstalledAppsUpdateRefTeamsAppDefinitionRequest {
	return ApiChatsInstalledAppsUpdateRefTeamsAppDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
func (a *ChatsTeamsAppInstallationApiService) ChatsInstalledAppsUpdateRefTeamsAppDefinitionExecute(r ApiChatsInstalledAppsUpdateRefTeamsAppDefinitionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsAppInstallationApiService.ChatsInstalledAppsUpdateRefTeamsAppDefinition")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/installedApps/{teamsAppInstallation-id}/teamsAppDefinition/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChatsListInstalledAppsRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsAppInstallationApiService
	chatId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiChatsListInstalledAppsRequest) Top(top int32) ApiChatsListInstalledAppsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiChatsListInstalledAppsRequest) Skip(skip int32) ApiChatsListInstalledAppsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiChatsListInstalledAppsRequest) Search(search string) ApiChatsListInstalledAppsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiChatsListInstalledAppsRequest) Filter(filter string) ApiChatsListInstalledAppsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiChatsListInstalledAppsRequest) Count(count bool) ApiChatsListInstalledAppsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiChatsListInstalledAppsRequest) Orderby(orderby []string) ApiChatsListInstalledAppsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiChatsListInstalledAppsRequest) Select_(select_ []string) ApiChatsListInstalledAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiChatsListInstalledAppsRequest) Expand(expand []string) ApiChatsListInstalledAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiChatsListInstalledAppsRequest) Execute() (CollectionOfTeamsAppInstallation, *_nethttp.Response, error) {
	return r.ApiService.ChatsListInstalledAppsExecute(r)
}

/*
ChatsListInstalledApps Get installedApps from chats

A collection of all the apps in the chat. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @return ApiChatsListInstalledAppsRequest
*/
func (a *ChatsTeamsAppInstallationApiService) ChatsListInstalledApps(ctx _context.Context, chatId string) ApiChatsListInstalledAppsRequest {
	return ApiChatsListInstalledAppsRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
	}
}

// Execute executes the request
//  @return CollectionOfTeamsAppInstallation
func (a *ChatsTeamsAppInstallationApiService) ChatsListInstalledAppsExecute(r ApiChatsListInstalledAppsRequest) (CollectionOfTeamsAppInstallation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfTeamsAppInstallation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsAppInstallationApiService.ChatsListInstalledApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/installedApps"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatsUpdateInstalledAppsRequest struct {
	ctx _context.Context
	ApiService *ChatsTeamsAppInstallationApiService
	chatId string
	teamsAppInstallationId string
	microsoftGraphTeamsAppInstallation *MicrosoftGraphTeamsAppInstallation
}

// New navigation property values
func (r ApiChatsUpdateInstalledAppsRequest) MicrosoftGraphTeamsAppInstallation(microsoftGraphTeamsAppInstallation MicrosoftGraphTeamsAppInstallation) ApiChatsUpdateInstalledAppsRequest {
	r.microsoftGraphTeamsAppInstallation = &microsoftGraphTeamsAppInstallation
	return r
}

func (r ApiChatsUpdateInstalledAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ChatsUpdateInstalledAppsExecute(r)
}

/*
ChatsUpdateInstalledApps Update the navigation property installedApps in chats

A collection of all the apps in the chat. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiChatsUpdateInstalledAppsRequest
*/
func (a *ChatsTeamsAppInstallationApiService) ChatsUpdateInstalledApps(ctx _context.Context, chatId string, teamsAppInstallationId string) ApiChatsUpdateInstalledAppsRequest {
	return ApiChatsUpdateInstalledAppsRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
func (a *ChatsTeamsAppInstallationApiService) ChatsUpdateInstalledAppsExecute(r ApiChatsUpdateInstalledAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsTeamsAppInstallationApiService.ChatsUpdateInstalledApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/installedApps/{teamsAppInstallation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTeamsAppInstallation == nil {
		return nil, reportError("microsoftGraphTeamsAppInstallation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTeamsAppInstallation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
