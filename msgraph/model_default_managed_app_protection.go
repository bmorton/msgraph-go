/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// DefaultManagedAppProtection Policy used to configure detailed management settings for a specified set of apps for all users not targeted by a TargetedManagedAppProtection Policy
type DefaultManagedAppProtection struct {
	// Type of encryption which should be used for data in a managed app. (iOS Only). Possible values are: useDeviceSettings, afterDeviceRestart, whenDeviceLockedExceptOpenFiles, whenDeviceLocked.
	AppDataEncryptionType AnyOfmicrosoftGraphManagedAppDataEncryptionType `json:"appDataEncryptionType,omitempty"`
	// A set of string key and string value pairs to be sent to the affected users, unalterned by this service
	CustomSettings *[]MicrosoftGraphKeyValuePair `json:"customSettings,omitempty"`
	// Count of apps to which the current policy is deployed.
	DeployedAppCount *int32 `json:"deployedAppCount,omitempty"`
	// When this setting is enabled, app level encryption is disabled if device level encryption is enabled. (Android only)
	DisableAppEncryptionIfDeviceEncryptionIsEnabled *bool `json:"disableAppEncryptionIfDeviceEncryptionIsEnabled,omitempty"`
	// Indicates whether managed-app data should be encrypted. (Android only)
	EncryptAppData *bool `json:"encryptAppData,omitempty"`
	// Indicates whether use of the FaceID is allowed in place of a pin if PinRequired is set to True. (iOS Only)
	FaceIdBlocked *bool `json:"faceIdBlocked,omitempty"`
	// Define the oldest required Android security patch level a user can have to gain secure access to the app. (Android only)
	MinimumRequiredPatchVersion NullableString `json:"minimumRequiredPatchVersion,omitempty"`
	// Versions less than the specified version will block the managed app from accessing company data. (iOS Only)
	MinimumRequiredSdkVersion NullableString `json:"minimumRequiredSdkVersion,omitempty"`
	// Define the oldest recommended Android security patch level a user can have for secure access to the app. (Android only)
	MinimumWarningPatchVersion NullableString `json:"minimumWarningPatchVersion,omitempty"`
	// Indicates whether screen capture is blocked. (Android only)
	ScreenCaptureBlocked *bool `json:"screenCaptureBlocked,omitempty"`
	// List of apps to which the policy is deployed.
	Apps *[]MicrosoftGraphManagedMobileApp `json:"apps,omitempty"`
	// Navigation property to deployment summary of the configuration.
	DeploymentSummary AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary `json:"deploymentSummary,omitempty"`
}

// NewDefaultManagedAppProtection instantiates a new DefaultManagedAppProtection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultManagedAppProtection() *DefaultManagedAppProtection {
	this := DefaultManagedAppProtection{}
	return &this
}

// NewDefaultManagedAppProtectionWithDefaults instantiates a new DefaultManagedAppProtection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultManagedAppProtectionWithDefaults() *DefaultManagedAppProtection {
	this := DefaultManagedAppProtection{}
	return &this
}

// GetAppDataEncryptionType returns the AppDataEncryptionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DefaultManagedAppProtection) GetAppDataEncryptionType() AnyOfmicrosoftGraphManagedAppDataEncryptionType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphManagedAppDataEncryptionType
		return ret
	}
	return o.AppDataEncryptionType
}

// GetAppDataEncryptionTypeOk returns a tuple with the AppDataEncryptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DefaultManagedAppProtection) GetAppDataEncryptionTypeOk() (*AnyOfmicrosoftGraphManagedAppDataEncryptionType, bool) {
	if o == nil || o.AppDataEncryptionType == nil {
		return nil, false
	}
	return &o.AppDataEncryptionType, true
}

// HasAppDataEncryptionType returns a boolean if a field has been set.
func (o *DefaultManagedAppProtection) HasAppDataEncryptionType() bool {
	if o != nil && o.AppDataEncryptionType != nil {
		return true
	}

	return false
}

// SetAppDataEncryptionType gets a reference to the given AnyOfmicrosoftGraphManagedAppDataEncryptionType and assigns it to the AppDataEncryptionType field.
func (o *DefaultManagedAppProtection) SetAppDataEncryptionType(v AnyOfmicrosoftGraphManagedAppDataEncryptionType) {
	o.AppDataEncryptionType = v
}

// GetCustomSettings returns the CustomSettings field value if set, zero value otherwise.
func (o *DefaultManagedAppProtection) GetCustomSettings() []MicrosoftGraphKeyValuePair {
	if o == nil || o.CustomSettings == nil {
		var ret []MicrosoftGraphKeyValuePair
		return ret
	}
	return *o.CustomSettings
}

// GetCustomSettingsOk returns a tuple with the CustomSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultManagedAppProtection) GetCustomSettingsOk() (*[]MicrosoftGraphKeyValuePair, bool) {
	if o == nil || o.CustomSettings == nil {
		return nil, false
	}
	return o.CustomSettings, true
}

// HasCustomSettings returns a boolean if a field has been set.
func (o *DefaultManagedAppProtection) HasCustomSettings() bool {
	if o != nil && o.CustomSettings != nil {
		return true
	}

	return false
}

// SetCustomSettings gets a reference to the given []MicrosoftGraphKeyValuePair and assigns it to the CustomSettings field.
func (o *DefaultManagedAppProtection) SetCustomSettings(v []MicrosoftGraphKeyValuePair) {
	o.CustomSettings = &v
}

// GetDeployedAppCount returns the DeployedAppCount field value if set, zero value otherwise.
func (o *DefaultManagedAppProtection) GetDeployedAppCount() int32 {
	if o == nil || o.DeployedAppCount == nil {
		var ret int32
		return ret
	}
	return *o.DeployedAppCount
}

// GetDeployedAppCountOk returns a tuple with the DeployedAppCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultManagedAppProtection) GetDeployedAppCountOk() (*int32, bool) {
	if o == nil || o.DeployedAppCount == nil {
		return nil, false
	}
	return o.DeployedAppCount, true
}

// HasDeployedAppCount returns a boolean if a field has been set.
func (o *DefaultManagedAppProtection) HasDeployedAppCount() bool {
	if o != nil && o.DeployedAppCount != nil {
		return true
	}

	return false
}

// SetDeployedAppCount gets a reference to the given int32 and assigns it to the DeployedAppCount field.
func (o *DefaultManagedAppProtection) SetDeployedAppCount(v int32) {
	o.DeployedAppCount = &v
}

// GetDisableAppEncryptionIfDeviceEncryptionIsEnabled returns the DisableAppEncryptionIfDeviceEncryptionIsEnabled field value if set, zero value otherwise.
func (o *DefaultManagedAppProtection) GetDisableAppEncryptionIfDeviceEncryptionIsEnabled() bool {
	if o == nil || o.DisableAppEncryptionIfDeviceEncryptionIsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.DisableAppEncryptionIfDeviceEncryptionIsEnabled
}

// GetDisableAppEncryptionIfDeviceEncryptionIsEnabledOk returns a tuple with the DisableAppEncryptionIfDeviceEncryptionIsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultManagedAppProtection) GetDisableAppEncryptionIfDeviceEncryptionIsEnabledOk() (*bool, bool) {
	if o == nil || o.DisableAppEncryptionIfDeviceEncryptionIsEnabled == nil {
		return nil, false
	}
	return o.DisableAppEncryptionIfDeviceEncryptionIsEnabled, true
}

// HasDisableAppEncryptionIfDeviceEncryptionIsEnabled returns a boolean if a field has been set.
func (o *DefaultManagedAppProtection) HasDisableAppEncryptionIfDeviceEncryptionIsEnabled() bool {
	if o != nil && o.DisableAppEncryptionIfDeviceEncryptionIsEnabled != nil {
		return true
	}

	return false
}

// SetDisableAppEncryptionIfDeviceEncryptionIsEnabled gets a reference to the given bool and assigns it to the DisableAppEncryptionIfDeviceEncryptionIsEnabled field.
func (o *DefaultManagedAppProtection) SetDisableAppEncryptionIfDeviceEncryptionIsEnabled(v bool) {
	o.DisableAppEncryptionIfDeviceEncryptionIsEnabled = &v
}

// GetEncryptAppData returns the EncryptAppData field value if set, zero value otherwise.
func (o *DefaultManagedAppProtection) GetEncryptAppData() bool {
	if o == nil || o.EncryptAppData == nil {
		var ret bool
		return ret
	}
	return *o.EncryptAppData
}

// GetEncryptAppDataOk returns a tuple with the EncryptAppData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultManagedAppProtection) GetEncryptAppDataOk() (*bool, bool) {
	if o == nil || o.EncryptAppData == nil {
		return nil, false
	}
	return o.EncryptAppData, true
}

// HasEncryptAppData returns a boolean if a field has been set.
func (o *DefaultManagedAppProtection) HasEncryptAppData() bool {
	if o != nil && o.EncryptAppData != nil {
		return true
	}

	return false
}

// SetEncryptAppData gets a reference to the given bool and assigns it to the EncryptAppData field.
func (o *DefaultManagedAppProtection) SetEncryptAppData(v bool) {
	o.EncryptAppData = &v
}

// GetFaceIdBlocked returns the FaceIdBlocked field value if set, zero value otherwise.
func (o *DefaultManagedAppProtection) GetFaceIdBlocked() bool {
	if o == nil || o.FaceIdBlocked == nil {
		var ret bool
		return ret
	}
	return *o.FaceIdBlocked
}

// GetFaceIdBlockedOk returns a tuple with the FaceIdBlocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultManagedAppProtection) GetFaceIdBlockedOk() (*bool, bool) {
	if o == nil || o.FaceIdBlocked == nil {
		return nil, false
	}
	return o.FaceIdBlocked, true
}

// HasFaceIdBlocked returns a boolean if a field has been set.
func (o *DefaultManagedAppProtection) HasFaceIdBlocked() bool {
	if o != nil && o.FaceIdBlocked != nil {
		return true
	}

	return false
}

// SetFaceIdBlocked gets a reference to the given bool and assigns it to the FaceIdBlocked field.
func (o *DefaultManagedAppProtection) SetFaceIdBlocked(v bool) {
	o.FaceIdBlocked = &v
}

// GetMinimumRequiredPatchVersion returns the MinimumRequiredPatchVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DefaultManagedAppProtection) GetMinimumRequiredPatchVersion() string {
	if o == nil || o.MinimumRequiredPatchVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.MinimumRequiredPatchVersion.Get()
}

// GetMinimumRequiredPatchVersionOk returns a tuple with the MinimumRequiredPatchVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DefaultManagedAppProtection) GetMinimumRequiredPatchVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinimumRequiredPatchVersion.Get(), o.MinimumRequiredPatchVersion.IsSet()
}

// HasMinimumRequiredPatchVersion returns a boolean if a field has been set.
func (o *DefaultManagedAppProtection) HasMinimumRequiredPatchVersion() bool {
	if o != nil && o.MinimumRequiredPatchVersion.IsSet() {
		return true
	}

	return false
}

// SetMinimumRequiredPatchVersion gets a reference to the given NullableString and assigns it to the MinimumRequiredPatchVersion field.
func (o *DefaultManagedAppProtection) SetMinimumRequiredPatchVersion(v string) {
	o.MinimumRequiredPatchVersion.Set(&v)
}
// SetMinimumRequiredPatchVersionNil sets the value for MinimumRequiredPatchVersion to be an explicit nil
func (o *DefaultManagedAppProtection) SetMinimumRequiredPatchVersionNil() {
	o.MinimumRequiredPatchVersion.Set(nil)
}

// UnsetMinimumRequiredPatchVersion ensures that no value is present for MinimumRequiredPatchVersion, not even an explicit nil
func (o *DefaultManagedAppProtection) UnsetMinimumRequiredPatchVersion() {
	o.MinimumRequiredPatchVersion.Unset()
}

// GetMinimumRequiredSdkVersion returns the MinimumRequiredSdkVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DefaultManagedAppProtection) GetMinimumRequiredSdkVersion() string {
	if o == nil || o.MinimumRequiredSdkVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.MinimumRequiredSdkVersion.Get()
}

// GetMinimumRequiredSdkVersionOk returns a tuple with the MinimumRequiredSdkVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DefaultManagedAppProtection) GetMinimumRequiredSdkVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinimumRequiredSdkVersion.Get(), o.MinimumRequiredSdkVersion.IsSet()
}

// HasMinimumRequiredSdkVersion returns a boolean if a field has been set.
func (o *DefaultManagedAppProtection) HasMinimumRequiredSdkVersion() bool {
	if o != nil && o.MinimumRequiredSdkVersion.IsSet() {
		return true
	}

	return false
}

// SetMinimumRequiredSdkVersion gets a reference to the given NullableString and assigns it to the MinimumRequiredSdkVersion field.
func (o *DefaultManagedAppProtection) SetMinimumRequiredSdkVersion(v string) {
	o.MinimumRequiredSdkVersion.Set(&v)
}
// SetMinimumRequiredSdkVersionNil sets the value for MinimumRequiredSdkVersion to be an explicit nil
func (o *DefaultManagedAppProtection) SetMinimumRequiredSdkVersionNil() {
	o.MinimumRequiredSdkVersion.Set(nil)
}

// UnsetMinimumRequiredSdkVersion ensures that no value is present for MinimumRequiredSdkVersion, not even an explicit nil
func (o *DefaultManagedAppProtection) UnsetMinimumRequiredSdkVersion() {
	o.MinimumRequiredSdkVersion.Unset()
}

// GetMinimumWarningPatchVersion returns the MinimumWarningPatchVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DefaultManagedAppProtection) GetMinimumWarningPatchVersion() string {
	if o == nil || o.MinimumWarningPatchVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.MinimumWarningPatchVersion.Get()
}

// GetMinimumWarningPatchVersionOk returns a tuple with the MinimumWarningPatchVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DefaultManagedAppProtection) GetMinimumWarningPatchVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinimumWarningPatchVersion.Get(), o.MinimumWarningPatchVersion.IsSet()
}

// HasMinimumWarningPatchVersion returns a boolean if a field has been set.
func (o *DefaultManagedAppProtection) HasMinimumWarningPatchVersion() bool {
	if o != nil && o.MinimumWarningPatchVersion.IsSet() {
		return true
	}

	return false
}

// SetMinimumWarningPatchVersion gets a reference to the given NullableString and assigns it to the MinimumWarningPatchVersion field.
func (o *DefaultManagedAppProtection) SetMinimumWarningPatchVersion(v string) {
	o.MinimumWarningPatchVersion.Set(&v)
}
// SetMinimumWarningPatchVersionNil sets the value for MinimumWarningPatchVersion to be an explicit nil
func (o *DefaultManagedAppProtection) SetMinimumWarningPatchVersionNil() {
	o.MinimumWarningPatchVersion.Set(nil)
}

// UnsetMinimumWarningPatchVersion ensures that no value is present for MinimumWarningPatchVersion, not even an explicit nil
func (o *DefaultManagedAppProtection) UnsetMinimumWarningPatchVersion() {
	o.MinimumWarningPatchVersion.Unset()
}

// GetScreenCaptureBlocked returns the ScreenCaptureBlocked field value if set, zero value otherwise.
func (o *DefaultManagedAppProtection) GetScreenCaptureBlocked() bool {
	if o == nil || o.ScreenCaptureBlocked == nil {
		var ret bool
		return ret
	}
	return *o.ScreenCaptureBlocked
}

// GetScreenCaptureBlockedOk returns a tuple with the ScreenCaptureBlocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultManagedAppProtection) GetScreenCaptureBlockedOk() (*bool, bool) {
	if o == nil || o.ScreenCaptureBlocked == nil {
		return nil, false
	}
	return o.ScreenCaptureBlocked, true
}

// HasScreenCaptureBlocked returns a boolean if a field has been set.
func (o *DefaultManagedAppProtection) HasScreenCaptureBlocked() bool {
	if o != nil && o.ScreenCaptureBlocked != nil {
		return true
	}

	return false
}

// SetScreenCaptureBlocked gets a reference to the given bool and assigns it to the ScreenCaptureBlocked field.
func (o *DefaultManagedAppProtection) SetScreenCaptureBlocked(v bool) {
	o.ScreenCaptureBlocked = &v
}

// GetApps returns the Apps field value if set, zero value otherwise.
func (o *DefaultManagedAppProtection) GetApps() []MicrosoftGraphManagedMobileApp {
	if o == nil || o.Apps == nil {
		var ret []MicrosoftGraphManagedMobileApp
		return ret
	}
	return *o.Apps
}

// GetAppsOk returns a tuple with the Apps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultManagedAppProtection) GetAppsOk() (*[]MicrosoftGraphManagedMobileApp, bool) {
	if o == nil || o.Apps == nil {
		return nil, false
	}
	return o.Apps, true
}

// HasApps returns a boolean if a field has been set.
func (o *DefaultManagedAppProtection) HasApps() bool {
	if o != nil && o.Apps != nil {
		return true
	}

	return false
}

// SetApps gets a reference to the given []MicrosoftGraphManagedMobileApp and assigns it to the Apps field.
func (o *DefaultManagedAppProtection) SetApps(v []MicrosoftGraphManagedMobileApp) {
	o.Apps = &v
}

// GetDeploymentSummary returns the DeploymentSummary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DefaultManagedAppProtection) GetDeploymentSummary() AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary {
	if o == nil  {
		var ret AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary
		return ret
	}
	return o.DeploymentSummary
}

// GetDeploymentSummaryOk returns a tuple with the DeploymentSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DefaultManagedAppProtection) GetDeploymentSummaryOk() (*AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary, bool) {
	if o == nil || o.DeploymentSummary == nil {
		return nil, false
	}
	return &o.DeploymentSummary, true
}

// HasDeploymentSummary returns a boolean if a field has been set.
func (o *DefaultManagedAppProtection) HasDeploymentSummary() bool {
	if o != nil && o.DeploymentSummary != nil {
		return true
	}

	return false
}

// SetDeploymentSummary gets a reference to the given AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary and assigns it to the DeploymentSummary field.
func (o *DefaultManagedAppProtection) SetDeploymentSummary(v AnyOfmicrosoftGraphManagedAppPolicyDeploymentSummary) {
	o.DeploymentSummary = v
}

func (o DefaultManagedAppProtection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppDataEncryptionType != nil {
		toSerialize["appDataEncryptionType"] = o.AppDataEncryptionType
	}
	if o.CustomSettings != nil {
		toSerialize["customSettings"] = o.CustomSettings
	}
	if o.DeployedAppCount != nil {
		toSerialize["deployedAppCount"] = o.DeployedAppCount
	}
	if o.DisableAppEncryptionIfDeviceEncryptionIsEnabled != nil {
		toSerialize["disableAppEncryptionIfDeviceEncryptionIsEnabled"] = o.DisableAppEncryptionIfDeviceEncryptionIsEnabled
	}
	if o.EncryptAppData != nil {
		toSerialize["encryptAppData"] = o.EncryptAppData
	}
	if o.FaceIdBlocked != nil {
		toSerialize["faceIdBlocked"] = o.FaceIdBlocked
	}
	if o.MinimumRequiredPatchVersion.IsSet() {
		toSerialize["minimumRequiredPatchVersion"] = o.MinimumRequiredPatchVersion.Get()
	}
	if o.MinimumRequiredSdkVersion.IsSet() {
		toSerialize["minimumRequiredSdkVersion"] = o.MinimumRequiredSdkVersion.Get()
	}
	if o.MinimumWarningPatchVersion.IsSet() {
		toSerialize["minimumWarningPatchVersion"] = o.MinimumWarningPatchVersion.Get()
	}
	if o.ScreenCaptureBlocked != nil {
		toSerialize["screenCaptureBlocked"] = o.ScreenCaptureBlocked
	}
	if o.Apps != nil {
		toSerialize["apps"] = o.Apps
	}
	if o.DeploymentSummary != nil {
		toSerialize["deploymentSummary"] = o.DeploymentSummary
	}
	return json.Marshal(toSerialize)
}

type NullableDefaultManagedAppProtection struct {
	value *DefaultManagedAppProtection
	isSet bool
}

func (v NullableDefaultManagedAppProtection) Get() *DefaultManagedAppProtection {
	return v.value
}

func (v *NullableDefaultManagedAppProtection) Set(val *DefaultManagedAppProtection) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultManagedAppProtection) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultManagedAppProtection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultManagedAppProtection(val *DefaultManagedAppProtection) *NullableDefaultManagedAppProtection {
	return &NullableDefaultManagedAppProtection{value: val, isSet: true}
}

func (v NullableDefaultManagedAppProtection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultManagedAppProtection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


