/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceAppManagementManagedDeviceMobileAppConfigurationApiService DeviceAppManagementManagedDeviceMobileAppConfigurationApi service
type DeviceAppManagementManagedDeviceMobileAppConfigurationApiService service

type ApiDeviceAppManagementCreateMobileAppConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	microsoftGraphManagedDeviceMobileAppConfiguration *MicrosoftGraphManagedDeviceMobileAppConfiguration
}

// New navigation property
func (r ApiDeviceAppManagementCreateMobileAppConfigurationsRequest) MicrosoftGraphManagedDeviceMobileAppConfiguration(microsoftGraphManagedDeviceMobileAppConfiguration MicrosoftGraphManagedDeviceMobileAppConfiguration) ApiDeviceAppManagementCreateMobileAppConfigurationsRequest {
	r.microsoftGraphManagedDeviceMobileAppConfiguration = &microsoftGraphManagedDeviceMobileAppConfiguration
	return r
}

func (r ApiDeviceAppManagementCreateMobileAppConfigurationsRequest) Execute() (MicrosoftGraphManagedDeviceMobileAppConfiguration, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementCreateMobileAppConfigurationsExecute(r)
}

/*
DeviceAppManagementCreateMobileAppConfigurations Create new navigation property to mobileAppConfigurations for deviceAppManagement

The Managed Device Mobile Application Configurations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementCreateMobileAppConfigurationsRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementCreateMobileAppConfigurations(ctx _context.Context) ApiDeviceAppManagementCreateMobileAppConfigurationsRequest {
	return ApiDeviceAppManagementCreateMobileAppConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDeviceMobileAppConfiguration
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementCreateMobileAppConfigurationsExecute(r ApiDeviceAppManagementCreateMobileAppConfigurationsRequest) (MicrosoftGraphManagedDeviceMobileAppConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDeviceMobileAppConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementCreateMobileAppConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDeviceMobileAppConfiguration == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedDeviceMobileAppConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDeviceMobileAppConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDeleteMobileAppConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementDeleteMobileAppConfigurationsRequest) IfMatch(ifMatch string) ApiDeviceAppManagementDeleteMobileAppConfigurationsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementDeleteMobileAppConfigurationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDeleteMobileAppConfigurationsExecute(r)
}

/*
DeviceAppManagementDeleteMobileAppConfigurations Delete navigation property mobileAppConfigurations for deviceAppManagement

The Managed Device Mobile Application Configurations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementDeleteMobileAppConfigurationsRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementDeleteMobileAppConfigurations(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementDeleteMobileAppConfigurationsRequest {
	return ApiDeviceAppManagementDeleteMobileAppConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementDeleteMobileAppConfigurationsExecute(r ApiDeviceAppManagementDeleteMobileAppConfigurationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementDeleteMobileAppConfigurations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementGetMobileAppConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementGetMobileAppConfigurationsRequest) Select_(select_ []string) ApiDeviceAppManagementGetMobileAppConfigurationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementGetMobileAppConfigurationsRequest) Expand(expand []string) ApiDeviceAppManagementGetMobileAppConfigurationsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementGetMobileAppConfigurationsRequest) Execute() (MicrosoftGraphManagedDeviceMobileAppConfiguration, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementGetMobileAppConfigurationsExecute(r)
}

/*
DeviceAppManagementGetMobileAppConfigurations Get mobileAppConfigurations from deviceAppManagement

The Managed Device Mobile Application Configurations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementGetMobileAppConfigurationsRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementGetMobileAppConfigurations(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementGetMobileAppConfigurationsRequest {
	return ApiDeviceAppManagementGetMobileAppConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDeviceMobileAppConfiguration
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementGetMobileAppConfigurationsExecute(r ApiDeviceAppManagementGetMobileAppConfigurationsRequest) (MicrosoftGraphManagedDeviceMobileAppConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDeviceMobileAppConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementGetMobileAppConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementListMobileAppConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementListMobileAppConfigurationsRequest) Top(top int32) ApiDeviceAppManagementListMobileAppConfigurationsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementListMobileAppConfigurationsRequest) Skip(skip int32) ApiDeviceAppManagementListMobileAppConfigurationsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementListMobileAppConfigurationsRequest) Search(search string) ApiDeviceAppManagementListMobileAppConfigurationsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementListMobileAppConfigurationsRequest) Filter(filter string) ApiDeviceAppManagementListMobileAppConfigurationsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementListMobileAppConfigurationsRequest) Count(count bool) ApiDeviceAppManagementListMobileAppConfigurationsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementListMobileAppConfigurationsRequest) Orderby(orderby []string) ApiDeviceAppManagementListMobileAppConfigurationsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementListMobileAppConfigurationsRequest) Select_(select_ []string) ApiDeviceAppManagementListMobileAppConfigurationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementListMobileAppConfigurationsRequest) Expand(expand []string) ApiDeviceAppManagementListMobileAppConfigurationsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementListMobileAppConfigurationsRequest) Execute() (CollectionOfManagedDeviceMobileAppConfiguration, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementListMobileAppConfigurationsExecute(r)
}

/*
DeviceAppManagementListMobileAppConfigurations Get mobileAppConfigurations from deviceAppManagement

The Managed Device Mobile Application Configurations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementListMobileAppConfigurationsRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementListMobileAppConfigurations(ctx _context.Context) ApiDeviceAppManagementListMobileAppConfigurationsRequest {
	return ApiDeviceAppManagementListMobileAppConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfManagedDeviceMobileAppConfiguration
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementListMobileAppConfigurationsExecute(r ApiDeviceAppManagementListMobileAppConfigurationsRequest) (CollectionOfManagedDeviceMobileAppConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedDeviceMobileAppConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementListMobileAppConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsCreateAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	microsoftGraphManagedDeviceMobileAppConfigurationAssignment *MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment
}

// New navigation property
func (r ApiDeviceAppManagementMobileAppConfigurationsCreateAssignmentsRequest) MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment(microsoftGraphManagedDeviceMobileAppConfigurationAssignment MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment) ApiDeviceAppManagementMobileAppConfigurationsCreateAssignmentsRequest {
	r.microsoftGraphManagedDeviceMobileAppConfigurationAssignment = &microsoftGraphManagedDeviceMobileAppConfigurationAssignment
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsCreateAssignmentsRequest) Execute() (MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsCreateAssignmentsExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsCreateAssignments Create new navigation property to assignments for deviceAppManagement

The list of group assignemenets for app configration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementMobileAppConfigurationsCreateAssignmentsRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsCreateAssignments(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementMobileAppConfigurationsCreateAssignmentsRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsCreateAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsCreateAssignmentsExecute(r ApiDeviceAppManagementMobileAppConfigurationsCreateAssignmentsRequest) (MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsCreateAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/assignments"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDeviceMobileAppConfigurationAssignment == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedDeviceMobileAppConfigurationAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDeviceMobileAppConfigurationAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsCreateDeviceStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	microsoftGraphManagedDeviceMobileAppConfigurationDeviceStatus *MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus
}

// New navigation property
func (r ApiDeviceAppManagementMobileAppConfigurationsCreateDeviceStatusesRequest) MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus(microsoftGraphManagedDeviceMobileAppConfigurationDeviceStatus MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus) ApiDeviceAppManagementMobileAppConfigurationsCreateDeviceStatusesRequest {
	r.microsoftGraphManagedDeviceMobileAppConfigurationDeviceStatus = &microsoftGraphManagedDeviceMobileAppConfigurationDeviceStatus
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsCreateDeviceStatusesRequest) Execute() (MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsCreateDeviceStatusesExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsCreateDeviceStatuses Create new navigation property to deviceStatuses for deviceAppManagement

List of ManagedDeviceMobileAppConfigurationDeviceStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementMobileAppConfigurationsCreateDeviceStatusesRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsCreateDeviceStatuses(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementMobileAppConfigurationsCreateDeviceStatusesRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsCreateDeviceStatusesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsCreateDeviceStatusesExecute(r ApiDeviceAppManagementMobileAppConfigurationsCreateDeviceStatusesRequest) (MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsCreateDeviceStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatuses"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDeviceMobileAppConfigurationDeviceStatus == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedDeviceMobileAppConfigurationDeviceStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDeviceMobileAppConfigurationDeviceStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsCreateUserStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	microsoftGraphManagedDeviceMobileAppConfigurationUserStatus *MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus
}

// New navigation property
func (r ApiDeviceAppManagementMobileAppConfigurationsCreateUserStatusesRequest) MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus(microsoftGraphManagedDeviceMobileAppConfigurationUserStatus MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus) ApiDeviceAppManagementMobileAppConfigurationsCreateUserStatusesRequest {
	r.microsoftGraphManagedDeviceMobileAppConfigurationUserStatus = &microsoftGraphManagedDeviceMobileAppConfigurationUserStatus
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsCreateUserStatusesRequest) Execute() (MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsCreateUserStatusesExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsCreateUserStatuses Create new navigation property to userStatuses for deviceAppManagement

List of ManagedDeviceMobileAppConfigurationUserStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementMobileAppConfigurationsCreateUserStatusesRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsCreateUserStatuses(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementMobileAppConfigurationsCreateUserStatusesRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsCreateUserStatusesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsCreateUserStatusesExecute(r ApiDeviceAppManagementMobileAppConfigurationsCreateUserStatusesRequest) (MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsCreateUserStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatuses"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDeviceMobileAppConfigurationUserStatus == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedDeviceMobileAppConfigurationUserStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDeviceMobileAppConfigurationUserStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsDeleteAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	managedDeviceMobileAppConfigurationAssignmentId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementMobileAppConfigurationsDeleteAssignmentsRequest) IfMatch(ifMatch string) ApiDeviceAppManagementMobileAppConfigurationsDeleteAssignmentsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsDeleteAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsDeleteAssignmentsExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsDeleteAssignments Delete navigation property assignments for deviceAppManagement

The list of group assignemenets for app configration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @param managedDeviceMobileAppConfigurationAssignmentId key: id of managedDeviceMobileAppConfigurationAssignment
 @return ApiDeviceAppManagementMobileAppConfigurationsDeleteAssignmentsRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsDeleteAssignments(ctx _context.Context, managedDeviceMobileAppConfigurationId string, managedDeviceMobileAppConfigurationAssignmentId string) ApiDeviceAppManagementMobileAppConfigurationsDeleteAssignmentsRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsDeleteAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
		managedDeviceMobileAppConfigurationAssignmentId: managedDeviceMobileAppConfigurationAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsDeleteAssignmentsExecute(r ApiDeviceAppManagementMobileAppConfigurationsDeleteAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsDeleteAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/assignments/{managedDeviceMobileAppConfigurationAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfigurationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusSummaryRequest) IfMatch(ifMatch string) ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusSummaryRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusSummaryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusSummaryExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusSummary Delete navigation property deviceStatusSummary for deviceAppManagement

App configuration device status summary.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusSummaryRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusSummary(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusSummaryRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusSummaryRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusSummaryExecute(r ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusSummaryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusSummary")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatusSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	managedDeviceMobileAppConfigurationDeviceStatusId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusesRequest) IfMatch(ifMatch string) ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusesExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsDeleteDeviceStatuses Delete navigation property deviceStatuses for deviceAppManagement

List of ManagedDeviceMobileAppConfigurationDeviceStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @param managedDeviceMobileAppConfigurationDeviceStatusId key: id of managedDeviceMobileAppConfigurationDeviceStatus
 @return ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusesRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsDeleteDeviceStatuses(ctx _context.Context, managedDeviceMobileAppConfigurationId string, managedDeviceMobileAppConfigurationDeviceStatusId string) ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusesRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
		managedDeviceMobileAppConfigurationDeviceStatusId: managedDeviceMobileAppConfigurationDeviceStatusId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusesExecute(r ApiDeviceAppManagementMobileAppConfigurationsDeleteDeviceStatusesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsDeleteDeviceStatuses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatuses/{managedDeviceMobileAppConfigurationDeviceStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfigurationDeviceStatus-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationDeviceStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusSummaryRequest) IfMatch(ifMatch string) ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusSummaryRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusSummaryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsDeleteUserStatusSummaryExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsDeleteUserStatusSummary Delete navigation property userStatusSummary for deviceAppManagement

App configuration user status summary.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusSummaryRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsDeleteUserStatusSummary(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusSummaryRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusSummaryRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsDeleteUserStatusSummaryExecute(r ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusSummaryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsDeleteUserStatusSummary")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatusSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	managedDeviceMobileAppConfigurationUserStatusId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusesRequest) IfMatch(ifMatch string) ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsDeleteUserStatusesExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsDeleteUserStatuses Delete navigation property userStatuses for deviceAppManagement

List of ManagedDeviceMobileAppConfigurationUserStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @param managedDeviceMobileAppConfigurationUserStatusId key: id of managedDeviceMobileAppConfigurationUserStatus
 @return ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusesRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsDeleteUserStatuses(ctx _context.Context, managedDeviceMobileAppConfigurationId string, managedDeviceMobileAppConfigurationUserStatusId string) ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusesRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
		managedDeviceMobileAppConfigurationUserStatusId: managedDeviceMobileAppConfigurationUserStatusId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsDeleteUserStatusesExecute(r ApiDeviceAppManagementMobileAppConfigurationsDeleteUserStatusesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsDeleteUserStatuses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatuses/{managedDeviceMobileAppConfigurationUserStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfigurationUserStatus-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationUserStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsGetAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	managedDeviceMobileAppConfigurationAssignmentId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementMobileAppConfigurationsGetAssignmentsRequest) Select_(select_ []string) ApiDeviceAppManagementMobileAppConfigurationsGetAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementMobileAppConfigurationsGetAssignmentsRequest) Expand(expand []string) ApiDeviceAppManagementMobileAppConfigurationsGetAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsGetAssignmentsRequest) Execute() (MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsGetAssignmentsExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsGetAssignments Get assignments from deviceAppManagement

The list of group assignemenets for app configration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @param managedDeviceMobileAppConfigurationAssignmentId key: id of managedDeviceMobileAppConfigurationAssignment
 @return ApiDeviceAppManagementMobileAppConfigurationsGetAssignmentsRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsGetAssignments(ctx _context.Context, managedDeviceMobileAppConfigurationId string, managedDeviceMobileAppConfigurationAssignmentId string) ApiDeviceAppManagementMobileAppConfigurationsGetAssignmentsRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsGetAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
		managedDeviceMobileAppConfigurationAssignmentId: managedDeviceMobileAppConfigurationAssignmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsGetAssignmentsExecute(r ApiDeviceAppManagementMobileAppConfigurationsGetAssignmentsRequest) (MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsGetAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/assignments/{managedDeviceMobileAppConfigurationAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfigurationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusSummaryRequest) Select_(select_ []string) ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusSummaryRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusSummaryRequest) Expand(expand []string) ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusSummaryRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusSummaryRequest) Execute() (MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsGetDeviceStatusSummaryExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsGetDeviceStatusSummary Get deviceStatusSummary from deviceAppManagement

App configuration device status summary.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusSummaryRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsGetDeviceStatusSummary(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusSummaryRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusSummaryRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsGetDeviceStatusSummaryExecute(r ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusSummaryRequest) (MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsGetDeviceStatusSummary")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatusSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	managedDeviceMobileAppConfigurationDeviceStatusId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusesRequest) Select_(select_ []string) ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusesRequest) Expand(expand []string) ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusesRequest) Execute() (MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsGetDeviceStatusesExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsGetDeviceStatuses Get deviceStatuses from deviceAppManagement

List of ManagedDeviceMobileAppConfigurationDeviceStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @param managedDeviceMobileAppConfigurationDeviceStatusId key: id of managedDeviceMobileAppConfigurationDeviceStatus
 @return ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusesRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsGetDeviceStatuses(ctx _context.Context, managedDeviceMobileAppConfigurationId string, managedDeviceMobileAppConfigurationDeviceStatusId string) ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusesRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
		managedDeviceMobileAppConfigurationDeviceStatusId: managedDeviceMobileAppConfigurationDeviceStatusId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsGetDeviceStatusesExecute(r ApiDeviceAppManagementMobileAppConfigurationsGetDeviceStatusesRequest) (MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsGetDeviceStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatuses/{managedDeviceMobileAppConfigurationDeviceStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfigurationDeviceStatus-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationDeviceStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusSummaryRequest) Select_(select_ []string) ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusSummaryRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusSummaryRequest) Expand(expand []string) ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusSummaryRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusSummaryRequest) Execute() (MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsGetUserStatusSummaryExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsGetUserStatusSummary Get userStatusSummary from deviceAppManagement

App configuration user status summary.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusSummaryRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsGetUserStatusSummary(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusSummaryRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusSummaryRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsGetUserStatusSummaryExecute(r ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusSummaryRequest) (MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsGetUserStatusSummary")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatusSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	managedDeviceMobileAppConfigurationUserStatusId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusesRequest) Select_(select_ []string) ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusesRequest) Expand(expand []string) ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusesRequest) Execute() (MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsGetUserStatusesExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsGetUserStatuses Get userStatuses from deviceAppManagement

List of ManagedDeviceMobileAppConfigurationUserStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @param managedDeviceMobileAppConfigurationUserStatusId key: id of managedDeviceMobileAppConfigurationUserStatus
 @return ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusesRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsGetUserStatuses(ctx _context.Context, managedDeviceMobileAppConfigurationId string, managedDeviceMobileAppConfigurationUserStatusId string) ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusesRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
		managedDeviceMobileAppConfigurationUserStatusId: managedDeviceMobileAppConfigurationUserStatusId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsGetUserStatusesExecute(r ApiDeviceAppManagementMobileAppConfigurationsGetUserStatusesRequest) (MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsGetUserStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatuses/{managedDeviceMobileAppConfigurationUserStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfigurationUserStatus-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationUserStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest) Top(top int32) ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest) Skip(skip int32) ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest) Search(search string) ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest) Filter(filter string) ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest) Count(count bool) ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest) Orderby(orderby []string) ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest) Select_(select_ []string) ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest) Expand(expand []string) ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest) Execute() (CollectionOfManagedDeviceMobileAppConfigurationAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsListAssignmentsExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsListAssignments Get assignments from deviceAppManagement

The list of group assignemenets for app configration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsListAssignments(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
//  @return CollectionOfManagedDeviceMobileAppConfigurationAssignment
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsListAssignmentsExecute(r ApiDeviceAppManagementMobileAppConfigurationsListAssignmentsRequest) (CollectionOfManagedDeviceMobileAppConfigurationAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedDeviceMobileAppConfigurationAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsListAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/assignments"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest) Top(top int32) ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest) Skip(skip int32) ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest) Search(search string) ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest) Filter(filter string) ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest) Count(count bool) ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest) Orderby(orderby []string) ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest) Select_(select_ []string) ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest) Expand(expand []string) ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest) Execute() (CollectionOfManagedDeviceMobileAppConfigurationDeviceStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsListDeviceStatusesExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsListDeviceStatuses Get deviceStatuses from deviceAppManagement

List of ManagedDeviceMobileAppConfigurationDeviceStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsListDeviceStatuses(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
//  @return CollectionOfManagedDeviceMobileAppConfigurationDeviceStatus
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsListDeviceStatusesExecute(r ApiDeviceAppManagementMobileAppConfigurationsListDeviceStatusesRequest) (CollectionOfManagedDeviceMobileAppConfigurationDeviceStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedDeviceMobileAppConfigurationDeviceStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsListDeviceStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatuses"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest) Top(top int32) ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest) Skip(skip int32) ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest) Search(search string) ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest) Filter(filter string) ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest) Count(count bool) ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest) Orderby(orderby []string) ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest) Select_(select_ []string) ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest) Expand(expand []string) ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest) Execute() (CollectionOfManagedDeviceMobileAppConfigurationUserStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsListUserStatusesExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsListUserStatuses Get userStatuses from deviceAppManagement

List of ManagedDeviceMobileAppConfigurationUserStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsListUserStatuses(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
//  @return CollectionOfManagedDeviceMobileAppConfigurationUserStatus
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsListUserStatusesExecute(r ApiDeviceAppManagementMobileAppConfigurationsListUserStatusesRequest) (CollectionOfManagedDeviceMobileAppConfigurationUserStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedDeviceMobileAppConfigurationUserStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsListUserStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatuses"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsUpdateAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	managedDeviceMobileAppConfigurationAssignmentId string
	microsoftGraphManagedDeviceMobileAppConfigurationAssignment *MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment
}

// New navigation property values
func (r ApiDeviceAppManagementMobileAppConfigurationsUpdateAssignmentsRequest) MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment(microsoftGraphManagedDeviceMobileAppConfigurationAssignment MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment) ApiDeviceAppManagementMobileAppConfigurationsUpdateAssignmentsRequest {
	r.microsoftGraphManagedDeviceMobileAppConfigurationAssignment = &microsoftGraphManagedDeviceMobileAppConfigurationAssignment
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsUpdateAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsUpdateAssignmentsExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsUpdateAssignments Update the navigation property assignments in deviceAppManagement

The list of group assignemenets for app configration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @param managedDeviceMobileAppConfigurationAssignmentId key: id of managedDeviceMobileAppConfigurationAssignment
 @return ApiDeviceAppManagementMobileAppConfigurationsUpdateAssignmentsRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsUpdateAssignments(ctx _context.Context, managedDeviceMobileAppConfigurationId string, managedDeviceMobileAppConfigurationAssignmentId string) ApiDeviceAppManagementMobileAppConfigurationsUpdateAssignmentsRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsUpdateAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
		managedDeviceMobileAppConfigurationAssignmentId: managedDeviceMobileAppConfigurationAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsUpdateAssignmentsExecute(r ApiDeviceAppManagementMobileAppConfigurationsUpdateAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsUpdateAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/assignments/{managedDeviceMobileAppConfigurationAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfigurationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDeviceMobileAppConfigurationAssignment == nil {
		return nil, reportError("microsoftGraphManagedDeviceMobileAppConfigurationAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDeviceMobileAppConfigurationAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	microsoftGraphManagedDeviceMobileAppConfigurationDeviceSummary *MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary
}

// New navigation property values
func (r ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusSummaryRequest) MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary(microsoftGraphManagedDeviceMobileAppConfigurationDeviceSummary MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary) ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusSummaryRequest {
	r.microsoftGraphManagedDeviceMobileAppConfigurationDeviceSummary = &microsoftGraphManagedDeviceMobileAppConfigurationDeviceSummary
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusSummaryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusSummaryExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusSummary Update the navigation property deviceStatusSummary in deviceAppManagement

App configuration device status summary.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusSummaryRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusSummary(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusSummaryRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusSummaryRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusSummaryExecute(r ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusSummaryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusSummary")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatusSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDeviceMobileAppConfigurationDeviceSummary == nil {
		return nil, reportError("microsoftGraphManagedDeviceMobileAppConfigurationDeviceSummary is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDeviceMobileAppConfigurationDeviceSummary
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	managedDeviceMobileAppConfigurationDeviceStatusId string
	microsoftGraphManagedDeviceMobileAppConfigurationDeviceStatus *MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus
}

// New navigation property values
func (r ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusesRequest) MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus(microsoftGraphManagedDeviceMobileAppConfigurationDeviceStatus MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus) ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusesRequest {
	r.microsoftGraphManagedDeviceMobileAppConfigurationDeviceStatus = &microsoftGraphManagedDeviceMobileAppConfigurationDeviceStatus
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusesExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsUpdateDeviceStatuses Update the navigation property deviceStatuses in deviceAppManagement

List of ManagedDeviceMobileAppConfigurationDeviceStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @param managedDeviceMobileAppConfigurationDeviceStatusId key: id of managedDeviceMobileAppConfigurationDeviceStatus
 @return ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusesRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsUpdateDeviceStatuses(ctx _context.Context, managedDeviceMobileAppConfigurationId string, managedDeviceMobileAppConfigurationDeviceStatusId string) ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusesRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
		managedDeviceMobileAppConfigurationDeviceStatusId: managedDeviceMobileAppConfigurationDeviceStatusId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusesExecute(r ApiDeviceAppManagementMobileAppConfigurationsUpdateDeviceStatusesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsUpdateDeviceStatuses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatuses/{managedDeviceMobileAppConfigurationDeviceStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfigurationDeviceStatus-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationDeviceStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDeviceMobileAppConfigurationDeviceStatus == nil {
		return nil, reportError("microsoftGraphManagedDeviceMobileAppConfigurationDeviceStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDeviceMobileAppConfigurationDeviceStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	microsoftGraphManagedDeviceMobileAppConfigurationUserSummary *MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary
}

// New navigation property values
func (r ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusSummaryRequest) MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary(microsoftGraphManagedDeviceMobileAppConfigurationUserSummary MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary) ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusSummaryRequest {
	r.microsoftGraphManagedDeviceMobileAppConfigurationUserSummary = &microsoftGraphManagedDeviceMobileAppConfigurationUserSummary
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusSummaryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsUpdateUserStatusSummaryExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsUpdateUserStatusSummary Update the navigation property userStatusSummary in deviceAppManagement

App configuration user status summary.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusSummaryRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsUpdateUserStatusSummary(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusSummaryRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusSummaryRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsUpdateUserStatusSummaryExecute(r ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusSummaryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsUpdateUserStatusSummary")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatusSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDeviceMobileAppConfigurationUserSummary == nil {
		return nil, reportError("microsoftGraphManagedDeviceMobileAppConfigurationUserSummary is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDeviceMobileAppConfigurationUserSummary
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	managedDeviceMobileAppConfigurationUserStatusId string
	microsoftGraphManagedDeviceMobileAppConfigurationUserStatus *MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus
}

// New navigation property values
func (r ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusesRequest) MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus(microsoftGraphManagedDeviceMobileAppConfigurationUserStatus MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus) ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusesRequest {
	r.microsoftGraphManagedDeviceMobileAppConfigurationUserStatus = &microsoftGraphManagedDeviceMobileAppConfigurationUserStatus
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsUpdateUserStatusesExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsUpdateUserStatuses Update the navigation property userStatuses in deviceAppManagement

List of ManagedDeviceMobileAppConfigurationUserStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @param managedDeviceMobileAppConfigurationUserStatusId key: id of managedDeviceMobileAppConfigurationUserStatus
 @return ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusesRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsUpdateUserStatuses(ctx _context.Context, managedDeviceMobileAppConfigurationId string, managedDeviceMobileAppConfigurationUserStatusId string) ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusesRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
		managedDeviceMobileAppConfigurationUserStatusId: managedDeviceMobileAppConfigurationUserStatusId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementMobileAppConfigurationsUpdateUserStatusesExecute(r ApiDeviceAppManagementMobileAppConfigurationsUpdateUserStatusesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementMobileAppConfigurationsUpdateUserStatuses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatuses/{managedDeviceMobileAppConfigurationUserStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfigurationUserStatus-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationUserStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDeviceMobileAppConfigurationUserStatus == nil {
		return nil, reportError("microsoftGraphManagedDeviceMobileAppConfigurationUserStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDeviceMobileAppConfigurationUserStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementUpdateMobileAppConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService
	managedDeviceMobileAppConfigurationId string
	microsoftGraphManagedDeviceMobileAppConfiguration *MicrosoftGraphManagedDeviceMobileAppConfiguration
}

// New navigation property values
func (r ApiDeviceAppManagementUpdateMobileAppConfigurationsRequest) MicrosoftGraphManagedDeviceMobileAppConfiguration(microsoftGraphManagedDeviceMobileAppConfiguration MicrosoftGraphManagedDeviceMobileAppConfiguration) ApiDeviceAppManagementUpdateMobileAppConfigurationsRequest {
	r.microsoftGraphManagedDeviceMobileAppConfiguration = &microsoftGraphManagedDeviceMobileAppConfiguration
	return r
}

func (r ApiDeviceAppManagementUpdateMobileAppConfigurationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementUpdateMobileAppConfigurationsExecute(r)
}

/*
DeviceAppManagementUpdateMobileAppConfigurations Update the navigation property mobileAppConfigurations in deviceAppManagement

The Managed Device Mobile Application Configurations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementUpdateMobileAppConfigurationsRequest
*/
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementUpdateMobileAppConfigurations(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementUpdateMobileAppConfigurationsRequest {
	return ApiDeviceAppManagementUpdateMobileAppConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedDeviceMobileAppConfigurationApiService) DeviceAppManagementUpdateMobileAppConfigurationsExecute(r ApiDeviceAppManagementUpdateMobileAppConfigurationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedDeviceMobileAppConfigurationApiService.DeviceAppManagementUpdateMobileAppConfigurations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDeviceMobileAppConfiguration == nil {
		return nil, reportError("microsoftGraphManagedDeviceMobileAppConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDeviceMobileAppConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
