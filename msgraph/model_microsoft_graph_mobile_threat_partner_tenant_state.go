/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphMobileThreatPartnerTenantState Partner state of this tenant.
type MicrosoftGraphMobileThreatPartnerTenantState string

// List of microsoft.graph.mobileThreatPartnerTenantState
const (
	UNAVAILABLE MicrosoftGraphMobileThreatPartnerTenantState = "unavailable"
	AVAILABLE MicrosoftGraphMobileThreatPartnerTenantState = "available"
	ENABLED MicrosoftGraphMobileThreatPartnerTenantState = "enabled"
	UNRESPONSIVE MicrosoftGraphMobileThreatPartnerTenantState = "unresponsive"
)

// All allowed values of MicrosoftGraphMobileThreatPartnerTenantState enum
var AllowedMicrosoftGraphMobileThreatPartnerTenantStateEnumValues = []MicrosoftGraphMobileThreatPartnerTenantState{
	"unavailable",
	"available",
	"enabled",
	"unresponsive",
}

func (v *MicrosoftGraphMobileThreatPartnerTenantState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphMobileThreatPartnerTenantState(value)
	for _, existing := range AllowedMicrosoftGraphMobileThreatPartnerTenantStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphMobileThreatPartnerTenantState", value)
}

// NewMicrosoftGraphMobileThreatPartnerTenantStateFromValue returns a pointer to a valid MicrosoftGraphMobileThreatPartnerTenantState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphMobileThreatPartnerTenantStateFromValue(v string) (*MicrosoftGraphMobileThreatPartnerTenantState, error) {
	ev := MicrosoftGraphMobileThreatPartnerTenantState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphMobileThreatPartnerTenantState: valid values are %v", v, AllowedMicrosoftGraphMobileThreatPartnerTenantStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphMobileThreatPartnerTenantState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphMobileThreatPartnerTenantStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.mobileThreatPartnerTenantState value
func (v MicrosoftGraphMobileThreatPartnerTenantState) Ptr() *MicrosoftGraphMobileThreatPartnerTenantState {
	return &v
}

type NullableMicrosoftGraphMobileThreatPartnerTenantState struct {
	value *MicrosoftGraphMobileThreatPartnerTenantState
	isSet bool
}

func (v NullableMicrosoftGraphMobileThreatPartnerTenantState) Get() *MicrosoftGraphMobileThreatPartnerTenantState {
	return v.value
}

func (v *NullableMicrosoftGraphMobileThreatPartnerTenantState) Set(val *MicrosoftGraphMobileThreatPartnerTenantState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphMobileThreatPartnerTenantState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphMobileThreatPartnerTenantState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphMobileThreatPartnerTenantState(val *MicrosoftGraphMobileThreatPartnerTenantState) *NullableMicrosoftGraphMobileThreatPartnerTenantState {
	return &NullableMicrosoftGraphMobileThreatPartnerTenantState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphMobileThreatPartnerTenantState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphMobileThreatPartnerTenantState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

