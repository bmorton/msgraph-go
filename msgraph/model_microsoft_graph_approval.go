/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MicrosoftGraphApproval struct for MicrosoftGraphApproval
type MicrosoftGraphApproval struct {
	// Read-only.
	Id *string `json:"id,omitempty"`
	// A collection of stages in the approval decision.
	Stages *[]MicrosoftGraphApprovalStage `json:"stages,omitempty"`
}

// NewMicrosoftGraphApproval instantiates a new MicrosoftGraphApproval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphApproval() *MicrosoftGraphApproval {
	this := MicrosoftGraphApproval{}
	return &this
}

// NewMicrosoftGraphApprovalWithDefaults instantiates a new MicrosoftGraphApproval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphApprovalWithDefaults() *MicrosoftGraphApproval {
	this := MicrosoftGraphApproval{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MicrosoftGraphApproval) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphApproval) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphApproval) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphApproval) SetId(v string) {
	o.Id = &v
}

// GetStages returns the Stages field value if set, zero value otherwise.
func (o *MicrosoftGraphApproval) GetStages() []MicrosoftGraphApprovalStage {
	if o == nil || o.Stages == nil {
		var ret []MicrosoftGraphApprovalStage
		return ret
	}
	return *o.Stages
}

// GetStagesOk returns a tuple with the Stages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphApproval) GetStagesOk() (*[]MicrosoftGraphApprovalStage, bool) {
	if o == nil || o.Stages == nil {
		return nil, false
	}
	return o.Stages, true
}

// HasStages returns a boolean if a field has been set.
func (o *MicrosoftGraphApproval) HasStages() bool {
	if o != nil && o.Stages != nil {
		return true
	}

	return false
}

// SetStages gets a reference to the given []MicrosoftGraphApprovalStage and assigns it to the Stages field.
func (o *MicrosoftGraphApproval) SetStages(v []MicrosoftGraphApprovalStage) {
	o.Stages = &v
}

func (o MicrosoftGraphApproval) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Stages != nil {
		toSerialize["stages"] = o.Stages
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphApproval struct {
	value *MicrosoftGraphApproval
	isSet bool
}

func (v NullableMicrosoftGraphApproval) Get() *MicrosoftGraphApproval {
	return v.value
}

func (v *NullableMicrosoftGraphApproval) Set(val *MicrosoftGraphApproval) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphApproval) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphApproval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphApproval(val *MicrosoftGraphApproval) *NullableMicrosoftGraphApproval {
	return &NullableMicrosoftGraphApproval{value: val, isSet: true}
}

func (v NullableMicrosoftGraphApproval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphApproval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


