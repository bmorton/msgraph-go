/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphRecurrencePatternType the model 'MicrosoftGraphRecurrencePatternType'
type MicrosoftGraphRecurrencePatternType string

// List of microsoft.graph.recurrencePatternType
const (
	DAILY MicrosoftGraphRecurrencePatternType = "daily"
	WEEKLY MicrosoftGraphRecurrencePatternType = "weekly"
	ABSOLUTE_MONTHLY MicrosoftGraphRecurrencePatternType = "absoluteMonthly"
	RELATIVE_MONTHLY MicrosoftGraphRecurrencePatternType = "relativeMonthly"
	ABSOLUTE_YEARLY MicrosoftGraphRecurrencePatternType = "absoluteYearly"
	RELATIVE_YEARLY MicrosoftGraphRecurrencePatternType = "relativeYearly"
)

// All allowed values of MicrosoftGraphRecurrencePatternType enum
var AllowedMicrosoftGraphRecurrencePatternTypeEnumValues = []MicrosoftGraphRecurrencePatternType{
	"daily",
	"weekly",
	"absoluteMonthly",
	"relativeMonthly",
	"absoluteYearly",
	"relativeYearly",
}

func (v *MicrosoftGraphRecurrencePatternType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphRecurrencePatternType(value)
	for _, existing := range AllowedMicrosoftGraphRecurrencePatternTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphRecurrencePatternType", value)
}

// NewMicrosoftGraphRecurrencePatternTypeFromValue returns a pointer to a valid MicrosoftGraphRecurrencePatternType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphRecurrencePatternTypeFromValue(v string) (*MicrosoftGraphRecurrencePatternType, error) {
	ev := MicrosoftGraphRecurrencePatternType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphRecurrencePatternType: valid values are %v", v, AllowedMicrosoftGraphRecurrencePatternTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphRecurrencePatternType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphRecurrencePatternTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.recurrencePatternType value
func (v MicrosoftGraphRecurrencePatternType) Ptr() *MicrosoftGraphRecurrencePatternType {
	return &v
}

type NullableMicrosoftGraphRecurrencePatternType struct {
	value *MicrosoftGraphRecurrencePatternType
	isSet bool
}

func (v NullableMicrosoftGraphRecurrencePatternType) Get() *MicrosoftGraphRecurrencePatternType {
	return v.value
}

func (v *NullableMicrosoftGraphRecurrencePatternType) Set(val *MicrosoftGraphRecurrencePatternType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphRecurrencePatternType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphRecurrencePatternType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphRecurrencePatternType(val *MicrosoftGraphRecurrencePatternType) *NullableMicrosoftGraphRecurrencePatternType {
	return &NullableMicrosoftGraphRecurrencePatternType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphRecurrencePatternType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphRecurrencePatternType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

