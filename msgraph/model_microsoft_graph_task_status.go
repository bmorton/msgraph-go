/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphTaskStatus the model 'MicrosoftGraphTaskStatus'
type MicrosoftGraphTaskStatus string

// List of microsoft.graph.taskStatus
const (
	NOT_STARTED MicrosoftGraphTaskStatus = "notStarted"
	IN_PROGRESS MicrosoftGraphTaskStatus = "inProgress"
	COMPLETED MicrosoftGraphTaskStatus = "completed"
	WAITING_ON_OTHERS MicrosoftGraphTaskStatus = "waitingOnOthers"
	DEFERRED MicrosoftGraphTaskStatus = "deferred"
)

// All allowed values of MicrosoftGraphTaskStatus enum
var AllowedMicrosoftGraphTaskStatusEnumValues = []MicrosoftGraphTaskStatus{
	"notStarted",
	"inProgress",
	"completed",
	"waitingOnOthers",
	"deferred",
}

func (v *MicrosoftGraphTaskStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphTaskStatus(value)
	for _, existing := range AllowedMicrosoftGraphTaskStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphTaskStatus", value)
}

// NewMicrosoftGraphTaskStatusFromValue returns a pointer to a valid MicrosoftGraphTaskStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphTaskStatusFromValue(v string) (*MicrosoftGraphTaskStatus, error) {
	ev := MicrosoftGraphTaskStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphTaskStatus: valid values are %v", v, AllowedMicrosoftGraphTaskStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphTaskStatus) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphTaskStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.taskStatus value
func (v MicrosoftGraphTaskStatus) Ptr() *MicrosoftGraphTaskStatus {
	return &v
}

type NullableMicrosoftGraphTaskStatus struct {
	value *MicrosoftGraphTaskStatus
	isSet bool
}

func (v NullableMicrosoftGraphTaskStatus) Get() *MicrosoftGraphTaskStatus {
	return v.value
}

func (v *NullableMicrosoftGraphTaskStatus) Set(val *MicrosoftGraphTaskStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphTaskStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphTaskStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphTaskStatus(val *MicrosoftGraphTaskStatus) *NullableMicrosoftGraphTaskStatus {
	return &NullableMicrosoftGraphTaskStatus{value: val, isSet: true}
}

func (v NullableMicrosoftGraphTaskStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphTaskStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

